package naov6
interface ALNotificationManager
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn add(notification: any) -> int32 //uid:114
	fn remove(notificationId: int32) //uid:115
	fn notifications() -> any //uid:116
	fn notification(notificationId: int32) -> any //uid:117
	fn _internalNotifications() -> any //uid:118
	fn _internalNotification(notificationId: int32) -> any //uid:119
	fn _severity() -> int32 //uid:120
	fn _read(int: int32) //uid:121
	fn _isImmediate(notificationId: int32) -> bool //uid:122
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALResourceManager
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn waitForResource(resourceName: str,ownerName: str,callbackName: str,timeoutSeconds: int32) //uid:114
	fn acquireResource(resourceName: str,moduleName: str,callbackName: str,timeoutSeconds: int32) //uid:115
	fn waitForOptionalResourcesTree(P0: Vec<str>, P1: str, P2: str, P3: int32, P4: Vec<str>) -> Vec<str> //uid:116
	fn waitForResourcesTree(resourceName: Vec<str>,moduleName: str,callbackName: str,timeoutSeconds: int32) //uid:117
	fn acquireResourcesTree(resourceName: Vec<str>,moduleName: str,callbackName: str,timeoutSeconds: int32) //uid:118
	fn areResourcesOwnedBy(resourceNameList: Vec<str>,ownerName: str) -> bool //uid:119
	fn releaseResource(resourceName: str,ownerName: str) //uid:120
	fn releaseResources(resourceNames: Vec<str>,ownerName: str) //uid:121
	fn enableStateResource(resourceName: str,enabled: bool) //uid:122
	fn checkStateResourceFree(resourceName: Vec<str>) -> bool //uid:123
	fn areResourcesFree(resourceNames: Vec<str>) -> bool //uid:124
	fn isResourceFree(resourceNames: str) -> bool //uid:125
	fn createResource(resourceName: str,parentResourceName: str) //uid:126
	fn deleteResource(resourceName: str,deleteChildResources: bool) //uid:127
	fn isInGroup(resourceGroupName: str,resourceName: str) -> bool //uid:128
	fn createResourcesList(resourceGroupName: Vec<str>,resourceName: str) //uid:129
	fn getResources() -> any //uid:130
	fn ownersGet() -> any //uid:131
	sig traceObject(P0: EventTrace) //uid:86
end
interface _ExitInteractive
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn start() //uid:100
	fn stop() //uid:101
	fn isRunning() -> bool //uid:102
	sig traceObject(P0: EventTrace) //uid:86
	sig timeout(P0: uint64) //uid:103
	prop timeout(param: uint64) //uid:103
end
interface ALAutonomousBlinking
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn setEnabled(P0: bool) //uid:100
	fn isEnabled() -> bool //uid:101
	sig traceObject(P0: EventTrace) //uid:86
end
interface _ALAutonomousTablet
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn setEnabled(P0: bool) //uid:100
	fn isEnabled() -> bool //uid:101
	fn setEmotionState(P0: int32) //uid:102
	fn setFocusedActivity(P0: str) //uid:103
	fn setMode(P0: str) //uid:104
	fn getMode() -> str //uid:105
	fn showBubblesView() //uid:106
	fn resetTablet() //uid:107
	sig traceObject(P0: EventTrace) //uid:86
	sig mode(P0: str) //uid:108
end
interface _ConditionChecker_maxwell_75733_0
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn onEvent(key: str,value: any,message: str) //uid:114
	fn onPreferenceUpdated(P0: str,P1: any,P2: str) //uid:115
	fn onPreferenceSynchronized(P0: str,P1: any,P2: str) //uid:116
	sig traceObject(P0: EventTrace) //uid:86
end
interface PackageManager
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn install(P0: str) -> bool //uid:100
	fn install(P0: obj) -> bool //uid:101
	fn installCheckMd5(P0: str, P1: str) -> bool //uid:102
	fn _install(P0: str, P1: str) -> bool //uid:103
	fn _install(P0: str, P1: str, P2: str) -> bool //uid:104
	fn _install(P0: str, P1: str, P2: str, P3: bool) -> bool //uid:105
	fn _install(P0: obj, P1: str) -> bool //uid:106
	fn _install(P0: obj, P1: str, P2: str) -> bool //uid:107
	fn hasPackage(P0: str) -> bool //uid:108
	fn packages2() -> Vec<PackageInfo2> //uid:109
	fn package2(P0: str) -> PackageInfo2 //uid:110
	fn packageIcon(P0: str) -> str //uid:111
	fn removePkg(P0: str) //uid:112
	fn getPackages() -> any //uid:115
	fn packages() -> Vec<PackageInfo> //uid:116
	fn package(P0: str) -> PackageInfo //uid:117
	fn getPackage(P0: str) -> any //uid:118
	fn getPackageIcon(P0: str) -> any //uid:119
	fn install(P0: str, P1: str) -> int32 //uid:120
	fn install(P0: str, P1: str, P2: str) -> int32 //uid:121
	fn remove(P0: str) -> int32 //uid:122
	sig traceObject(P0: EventTrace) //uid:86
	sig onPackageInstalled2(P0: PackageInfo2) //uid:113
	sig onPackageRemoved2(P0: PackageInfo2) //uid:114
	sig _onPackageInstalled(P0: any) //uid:123
	sig _onPackageRemoved(P0: any) //uid:124
	sig packageInstalled(P0: PackageInfo) //uid:125
	sig packageRemoved(P0: PackageInfo) //uid:126
	sig onPackageInstalled(P0: PackageInfo) //uid:127
	sig onPackageRemoved(P0: PackageInfo) //uid:128
end
interface _UserSessionManager
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn startMonitoringUsers() //uid:100
	fn stopMonitoringUsers() //uid:101
	fn isMonitoringUsers() -> bool //uid:102
	fn identify(P0: int32) -> RecognitionResult //uid:103
	fn reidentifyFocusedUser() -> RecognitionResult //uid:104
	sig traceObject(P0: EventTrace) //uid:86
	sig onStart() //uid:105
	sig onStop() //uid:106
	sig identificationStarted(P0: int32) //uid:107
	sig identificationResult(P0: RecognitionResult) //uid:108
	sig focusingUser() //uid:109
	sig unFocusingUser() //uid:110
	sig identificationStatus(P0: int32) //uid:111
	sig compatOnPopulationUpdated() //uid:112
	sig retryIdentificationDelay(P0: uint64) //uid:113
	sig unfocusTimeout(P0: uint64) //uid:114
	sig forgetUserTimout(P0: uint64) //uid:115
	prop retryIdentificationDelay(param: uint64) //uid:113
	prop unfocusTimeout(param: uint64) //uid:114
	prop forgetUserTimout(param: uint64) //uid:115
end
interface ALLogger
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn fatal(moduleName: str,message: str) //uid:114
	fn error(moduleName: str,message: str) //uid:115
	fn warn(moduleName: str,message: str) //uid:116
	fn info(moduleName: str,message: str) //uid:117
	fn debug(moduleName: str,message: str) //uid:118
	fn setVerbosity(P0: str) //uid:119
	fn verbosity() -> int32 //uid:120
	fn logInFile(P0: str) //uid:121
	fn logInForwarder(P0: str) //uid:122
	fn removeHandler(P0: str) //uid:123
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALThinkingExpression
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn _startActivity(P0: str) //uid:100
	fn start() //uid:101
	fn stop() //uid:102
	fn isRunning() -> bool //uid:103
	fn _getLoadingResponseToSay(P0: str) -> str //uid:104
	fn _onPreferenceUpdated(P0: any) //uid:105
	fn _onPreferenceSynchronized(P0: any) //uid:106
	fn _refCount() -> int32 //uid:107
	sig traceObject(P0: EventTrace) //uid:86
end
interface Actuation
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn makeAnimation(P0: Vec<str>) -> obj //uid:100
	fn makeCroppedAnimation(P0: obj, P1: uint64, P2: uint64) -> obj //uid:101
	fn makeAnimate(P0: obj, P1: obj) -> obj //uid:102
	fn makeGoTo(P0: obj, P1: obj) -> obj //uid:103
	fn makeLookAt(P0: obj, P1: obj) -> obj //uid:104
	fn robotFrame() -> obj //uid:105
	fn gazeFrame() -> obj //uid:106
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALServiceManager
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn start(P0: str) //uid:100
	fn restart(P0: str) //uid:101
	fn stop(P0: str) //uid:102
	fn stopAllServices() //uid:103
	fn isServiceRunning(P0: str) -> bool //uid:104
	fn serviceMemoryUsage(P0: str) -> uint64 //uid:105
	fn services() -> Vec<ServiceProcessInfo> //uid:106
	fn service(P0: str) -> ServiceProcessInfo //uid:107
	fn startService(P0: str) -> bool //uid:110
	fn restartService(P0: str) -> bool //uid:111
	fn stopService(P0: str) -> bool //uid:112
	sig traceObject(P0: EventTrace) //uid:86
	sig serviceStarted(P0: str, P1: int32) //uid:108
	sig serviceStopped(P0: str, P1: int32) //uid:109
end
interface _ALNotificationReader
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn _read(notificationId: int32) //uid:114
	fn _readAll() //uid:115
	fn _readAllSos() //uid:116
	fn _skip() -> bool //uid:117
	fn _stopReading() //uid:118
	fn _onPreferenceChanged(P0: str, P1: any, P2: any) //uid:119
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALMotion
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn wakeUp() -> bool //uid:114
	fn rest() //uid:115
	fn _rest(chainName: str) //uid:116
	fn _stopChain(chainName: str) //uid:117
	fn _restReflex(whyString: str,stateList: any) //uid:118
	fn _blockedLegReflex() //uid:119
	fn _shutdown() //uid:120
	fn _setMotionPosture(postureName: str,bodyAngles: Vec<float32>) -> bool //uid:121
	fn _getMotionPosture(postureName: str) -> Vec<float32> //uid:122
	fn _getMotionPostureList() -> Vec<str> //uid:123
	fn robotIsWakeUp() -> bool //uid:124
	fn stiffnessInterpolation(names: any,stiffnessLists: any,timeLists: any) //uid:125
	fn setStiffnesses(names: any,stiffnesses: any) //uid:126
	fn _setStiffnesses(names: any,stiffnesses: any) //uid:127
	fn getStiffnesses(jointName: any) -> Vec<float32> //uid:128
	fn angleInterpolation(names: any,angleLists: any,timeLists: any,isAbsolute: bool) //uid:129
	fn angleInterpolationWithSpeed(names: any,targetAngles: any,maxSpeedFraction: float32) //uid:130
	fn angleInterpolationBezier(jointNames: Vec<str>,times: any,controlPoints: any) //uid:131
	fn setAngles(names: any,angles: any,fractionMaxSpeed: float32) //uid:132
	fn setAngles(names: any,angles: any,fractionMaxSpeeds: Vec<float32>) //uid:133
	fn changeAngles(names: any,changes: any,fractionMaxSpeed: float32) //uid:134
	fn getAngles(names: any,useSensors: bool) -> Vec<float32> //uid:135
	fn openHand(handName: str) //uid:136
	fn closeHand(handName: str) //uid:137
	fn move(x: float32,y: float32,theta: float32) //uid:138
	fn move(x: float32,y: float32,theta: float32,moveConfig: any) //uid:139
	fn moveToward(x: float32,y: float32,theta: float32) //uid:140
	fn moveToward(x: float32,y: float32,theta: float32,moveConfig: any) //uid:141
	fn setWalkTargetVelocity(x: float32,y: float32,theta: float32,frequency: float32) //uid:142
	fn setWalkTargetVelocity(x: float32,y: float32,theta: float32,frequency: float32,feetGaitConfig: any) //uid:143
	fn setWalkTargetVelocity(x: float32,y: float32,theta: float32,frequency: float32,leftFootMoveConfig: any,rightFootMoveConfig: any) //uid:144
	fn moveTo(x: float32,y: float32,theta: float32) -> bool //uid:145
	fn moveTo(x: float32,y: float32,theta: float32,time: float32) -> bool //uid:146
	fn moveTo(x: float32,y: float32,theta: float32,moveConfig: any) -> bool //uid:147
	fn moveTo(x: float32,y: float32,theta: float32,time: float32,moveConfig: any) -> bool //uid:148
	fn moveTo(controlPoint: any) -> bool //uid:149
	fn moveTo(controlPoint: any,moveConfig: any) -> bool //uid:150
	fn _moveToPod(x: float32,y: float32,theta: float32) -> bool //uid:151
	fn _moveToPod(x: float32,y: float32,theta: float32,moveConfig: any) -> bool //uid:152
	fn _followPath(path: any,moveConfig: any) //uid:153
	fn _followPath(path: any) //uid:154
	fn _followPathInWorld(poseStart: any,path: any,moveConfig: any) //uid:155
	fn _followPathInWorld(poseStart: any,path: any) //uid:156
	fn _setFollowPathSpeedFactor(speedFactor: float32) //uid:157
	fn moveAlong(trajectory: any) -> bool //uid:158
	fn moveAlong(trajectory: any,scaleFactor: float32) -> bool //uid:159
	fn _getRemainingPath(sampleStep: float32) -> any //uid:160
	fn _getRemainingTrajectory(timeStep: float32,preview: float32) -> any //uid:161
	fn _getTrajectoryCompletion() -> float32 //uid:162
	fn walkTo(x: float32,y: float32,theta: float32) -> bool //uid:163
	fn walkTo(x: float32,y: float32,theta: float32,feetGaitConfig: any) -> bool //uid:164
	fn walkTo(controlPoint: any) -> bool //uid:165
	fn walkTo(controlPoint: any,feetGaitConfig: any) -> bool //uid:166
	fn setFootSteps(legName: Vec<str>,footSteps: any,timeList: Vec<float32>,clearExisting: bool) //uid:167
	fn setFootStepsWithSpeed(legName: Vec<str>,footSteps: any,fractionMaxSpeed: Vec<float32>,clearExisting: bool) //uid:168
	fn getFootSteps() -> any //uid:169
	fn walkInit() //uid:170
	fn moveInit() //uid:171
	fn waitUntilWalkIsFinished() //uid:172
	fn waitUntilMoveIsFinished() //uid:173
	fn walkIsActive() -> bool //uid:174
	fn moveIsActive() -> bool //uid:175
	fn stopWalk() -> bool //uid:176
	fn stopMove() -> bool //uid:177
	fn getFootGaitConfig(config: str) -> any //uid:178
	fn getMoveConfig(config: str) -> any //uid:179
	fn getRobotPosition(useSensors: bool) -> Vec<float32> //uid:180
	fn getNextRobotPosition() -> Vec<float32> //uid:181
	fn getRobotVelocity() -> Vec<float32> //uid:182
	fn _getCumulatedDisplacement() -> Vec<float32> //uid:183
	fn getWalkArmsEnabled() -> any //uid:184
	fn setWalkArmsEnabled(leftArmEnabled: bool,rightArmEnabled: bool) //uid:185
	fn getMoveArmsEnabled(chainName: str) -> bool //uid:186
	fn setMoveArmsEnabled(leftArmEnabled: bool,rightArmEnabled: bool) //uid:187
	fn positionInterpolation(chainName: str,space: int32,path: any,axisMask: int32,durations: any,isAbsolute: bool) //uid:188
	fn positionInterpolations(effectorNames: Vec<str>,taskSpaceForAllPaths: int32,paths: any,axisMasks: any,relativeTimes: any,isAbsolute: bool) //uid:189
	fn positionInterpolations(effectorNames: any,taskSpaceForAllPaths: any,paths: any,axisMasks: any,relativeTimes: any) //uid:190
	fn setPosition(chainName: str,space: int32,position: Vec<float32>,fractionMaxSpeed: float32,axisMask: int32) //uid:191
	fn setPositions(names: any,spaces: any,positions: any,fractionMaxSpeed: float32,axisMask: any) //uid:192
	fn changePosition(effectorName: str,space: int32,positionChange: Vec<float32>,fractionMaxSpeed: float32,axisMask: int32) //uid:193
	fn getPosition(name: str,space: int32,useSensorValues: bool) -> Vec<float32> //uid:194
	fn transformInterpolation(chainName: str,space: int32,path: any,axisMask: int32,duration: any,isAbsolute: bool) //uid:195
	fn transformInterpolations(effectorNames: Vec<str>,taskSpaceForAllPaths: int32,paths: any,axisMasks: any,relativeTimes: any,isAbsolute: bool) //uid:196
	fn transformInterpolations(effectorNames: any,taskSpaceForAllPaths: any,paths: any,axisMasks: any,relativeTimes: any) //uid:197
	fn setTransform(chainName: str,space: int32,transform: Vec<float32>,fractionMaxSpeed: float32,axisMask: int32) //uid:198
	fn setTransforms(names: any,spaces: any,transforms: any,fractionMaxSpeed: float32,axisMask: any) //uid:199
	fn changeTransform(chainName: str,space: int32,transform: Vec<float32>,fractionMaxSpeed: float32,axisMask: int32) //uid:200
	fn getTransform(name: str,space: int32,useSensorValues: bool) -> Vec<float32> //uid:201
	fn _getSensorTransformAtTime(sensorName: str,time: uint64) -> Vec<float32> //uid:202
	fn wbEnable(isEnabled: bool) //uid:203
	fn _enableAutoBalance(isEnabled: bool) -> bool //uid:204
	fn _changeSupportMode(isEnabled: bool,name: str) -> bool //uid:205
	fn wbFootState(stateName: str,supportLeg: str) //uid:206
	fn wbEnableBalanceConstraint(isEnable: bool,supportLeg: str) //uid:207
	fn wbGoToBalance(supportLeg: str,duration: float32) -> bool //uid:208
	fn wbGoToBalanceWithSpeed(supportLeg: str,fractionMaxSpeed: float32) -> bool //uid:209
	fn wbEnableEffectorControl(effectorName: str,isEnabled: bool) //uid:210
	fn wbSetEffectorControl(effectorName: str,targetCoordinate: any) //uid:211
	fn wbEnableEffectorOptimization(effectorName: str,isActive: bool) //uid:212
	fn _wbGetBalanceState() -> str //uid:213
	fn _wbIsActive() -> bool //uid:214
	fn _wbDefaultConfiguration() //uid:215
	fn _wbGetFootState(supportLeg: str) -> str //uid:216
	fn _wbSetJointWeighting(jointNames: str,weightings: float32) //uid:217
	fn _wbSetJointStiffness(jointName: str,stiffness: float32) //uid:218
	fn _wbSetArticularLimitPreview(jointName: str,preview: int32) //uid:219
	fn _wbEnableEffectorConstraint(effectorName: str,isActive: bool,axisMask: int32) //uid:220
	fn _wbGetEffectorConstraint(effectorName: str) -> any //uid:221
	fn _wbAxisMaskEffector(effectorName: str,isOptimized: bool,axisMask: int32) //uid:222
	fn _wbEnableJointOptimization(jointName: str,isActive: bool) //uid:223
	fn _wbGetEffectorOptimization(effectorName: str) -> any //uid:224
	fn _wbSetEffectorWeight(effectorName: str,weightingList: any) //uid:225
	fn _wbSetEffectorStiffness(effectorName: str,stiffnessList: any) //uid:226
	fn setCollisionProtectionEnabled(pChainName: str,pEnable: bool) -> bool //uid:227
	fn getCollisionProtectionEnabled(pChainName: str) -> bool //uid:228
	fn setExternalCollisionProtectionEnabled(pName: str,pEnable: bool) //uid:229
	fn _enablePhysicalInteractionForChain(pChain: str,pEnabled: bool) //uid:230
	fn getChainClosestObstaclePosition(pName: str,space: int32) -> Vec<float32> //uid:231
	fn getExternalCollisionProtectionEnabled(pName: str) -> bool //uid:232
	fn setOrthogonalSecurityDistance(securityDistance: float32) //uid:233
	fn getOrthogonalSecurityDistance() -> float32 //uid:234
	fn setTangentialSecurityDistance(securityDistance: float32) //uid:235
	fn getTangentialSecurityDistance() -> float32 //uid:236
	fn isCollision(pChainName: str) -> str //uid:237
	fn _getCollisionStateForObstacleSummary(pChainName: str) -> bool //uid:238
	fn _getCollisionNames() -> Vec<str> //uid:239
	fn _getCollisionShapes(pName: str) -> any //uid:240
	fn _setCollisionShapes(pNameList: Vec<str>,pPairList: Vec<str>,pBodyList: Vec<str>,pTypeList: Vec<str>,pShapeList: any,pPositionList: any) //uid:241
	fn _setCollisionShapes(pNameList: Vec<str>,pPairList: Vec<str>,pShapeList: any,pPositionList: any) //uid:242
	fn _getDetectedCollisions(pMinimumDistance: float32) -> any //uid:243
	fn _getDetectedCollisionsFull() -> any //uid:244
	fn _getDangerousRegion() -> any //uid:245
	fn setFallManagerEnabled(pEnable: bool) //uid:246
	fn getFallManagerEnabled() -> bool //uid:247
	fn setPushRecoveryEnabled(pEnable: bool) //uid:248
	fn _setPushRecoveryEnabled(pEnable: bool) //uid:249
	fn getPushRecoveryEnabled() -> bool //uid:250
	fn setSmartStiffnessEnabled(pEnable: bool) //uid:251
	fn getSmartStiffnessEnabled() -> bool //uid:252
	fn setDiagnosisEffectEnabled(pEnable: bool) //uid:253
	fn getDiagnosisEffectEnabled() -> bool //uid:254
	fn _setDiagnosisLogEnabled(P0: bool) //uid:255
	fn _isDiagnosisLogEnabled() -> bool //uid:256
	fn _startDiagnosis(P0: Vec<str>) //uid:257
	fn _stopDiagnosis() -> any //uid:258
	fn _passiveDiagnosisCallBack(P0: str, P1: any, P2: str) //uid:259
	fn _activeDiagnosisCallBack(P0: str, P1: any, P2: str) //uid:260
	fn getJointNames(name: str) -> Vec<str> //uid:261
	fn getBodyNames(name: str) -> Vec<str> //uid:262
	fn getSensorNames() -> Vec<str> //uid:263
	fn getLimits(name: str) -> any //uid:264
	fn _getFullLimits(name: str) -> any //uid:265
	fn getMotionCycleTime() -> int32 //uid:266
	fn _getMotionCycleNumber() -> int32 //uid:267
	fn getRobotConfig() -> any //uid:268
	fn getSummary() -> str //uid:269
	fn _getSummary() -> str //uid:270
	fn getMass(pName: str) -> float32 //uid:271
	fn getCOM(pName: str,pSpace: int32,pUseSensorValues: bool) -> Vec<float32> //uid:272
	fn getSupportPolygon(pSpace: int32,pUseSensorValues: bool) -> Vec<Vec<float32>> //uid:273
	fn _getSupportPolygonBipedDebug(pName: str) -> Vec<Vec<float32>> //uid:274
	fn _getTorque(names: any,useSensor: bool) -> Vec<float32> //uid:275
	fn _getInertia(pName: str) -> Vec<float32> //uid:276
	fn setMotionConfig(config: any) //uid:277
	fn _naoqiIsReadyCallback(P0: any) //uid:278
	fn _preferenceUpdatedCallback(P0: str, P1: any, P2: str) //uid:279
	fn _trackerLookAt(pNames: Vec<str>,pTargetPositions: Vec<float32>,pLimits: Vec<Limits>) //uid:280
	fn _lookAtWbPersistent(pTargetWy: float32,pTargetWz: float32) //uid:281
	fn _lookAtWb(pTargetWy: float32,pTargetWz: float32) //uid:282
	fn _trackerPointAt(pNames: Vec<str>,pTargetPositions: Vec<float32>) //uid:283
	fn _trackerWithSpeed(P0: Vec<str>, P1: Vec<float32>, P2: Vec<float32>, P3: bool, P4: bool) //uid:284
	fn _moveTracker(x: float32,y: float32,theta: float32,moveConfig: any) //uid:285
	fn _moveToTracker(x: float32,y: float32,theta: float32,moveConfig: any) -> bool //uid:286
	fn _stopMoveTracker() -> bool //uid:287
	fn _lookAt(pTargetPosition: Vec<float32>,pFrame: int32,pMaxSpeedFraction: float32) //uid:288
	fn _lookAt(pTargetPosition: Vec<float32>,pFrame: int32,pEffectorId: int32,pMaxSpeedFraction: float32) //uid:289
	fn _stopLookAt(pWithSpeed: bool) //uid:290
	fn _stopPointAt(pWithSpeed: bool) //uid:291
	fn setBreathEnabled(pChain: str,pIsEnabled: bool) //uid:292
	fn getBreathEnabled(pChain: str) -> bool //uid:293
	fn setBreathConfig(pConfig: any) //uid:294
	fn getBreathConfig() -> any //uid:295
	fn setIdlePostureEnabled(pChain: str,pIsEnabled: bool) //uid:296
	fn getIdlePostureEnabled(pChain: str) -> bool //uid:297
	fn _setIdleAnimation(AnimFile: obj) //uid:298
	fn _resetIdleDefaultAnimation() //uid:299
	fn _setIdlePosture(bodyAngles: Vec<float32>) //uid:300
	fn _resetIdleDefaultPosture() //uid:301
	fn getTaskList() -> any //uid:302
	fn areResourcesAvailable(resourceNames: Vec<str>) -> bool //uid:303
	fn killTask(motionTaskID: int32) -> bool //uid:304
	fn killTasksUsingResources(resourceNames: Vec<str>) //uid:305
	fn killWalk() //uid:306
	fn killMove() //uid:307
	fn killAll() //uid:308
	fn setEnableNotifications(enable: bool) //uid:309
	fn areNotificationsEnabled() -> bool //uid:310
	fn _getGroundCollision() -> any //uid:311
	fn _getGroundCollisionForForceContact() -> any //uid:312
	fn _getGroundCollisionForFallManager() -> any //uid:313
	fn _getGroundPlaneTf() -> Vec<float32> //uid:314
	fn _getNormalForceContact() -> Vec<float32> //uid:315
	fn _getRealTorsoInWorld() -> Vec<float32> //uid:316
	fn _getRobotGroundConvexHullDebug() -> any //uid:317
	fn _getRobotGroundConvexHull() -> any //uid:318
	fn _getJointIsMoving(useSensors: bool) -> Vec<int32> //uid:319
	fn _getChainIsMoving(useSensors: bool) -> Vec<int32> //uid:320
	fn _setAnimationModeEnabled(pEnable: bool) //uid:321
	fn _getMotionConfig(pName: str) -> str //uid:322
	fn _getSupportPolygonCenter() -> Vec<float32> //uid:323
	fn _getComWorld() -> Vec<float32> //uid:324
	fn _getWorldRotation() -> Vec<float32> //uid:325
	fn _fall(pFallAngle: float32) //uid:326
	fn _relaxMotorsWhenSitting() //uid:327
	fn _relax(chainName: any,delayInSeconds: float32) //uid:328
	fn _resetCartesianUnfeasible() //uid:329
	fn _setCartesianUnfeasible() //uid:330
	fn _getCartesianUnfeasible() -> int32 //uid:331
	fn _saveWholeBodyDump() //uid:332
	fn _resetNumJointCommandDiscontinuities() //uid:333
	fn _getNumJointCommandDiscontinuities() -> uint32 //uid:334
	fn _getMotionToDCM() -> MotionToDCM //uid:335
	fn _getBlindZones() -> any //uid:336
	fn _freeze(pChainName: str,pDuration: float32) //uid:337
	fn _dumpBlackBoxUntil(pPath: str,pTime: uint64) //uid:338
	fn _dumpBlackBox(pPath: str,pDeltaTime: uint64) //uid:339
	fn _robotFrame() -> obj //uid:340
	fn _robotAtBootFrame() -> obj //uid:341
	fn _mapFrame() -> obj //uid:342
	fn _publishFrame(P0: str, P1: Transform, P2: str, P3: uint64, P4: bool) //uid:343
	fn _makeFrame() -> obj //uid:344
	fn _makeFreeFrame() -> obj //uid:345
	fn _computeTransform(P0: str, P1: str) -> TransformTime //uid:346
	fn _computeTransformAtTime(P0: str, P1: str, P2: uint64) -> TransformTime //uid:347
	fn _gazeFrame() -> obj //uid:348
	fn _getTouchSensorFrame(name: str) -> obj //uid:349
	fn _getSensorFrame(name: str) -> obj //uid:350
	fn _animateLEDs(names: Vec<str>,times: Vec<Vec<float32>>,values: Vec<Vec<float32>>) //uid:351
	fn _getCurrent(name: str) -> float32 //uid:352
	fn _getSensorData() -> any //uid:353
	fn _getSensorData(P0: str) -> any //uid:354
	fn _getMapperNames() -> Vec<str> //uid:355
	fn _getMapPtr() -> unknown //uid:356
	fn _getPreviousMapPtr(P0: str) -> unknown //uid:357
	fn _getObstacleMap(P0: str) -> any //uid:358
	fn _getObstacleData() -> any //uid:359
	fn _clearObstacleMap() //uid:360
	fn _addSensor(sensor: str) -> bool //uid:361
	fn _removeSensor(sensor: str) -> bool //uid:362
	fn _get3DMap() -> str //uid:363
	fn _getSensorList() -> any //uid:364
	fn _getActiveSensorList() -> any //uid:365
	fn _getOccupancyGrid(client: str) -> any //uid:366
	fn _enableTouchType(P0: int32) //uid:367
	fn _disableTouchType(P0: int32) //uid:368
	fn _getEnabledTouchTypes() -> Vec<int32> //uid:369
	fn _onTouchChanged(P0: str, P1: any, P2: str) //uid:370
	fn _onPeopleDetected(P0: str, P1: any, P2: str) //uid:371
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALPanoramaCompass
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn setupPanorama() -> int32 //uid:114
	fn isDataAvailable() -> bool //uid:115
	fn getCurrentPosition() -> any //uid:116
	fn localizeNoHint() -> Vec<float32> //uid:117
	fn localize() -> Vec<float32> //uid:118
	fn localize(pMode: bool) -> Vec<float32> //uid:119
	fn localize(pMode: int32) -> Vec<float32> //uid:120
	fn localize(P0: int32, P1: bool) -> Vec<float32> //uid:121
	fn isInPanorama() -> int32 //uid:122
	fn isRelocalizationRequired() -> bool //uid:123
	fn loadPanorama(id: int32) -> int32 //uid:124
	fn getCurrentPanoramaDescriptor() -> any //uid:125
	fn getFrame(P0: int32, P1: str) -> any //uid:126
	fn isInPanorama(P0: int32) -> int32 //uid:127
	fn clearAllPanoramas() -> int32 //uid:128
	fn clearAllPanoramas(P0: bool) -> int32 //uid:129
	fn clearPanorama(pIdentity: int32) -> int32 //uid:130
	fn _launchLocalization() -> Vec<float32> //uid:131
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALBasicAwareness
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn _onPeopleDetected(name: str,populationUpdated: any,message: str) //uid:114
	fn _onMovementDetected(name: str,movementDetected: any,message: str) //uid:115
	fn _onNavigationMotionDetected(name: str,movementDetected: any,message: str) //uid:116
	fn _onCloseMovementDetected(name: str,closeMovementDetected: any,message: str) //uid:117
	fn _onSoundDetected(name: str,SoundLocated: any,message: str) //uid:118
	fn _onTouchDetected(name: str,touchDetected: any,message: str) //uid:119
	fn _onFastPersonTracking(name: str,tackerValue: any,message: str) //uid:120
	fn _onNoFastPersonFound(name: str,val: any,message: str) //uid:121
	fn _onHeadTracking(name: str,tackerValue: any,message: str) //uid:122
	fn _onHeadNotFound(name: str,val: any,message: str) //uid:123
	fn _onHeadReached(name: str,val: any,message: str) //uid:124
	fn _onHeadTrackingStopped(name: str,val: any,message: str) //uid:125
	fn setEnabled(enabled: bool) //uid:126
	fn isEnabled() -> bool //uid:127
	fn isRunning() -> bool //uid:128
	fn startAwareness() //uid:129
	fn stopAwareness() //uid:130
	fn isAwarenessRunning() -> bool //uid:131
	fn pauseAwareness() //uid:132
	fn resumeAwareness() //uid:133
	fn isAwarenessPaused() -> bool //uid:134
	fn setStimulusDetectionEnabled(stimulusName: str,isStimulusDetectionEnabled: bool) //uid:135
	fn isStimulusDetectionEnabled(stimulusName: str) -> bool //uid:136
	fn setParameter(paramName: str,newVal: any) //uid:137
	fn resetAllParameters() //uid:138
	fn getParameter(paramName: str) -> any //uid:139
	fn setEngagementMode(modeName: str) //uid:140
	fn getEngagementMode() -> str //uid:141
	fn _setCustomEngagementMode(checkStimWhenFocused: bool,stimuliWhenNotTracking: Vec<str>,stimuliWhenTracking: Vec<str>) //uid:142
	fn setTrackingMode(modeName: str) //uid:143
	fn getTrackingMode() -> str //uid:144
	fn engagePerson(engagePerson: int32) -> bool //uid:145
	fn _setContextualMoveType(contextualMove: str) //uid:146
	fn triggerStimulus(stimulusPosition: Vec<float32>) -> int32 //uid:147
	fn triggerStimulusFromFrame(stimulusFrame: obj) -> int32 //uid:148
	fn _pauseAwareness() //uid:149
	fn _resumeAwareness() //uid:150
	fn _isAwarenessPaused() -> bool //uid:151
	fn _useLedDebug(useLeds: bool) //uid:152
	fn _setLedGroup(ledGroupName: str) //uid:153
	fn _displayRobotViewDebug(useDisplay: bool) //uid:154
	fn _getParametersInfo() -> str //uid:155
	fn _setEnableStimuliFromBehind(enable: bool) //uid:156
	fn _getEnableStimuliFromBehind() -> bool //uid:157
	fn _setEnableCheckLowStimuli(enable: bool) //uid:158
	fn _getEnableCheckLowStimuli() -> bool //uid:159
	fn _getHomeReferencePosition() -> Vec<float32> //uid:160
	fn _onPreferenceUpdated(P0: str,P1: any,P2: str) //uid:161
	fn _onPreferenceSynchronized(P0: str,P1: any,P2: str) //uid:162
	sig traceObject(P0: EventTrace) //uid:86
	sig stimulusDetected(P0: str) //uid:163
	sig humanTracked(P0: int32) //uid:164
	sig humanLost(P0: bool) //uid:165
end
interface AutonomousAbilities
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn holdBasicAwareness(P0: obj) -> obj //uid:100
	fn holdBackgroundMovement(P0: obj) -> obj //uid:101
	fn holdAutonomousBlinking(P0: obj) -> obj //uid:102
	fn holdUnsupportedAbilities(P0: obj, P1: str) -> obj //uid:103
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALTracker
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn getTargetPosition(pFrame: int32) -> Vec<float32> //uid:114
	fn getRobotPosition() -> Vec<float32> //uid:115
	fn isActive() -> bool //uid:116
	fn isNewTargetDetected() -> bool //uid:117
	fn setRelativePosition(target: any) //uid:118
	fn getRelativePosition() -> any //uid:119
	fn setTargetCoordinates(pCoord: any) //uid:120
	fn getTargetCoordinates() -> any //uid:121
	fn setMode(pMode: str) //uid:122
	fn getMode() -> str //uid:123
	fn getAvailableModes() -> Vec<str> //uid:124
	fn toggleSearch(pSearch: bool) //uid:125
	fn setSearchFractionMaxSpeed(pFractionMaxSpeed: float32) //uid:126
	fn getSearchFractionMaxSpeed() -> float32 //uid:127
	fn isSearchEnabled() -> bool //uid:128
	fn stopTracker() //uid:129
	fn isTargetLost() -> bool //uid:130
	fn track(pTarget: str) //uid:131
	fn trackEvent(pEventName: str) //uid:132
	fn registerTarget(pTarget: str,pParams: any) //uid:133
	fn setExtractorPeriod(pTarget: str,pPeriod: int32) //uid:134
	fn getExtractorPeriod(pTarget: str) -> int32 //uid:135
	fn unregisterTarget(pTarget: str) //uid:136
	fn unregisterTargets(pTarget: Vec<str>) //uid:137
	fn unregisterAllTargets() //uid:138
	fn getActiveTarget() -> str //uid:139
	fn getSupportedTargets() -> Vec<str> //uid:140
	fn getRegisteredTargets() -> Vec<str> //uid:141
	fn lookAt(pPosition: Vec<float32>,pFrame: int32,pFractionMaxSpeed: float32,pUseWholeBody: bool) //uid:142
	fn pointAt(pEffector: str,pPosition: Vec<float32>,pFrame: int32,pFractionMaxSpeed: float32) //uid:143
	fn getMoveConfig() -> any //uid:144
	fn setMoveConfig(config: any) //uid:145
	fn getTimeOut() -> int32 //uid:146
	fn setTimeOut(pTimeMs: int32) //uid:147
	fn getMaximumDistanceDetection() -> float32 //uid:148
	fn setMaximumDistanceDetection(pMaxDistance: float32) //uid:149
	fn getEffector() -> str //uid:150
	fn setEffector(pEffector: str) //uid:151
	fn initialize() //uid:152
	fn setMaximumVelocity(pVelocity: float32) //uid:153
	fn getMaximumVelocity() -> float32 //uid:154
	fn setMaximumAcceleration(pAcceleration: float32) //uid:155
	fn getMaximumAcceleration() -> float32 //uid:156
	fn lookAt(pPosition: Vec<float32>,pFractionMaxSpeed: float32,pUseWholeBody: bool) //uid:157
	fn pointAt(pEffector: str,pPosition: Vec<float32>,pFractionMaxSpeed: float32) //uid:158
	fn getTargetPosition() -> Vec<float32> //uid:159
	fn getTargetNames() -> Vec<str> //uid:160
	fn getManagedTargets() -> Vec<str> //uid:161
	fn addTarget(pTarget: str,pParams: any) //uid:162
	fn removeTarget(pTarget: str) //uid:163
	fn removeTargets(pTarget: Vec<str>) //uid:164
	fn removeAllTargets() //uid:165
	fn addEffector(pEffector: str) //uid:166
	fn removeEffector(pEffector: str) //uid:167
	fn _pause() //uid:168
	fn _restart() //uid:169
	fn _setTrackerConfig(config: any) //uid:170
	fn _getTrackerConfig() -> Map<str,float32> //uid:171
	fn _getTrackerConfigStr() -> str //uid:172
	fn _lostEvent() //uid:173
	fn _detectedEvent(P0: str, P1: any) //uid:174
	fn _lookAtWithMove(pPosition: Vec<float32>,pFractionMaxSpeed: float32,pUseWholeBody: bool,pUseMove: bool) //uid:175
	fn _lookAtWithEffector(pPosition: Vec<float32>,pFrame: int32,pEffectorId: int32,pFractionMaxSpeed: float32,pUseWholeBody: bool) //uid:176
	fn _stopLookAt() //uid:177
	fn _stopPointAt() //uid:178
	fn _searcherSetUseWholeBodyLookAt(P0: bool) //uid:179
	fn _setMoveEvent(P0: str) //uid:180
	fn _setMoveHysteresis(P0: Vec<float32>) //uid:181
	fn _getMoveHysteresis() -> Vec<float32> //uid:182
	sig traceObject(P0: EventTrace) //uid:86
end
interface _ALUserSessionCompat
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn onCreatedUsers(P0: Vec<int32>) //uid:100
	fn onDeletedUsers(P0: Vec<int32>) //uid:101
	fn onOpenSessions(P0: Vec<int32>) //uid:102
	fn onCloseSessions(P0: Vec<int32>) //uid:103
	fn onFocusedUser(P0: int32) //uid:104
	fn onNoOpenSession(P0: bool) //uid:105
	sig traceObject(P0: EventTrace) //uid:86
end
interface _ALFindPersonHead
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn startSearching() //uid:114
	fn startSearching(position: Vec<float32>) //uid:115
	fn stopSearching() //uid:116
	fn isSearching() -> bool //uid:117
	fn setTrackingDistance(distance: float32) //uid:118
	fn getTrackingDistance() -> float32 //uid:119
	fn setTrackingPosition(x: float32,y: float32,z: float32) //uid:120
	fn getTrackingPosition() -> any //uid:121
	fn _setDetectionMode(mode: str) //uid:122
	fn _getDetectionMode() -> str //uid:123
	fn getDefaultPeriod() -> int32 //uid:124
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALTextToSpeech
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn say(stringToSay: str) //uid:114
	fn say(stringToSay: str,language: str) //uid:115
	fn _sayWithLocale(stringToSay: str,locale: Locale,id: str) //uid:116
	fn sayToFile(pStringToSay: str,pFileName: str) //uid:117
	fn stopAll() //uid:118
	fn setLanguage(pLanguage: str) //uid:119
	fn getLanguage() -> str //uid:120
	fn getAvailableLanguages() -> Vec<str> //uid:121
	fn getSupportedLanguages() -> Vec<str> //uid:122
	fn resetSpeed() //uid:123
	fn setParameter(pEffectName: str,pEffectValue: float32) //uid:124
	fn getParameter(pParameterName: str) -> float32 //uid:125
	fn setVoice(pVoiceID: str) //uid:126
	fn getVoice() -> str //uid:127
	fn getAvailableVoices() -> Vec<str> //uid:128
	fn setVolume(volume: float32) //uid:129
	fn getVolume() -> float32 //uid:130
	fn locale() -> str //uid:131
	fn loadVoicePreference(pPreferenceName: str) //uid:132
	fn _setDefaultLanguage(Language: str) //uid:133
	fn setLanguageDefaultVoice(Language: str,Voice: str) //uid:134
	fn _setDefaultVoice() //uid:135
	fn _naoStoreApplicationInstalled(P0: str, P1: any, P2: str) //uid:136
	fn _naoStoreApplicationUninstalled(P0: str, P1: any, P2: str) //uid:137
	fn _pause() //uid:138
	fn _resume() //uid:139
	fn _enableFilter(enable: bool) //uid:140
	fn _loadEffect(effectPath: str) //uid:141
	fn _applyEffect(effectName: str,enable: bool) //uid:142
	fn _diagnosis() //uid:143
	fn _showVoiceSettings() //uid:144
	fn showDictionary() //uid:145
	fn reset() //uid:146
	fn _unloadDictionary() //uid:147
	fn deleteFromDictionary(P0: str, P1: str) -> bool //uid:148
	fn deleteFromDictionary(word: str) -> bool //uid:149
	fn addToDictionary(type_0: str,word: str,priority: str,phonetic: str,accent: str) -> bool //uid:150
	fn addToDictionary(text: str,toReplace: str) -> bool //uid:151
	fn _loadDictionary() //uid:152
	sig traceObject(P0: EventTrace) //uid:86
	sig synchroTTS(P0: uint64) //uid:153
	sig languageTTS(P0: str) //uid:154
	sig _started(P0: str) //uid:155
end
interface ALCloseObjectDetection
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn subscribe(name: str,period: int32,precision: float32) //uid:114
	fn subscribe(name: str) //uid:115
	fn unsubscribe(name: str) //uid:116
	fn updatePeriod(name: str,period: int32) //uid:117
	fn updatePrecision(name: str,precision: float32) //uid:118
	fn getCurrentPeriod() -> int32 //uid:119
	fn getCurrentPrecision() -> float32 //uid:120
	fn getMyPeriod(name: str) -> int32 //uid:121
	fn getMyPrecision(name: str) -> float32 //uid:122
	fn getSubscribersInfo() -> any //uid:123
	fn getOutputNames() -> Vec<str> //uid:124
	fn getEventList() -> Vec<str> //uid:125
	fn getMemoryKeyList() -> Vec<str> //uid:126
	fn isPaused() -> bool //uid:127
	fn pause(status: bool) //uid:128
	fn isProcessing() -> bool //uid:129
	sig traceObject(P0: EventTrace) //uid:86
end
interface _ConditionChecker_maxwell_75728_0
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn onEvent(key: str,value: any,message: str) //uid:114
	fn onPreferenceUpdated(P0: str,P1: any,P2: str) //uid:115
	fn onPreferenceSynchronized(P0: str,P1: any,P2: str) //uid:116
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALUserInfo
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn get(P0: str) -> any //uid:100
	fn get(P0: int32, P1: str) -> any //uid:101
	fn get(P0: str, P1: str) -> any //uid:102
	fn get(P0: str, P1: int32, P2: str) -> any //uid:103
	fn _set(P0: str, P1: any) -> bool //uid:104
	fn _set(P0: int32, P1: str, P2: any) -> bool //uid:105
	fn set(P0: str, P1: str, P2: any) -> bool //uid:106
	fn set(P0: str, P1: int32, P2: str, P3: any) -> bool //uid:107
	fn has(P0: str) -> bool //uid:108
	fn has(P0: int32, P1: str) -> bool //uid:109
	fn has(P0: str, P1: str) -> bool //uid:110
	fn has(P0: str, P1: int32, P2: str) -> bool //uid:111
	fn _remove(P0: str) -> bool //uid:112
	fn _remove(P0: int32, P1: str) -> bool //uid:113
	fn remove(P0: str, P1: str) -> bool //uid:114
	fn remove(P0: str, P1: int32, P2: str) -> bool //uid:115
	fn removeUser(P0: str) -> bool //uid:116
	fn removeUser(P0: str, P1: int32) -> bool //uid:117
	fn _removeUser() -> bool //uid:118
	fn _removeUser(P0: int32) -> bool //uid:119
	fn getType(P0: str, P1: str) -> str //uid:120
	sig traceObject(P0: EventTrace) //uid:86
	sig userInfoEdited(P0: int32, P1: str, P2: any) //uid:121
	sig userInfoRemoved(P0: int32, P1: str) //uid:122
end
interface ALFileManager
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn setUserSharedFolderPath(fileName: str) //uid:114
	fn getUserSharedFolderPath() -> str //uid:115
	fn getSystemSharedFolderPath() -> str //uid:116
	fn fileExists(fileName: str) -> bool //uid:117
	fn dataFileExists(fileName: str) -> bool //uid:118
	fn getFileCompletePath(prefs: str) -> str //uid:119
	fn getFileContents(prefs: str) -> any //uid:120
	fn _getBehaviorsPath() -> str //uid:121
	fn _getBoxLibrariesPath() -> str //uid:122
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALLauncher
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn launchLocal(moduleName: str) -> Vec<str> //uid:114
	fn launchExecutable(moduleName: str) -> bool //uid:115
	fn _launch(executablePath: str,arguments: Vec<str>) -> int32 //uid:116
	fn _launchWait(executablePath: str,arguments: Vec<str>) -> int32 //uid:117
	fn launchScript(moduleName: str) -> bool //uid:118
	fn launchPythonModule(moduleName: str) -> bool //uid:119
	fn isModulePresent(strPartOfModuleName: str) -> bool //uid:120
	fn getGlobalModuleList() -> Vec<str> //uid:121
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALAnimationPlayer
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn addTagForAnimations(P0: Map<str,Vec<str>>) //uid:100
	fn declarePathForTags(P0: str) //uid:101
	fn _declarePathForTagsPermanently(P0: str) //uid:102
	fn reset() //uid:103
	fn _getPathsForTags() -> Vec<str> //uid:104
	fn _getTags() -> Vec<str> //uid:105
	fn _getTags(P0: str) -> Vec<str> //uid:106
	fn _getAnimations() -> Vec<str> //uid:107
	fn _getAnimations(P0: str) -> Vec<str> //uid:108
	fn _getAnimationsForTag(P0: str) -> Vec<str> //uid:109
	fn _getAnimationsForTag(P0: str, P1: str) -> Vec<str> //uid:110
	fn run(P0: str) //uid:111
	fn runTag(P0: str) //uid:112
	fn runTag(P0: str, P1: str) //uid:113
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALBackgroundMovement
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn setEnabled(P0: bool) //uid:100
	fn isEnabled() -> bool //uid:101
	fn isRunning() -> bool //uid:102
	fn _setMode(P0: str) //uid:103
	fn _getMode() -> str //uid:104
	fn _setAwakeMode(P0: int32) //uid:105
	fn _getAwakeMode() -> int32 //uid:106
	fn _setDefaultIdle(P0: Vec<str>, P1: Vec<str>) //uid:107
	fn _resetDefaultIdle() //uid:108
	fn _getDefaultIdle() -> IdleDefinition //uid:109
	fn _setExpressiveIdle(P0: str, P1: Vec<str>, P2: Vec<str>) //uid:110
	fn _getExpressiveIdle(P0: str) -> IdleDefinition //uid:111
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALSittingPeopleDetection
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn subscribe(name: str,period: int32,precision: float32) //uid:114
	fn subscribe(name: str) //uid:115
	fn unsubscribe(name: str) //uid:116
	fn updatePeriod(name: str,period: int32) //uid:117
	fn updatePrecision(name: str,precision: float32) //uid:118
	fn getCurrentPeriod() -> int32 //uid:119
	fn getCurrentPrecision() -> float32 //uid:120
	fn getMyPeriod(name: str) -> int32 //uid:121
	fn getMyPrecision(name: str) -> float32 //uid:122
	fn getSubscribersInfo() -> any //uid:123
	fn getOutputNames() -> Vec<str> //uid:124
	fn getEventList() -> Vec<str> //uid:125
	fn getMemoryKeyList() -> Vec<str> //uid:126
	fn isPaused() -> bool //uid:127
	fn pause(status: bool) //uid:128
	fn isProcessing() -> bool //uid:129
	fn setSittingThreshold(threshold: float32) //uid:130
	fn getSittingThreshold() -> float32 //uid:131
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALGazeAnalysis
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn subscribe(name: str,period: int32,precision: float32) //uid:114
	fn subscribe(name: str) //uid:115
	fn unsubscribe(name: str) //uid:116
	fn updatePeriod(name: str,period: int32) //uid:117
	fn updatePrecision(name: str,precision: float32) //uid:118
	fn getCurrentPeriod() -> int32 //uid:119
	fn getCurrentPrecision() -> float32 //uid:120
	fn getMyPeriod(name: str) -> int32 //uid:121
	fn getMyPrecision(name: str) -> float32 //uid:122
	fn getSubscribersInfo() -> any //uid:123
	fn getOutputNames() -> Vec<str> //uid:124
	fn getEventList() -> Vec<str> //uid:125
	fn getMemoryKeyList() -> Vec<str> //uid:126
	fn isPaused() -> bool //uid:127
	fn pause(status: bool) //uid:128
	fn isProcessing() -> bool //uid:129
	fn setFaceAnalysisEnabled(status: bool) //uid:130
	fn isFaceAnalysisEnabled() -> bool //uid:131
	fn setTolerance(tolerance: float32) //uid:132
	fn getTolerance() -> float32 //uid:133
	sig traceObject(P0: EventTrace) //uid:86
end
interface _ALFastPersonTracking
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn startTracking() //uid:114
	fn startTracking(position: Vec<float32>) //uid:115
	fn stopTracking() //uid:116
	fn isTracking() -> bool //uid:117
	fn setTrackingDistance(distance: float32) //uid:118
	fn getTrackingDistance() -> float32 //uid:119
	fn setTrackingPosition(x: float32,y: float32,z: float32) //uid:120
	fn getTrackingPosition() -> any //uid:121
	fn _setDetectionMode(mode: str) //uid:122
	fn _getDetectionMode() -> str //uid:123
	fn getDefaultPeriod() -> int32 //uid:124
	sig traceObject(P0: EventTrace) //uid:86
end
interface ServiceDirectory
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn service(P0: str) -> ServiceInfo //uid:100
	fn services() -> Vec<ServiceInfo> //uid:101
	fn registerService(P0: ServiceInfo) -> uint32 //uid:102
	fn unregisterService(P0: uint32) //uid:103
	fn serviceReady(P0: uint32) //uid:104
	fn updateServiceInfo(P0: ServiceInfo) //uid:105
	fn machineId() -> str //uid:108
	fn _socketOfService(P0: uint32) -> obj //uid:109
	sig traceObject(P0: EventTrace) //uid:86
	sig serviceAdded(P0: uint32, P1: str) //uid:106
	sig serviceRemoved(P0: uint32, P1: str) //uid:107
end
interface _SemanticEngine
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn makeKnowledge(P0: str, P1: TextProcessingContext) -> Knowledge //uid:100
	fn makeKnowledge(P0: str, P1: TextProcessingContext, P2: obj) -> Knowledge //uid:101
	fn makeText(P0: Knowledge, P1: TextProcessingContext) -> str //uid:102
	fn makeAction(P0: Knowledge, P1: TextProcessingContext, P2: any) -> obj //uid:103
	fn makeEditableLinguisticDatabase() -> obj //uid:104
	fn makeEditableMemory() -> obj //uid:105
	fn makeTextProcessingContextFromRobot(P0: int32) -> TextProcessingContext //uid:106
	fn makeTextProcessingContextToRobot(P0: int32) -> TextProcessingContext //uid:107
	fn defaultMemory() -> obj //uid:108
	fn defaultEditableMemory() -> obj //uid:109
	fn defaultLinguisticDatabase() -> obj //uid:110
	fn getLanguage(P0: str) -> int32 //uid:111
	fn getSentiments(P0: Knowledge, P1: obj) -> Vec<SentimentContext> //uid:112
	fn getRdfTriples(P0: Knowledge, P1: obj) -> Vec<Rdf> //uid:113
	fn modifyTense(P0: Knowledge, P1: int32) -> Knowledge //uid:114
	fn simplify(P0: Knowledge) -> Knowledge //uid:115
	fn extractAnyOf(P0: Knowledge, P1: Vec<str>, P2: int32, P3: obj) -> KnowledgeExtractionResult //uid:116
	sig traceObject(P0: EventTrace) //uid:86
end
interface _ALMovementScheduler
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn printTasks() -> str //uid:100
	fn getTasks() -> Vec<TaskInfo> //uid:101
	fn reset() //uid:102
	fn _inhibitAutonomousTasks(P0: bool) //uid:103
	fn _subscribeToAutonomousTasksInhibitor() -> int32 //uid:104
	fn _unsubscribeToAutonomousTasksInhibitor(P0: int32) //uid:105
	sig traceObject(P0: EventTrace) //uid:86
end
interface Focus
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn take() -> obj //uid:100
	fn take(P0: str) -> obj //uid:101
	fn check(P0: obj) -> bool //uid:102
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALAudioPlayer
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn playFile(fileName: str) //uid:114
	fn playFile(fileName: str,volume: float32,pan: float32) //uid:115
	fn playFileInLoop(fileName: str) //uid:116
	fn playFileInLoop(fileName: str,volume: float32,pan: float32) //uid:117
	fn playFileFromPosition(fileName: str,position: float32) //uid:118
	fn playFileFromPosition(fileName: str,position: float32,volume: float32,pan: float32) //uid:119
	fn pause(id: int32) //uid:120
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALVisionRecognition
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn subscribe(name: str,period: int32,precision: float32) //uid:114
	fn subscribe(name: str) //uid:115
	fn unsubscribe(name: str) //uid:116
	fn updatePeriod(name: str,period: int32) //uid:117
	fn updatePrecision(name: str,precision: float32) //uid:118
	fn getCurrentPeriod() -> int32 //uid:119
	fn getCurrentPrecision() -> float32 //uid:120
	fn getMyPeriod(name: str) -> int32 //uid:121
	fn getMyPrecision(name: str) -> float32 //uid:122
	fn getSubscribersInfo() -> any //uid:123
	fn getOutputNames() -> Vec<str> //uid:124
	fn getEventList() -> Vec<str> //uid:125
	fn getMemoryKeyList() -> Vec<str> //uid:126
	fn setFrameRate(subscriberName: str,framerate: int32) -> bool //uid:127
	fn setFrameRate(framerate: int32) -> bool //uid:128
	fn setResolution(resolution: int32) -> bool //uid:129
	fn setActiveCamera(cameraId: int32) -> bool //uid:130
	fn setParameter(paramName: str,value: any) //uid:131
	fn getFrameRate() -> int32 //uid:132
	fn getResolution() -> int32 //uid:133
	fn getActiveCamera() -> int32 //uid:134
	fn isPaused() -> bool //uid:135
	fn isProcessing() -> bool //uid:136
	fn pause(paused: bool) //uid:137
	fn _run() //uid:138
	fn changeDatabase(databasePath: str,databaseName: str) -> bool //uid:139
	fn clearCurrentDatabase() //uid:140
	fn setParam(paramName: str,paramValue: any) //uid:141
	fn getParam(paramName: str) -> any //uid:142
	fn learnFromFile(filename: str,name: str,tags: Vec<str>,isWholeImage: bool,forced: bool) -> bool //uid:143
	fn setMaxOutObjs(iMaxOutObjs: int32) //uid:144
	fn getMaxOutObjs() -> int32 //uid:145
	fn getSize() -> int32 //uid:146
	fn _removeObject(hash: str) //uid:147
	fn detectFromFile(image: str) //uid:148
	fn getDefaultDatabaseDirectory() -> str //uid:149
	fn getDefaultDatabaseName() -> str //uid:150
	fn sendDatabase(name: str,file: obj) //uid:151
	sig traceObject(P0: EventTrace) //uid:86
end
interface AccessControl
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn generateToken(P0: str) -> str //uid:100
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALVisualSpaceHistory
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn subscribe(name: str,period: int32,precision: float32) //uid:114
	fn subscribe(name: str) //uid:115
	fn unsubscribe(name: str) //uid:116
	fn updatePeriod(name: str,period: int32) //uid:117
	fn updatePrecision(name: str,precision: float32) //uid:118
	fn getCurrentPeriod() -> int32 //uid:119
	fn getCurrentPrecision() -> float32 //uid:120
	fn getMyPeriod(name: str) -> int32 //uid:121
	fn getMyPrecision(name: str) -> float32 //uid:122
	fn getSubscribersInfo() -> any //uid:123
	fn getOutputNames() -> Vec<str> //uid:124
	fn getEventList() -> Vec<str> //uid:125
	fn getMemoryKeyList() -> Vec<str> //uid:126
	fn setGridPrecision(precision: float32) //uid:127
	fn getGridPrecision() -> float32 //uid:128
	fn resetGrid() //uid:129
	fn _run() //uid:130
	sig traceObject(P0: EventTrace) //uid:86
end
interface _FaceConverter
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn setImplParam(P0: any) //uid:114
	fn start(P0: int32) //uid:115
	fn stopConverter() //uid:116
	fn convert(P0: any) -> any //uid:117
	fn convertEvent(P0: str, P1: any) //uid:118
	fn updateDetectorPeriod(P0: int32) //uid:119
	fn getDetectorPeriod() -> int32 //uid:120
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALAutonomousLife
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn _onPreferenceChanged(P0: str,P1: any,P2: str) //uid:114
	fn _onRobotHealthChanged(P0: str,P1: any,P2: str) //uid:115
	fn _onPushRecovery(P0: str,P1: any,P2: str) //uid:116
	fn _onFallRecovery(P0: str,P1: any,P2: str) //uid:117
	fn _onRobotMoved(P0: str,P1: any,P2: str) //uid:118
	fn _loadConfigFile(P0: str) //uid:119
	fn setState(state: str) //uid:120
	fn getState() -> str //uid:121
	fn focusedActivity() -> str //uid:122
	fn switchFocus(activity_name: str) //uid:123
	fn switchFocus(activity_name: str,flags: int32) //uid:124
	fn switchFocus(activity_name: str,flags: int32,parameters: any) //uid:125
	fn _switchFocus(P0: str, P1: str) //uid:126
	fn _switchFocus(P0: str, P1: int32, P2: str) //uid:127
	fn _switchFocus(P0: str, P1: int32, P2: any, P3: str) //uid:128
	fn _switchFocusFromTablet(P0: str) //uid:129
	fn _preemptFocusForNonRobot() -> obj //uid:130
	fn _preemptFocusForNonRobot(P0: Map<str,any>) -> obj //uid:131
	fn _preemptFocusForRemote() -> obj //uid:132
	fn _preemptFocusForRemote(P0: Map<str,any>) -> obj //uid:133
	fn _preemptFocusAsMainInteractive() -> obj //uid:134
	fn _preemptFocusAsMainInteractive(P0: Map<str,any>) -> obj //uid:135
	fn stopFocus() //uid:136
	fn _stopFocus(P0: str) //uid:137
	fn _stopFocus(P0: str, P1: str) //uid:138
	fn stopAll() //uid:139
	fn _stopAll(P0: str) //uid:140
	fn getFocusContext(name: str) -> any //uid:141
	fn getActivityContextPermissionViolations(name: str) -> Vec<str> //uid:142
	fn getActivityNature(activity_name: str) -> str //uid:143
	fn getActivityStatistics() -> Map<str,Map<str,int32>> //uid:144
	fn getAutonomousActivityStatistics() -> Map<str,Map<str,int32>> //uid:145
	fn getFocusHistory() -> Vec<Tuple<str,int32>> //uid:146
	fn getFocusHistory(P0: int32) -> Vec<Tuple<str,int32>> //uid:147
	fn getStateHistory() -> Vec<Tuple<str,int32>> //uid:148
	fn getStateHistory(P0: int32) -> Vec<Tuple<str,int32>> //uid:149
	fn getLifeTime() -> int32 //uid:150
	fn setAutonomousAbilityEnabled(P0: str, P1: bool) //uid:151
	fn getAutonomousAbilityEnabled(autonomousAbility: str) -> bool //uid:152
	fn getAutonomousAbilitiesStatus() -> Vec<AutonomousAbilityStatus> //uid:153
	fn startMonitoringLaunchpadConditions() //uid:154
	fn stopMonitoringLaunchpadConditions() //uid:155
	fn isMonitoringLaunchpadConditions() -> bool //uid:156
	fn setLaunchpadPluginEnabled(plugin_name: str,enabled: bool) //uid:157
	fn getEnabledLaunchpadPlugins() -> Vec<str> //uid:158
	fn getLaunchpadPluginsForGroup(group: str) -> Vec<str> //uid:159
	fn setRobotOffsetFromFloor(offset: float32) //uid:160
	fn getRobotOffsetFromFloor() -> float32 //uid:161
	fn _forbidAutonomousInteractiveStateChange(is_forbidden: bool) //uid:162
	fn _forbidAutonomousActivityFocusSwitch(is_forbidden: bool) //uid:163
	fn setSafeguardEnabled(name: str,enabled: bool) //uid:164
	fn isSafeguardEnabled(name: str) -> bool //uid:165
	fn _isMovedSafeguardInstantaneous() -> bool //uid:166
	fn _setPushRecoverySafeguardDuration(duration_ms: int32) //uid:167
	fn _getPushRecoverySafeguardDuration() -> int32 //uid:168
	fn _sleep() //uid:169
	fn _wakeUp() //uid:170
	fn _forbidStopCommands(is_forbidden: bool) //uid:171
	fn _loadModule(modulename: str) //uid:172
	fn _setTimeSwitchFocusReporterEnabled(P0: bool) //uid:173
	fn _reportToFileTimeOfSwitchFocus(P0: str) //uid:174
	sig traceObject(P0: EventTrace) //uid:86
	sig userRequestableActivitiesViolations(P0: Map<str,Vec<str>>) //uid:175
	sig activityTransition(P0: ActivityTransitionInfo) //uid:176
	sig _actionTransition(P0: str, P1: str, P2: uint64) //uid:177
	prop userRequestableActivitiesViolations(param: Map<str,Vec<str>>) //uid:175
end
interface ContextFactory
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn makeContext() -> obj //uid:100
	sig traceObject(P0: EventTrace) //uid:86
end
interface Conversation
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn makeSay(P0: obj, P1: Phrase) -> obj //uid:100
	fn makeSay(P0: obj, P1: Phrase, P2: int32) -> obj //uid:101
	fn makeSay(P0: obj, P1: Phrase, P2: int32, P3: Locale) -> obj //uid:102
	fn makeListen(P0: obj, P1: Vec<obj>) -> obj //uid:103
	fn makeListen(P0: obj, P1: Vec<obj>, P2: int32) -> obj //uid:104
	fn makeListen(P0: obj, P1: Vec<obj>, P2: int32, P3: Locale) -> obj //uid:105
	fn makePhraseSet(P0: Vec<Phrase>) -> obj //uid:106
	fn makeDiscuss(P0: obj, P1: Vec<obj>) -> obj //uid:107
	fn makeDiscuss(P0: obj, P1: Vec<obj>, P2: Locale) -> obj //uid:108
	fn makeTopic(P0: str) -> obj //uid:109
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALEngagementZones
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn subscribe(name: str,period: int32,precision: float32) //uid:114
	fn subscribe(name: str) //uid:115
	fn unsubscribe(name: str) //uid:116
	fn updatePeriod(name: str,period: int32) //uid:117
	fn updatePrecision(name: str,precision: float32) //uid:118
	fn getCurrentPeriod() -> int32 //uid:119
	fn getCurrentPrecision() -> float32 //uid:120
	fn getMyPeriod(name: str) -> int32 //uid:121
	fn getMyPrecision(name: str) -> float32 //uid:122
	fn getSubscribersInfo() -> any //uid:123
	fn getOutputNames() -> Vec<str> //uid:124
	fn getEventList() -> Vec<str> //uid:125
	fn getMemoryKeyList() -> Vec<str> //uid:126
	fn isPaused() -> bool //uid:127
	fn pause(status: bool) //uid:128
	fn isProcessing() -> bool //uid:129
	fn setLimitAngle(angle: float32) //uid:130
	fn getLimitAngle() -> float32 //uid:131
	fn setFirstLimitDistance(distance: float32) //uid:132
	fn getFirstLimitDistance() -> float32 //uid:133
	fn setSecondLimitDistance(distance: float32) //uid:134
	fn getSecondLimitDistance() -> float32 //uid:135
	fn computeEngagementZone(x: float32,y: float32,z: float32) -> int32 //uid:136
	fn computeEngagementZone(xAngle: float32,yAngle: float32,distance: float32,cameraPositionRobot: any) -> int32 //uid:137
	sig traceObject(P0: EventTrace) //uid:86
	sig limitAngleChanged(P0: float32) //uid:138
	sig firstLimitChanged(P0: float32) //uid:139
	sig secondLimitChanged(P0: float32) //uid:140
end
interface ALMood
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn subscribe(P0: str, P1: str) -> bool //uid:100
	fn unsubscribe(P0: str) -> bool //uid:101
	fn getSubscribersInfo() -> Map<str,str> //uid:102
	fn currentPersonState() -> PersonState //uid:103
	fn personStateFromPeoplePerception(P0: int32) -> PersonState //uid:104
	fn personStateFromUserSession(P0: int32) -> PersonState //uid:105
	fn personDescriptorFromPeoplePerception(P0: int32) -> PersonDescriptor //uid:106
	fn persons() -> Vec<Person> //uid:107
	fn _pushValence(P0: str, P1: float32) -> bool //uid:108
	fn ambianceState() -> AmbianceState //uid:109
	fn ambianceDescriptor() -> AmbianceDescriptor //uid:110
	fn getEmotionalReaction() -> str //uid:111
	sig traceObject(P0: EventTrace) //uid:86
	sig currentFocusedUserMood(P0: str) //uid:112
	sig valence(P0: str) //uid:113
	sig valenceLevel(P0: ValueConfidence<float>) //uid:114
	sig attention(P0: str) //uid:115
	sig attentionLevel(P0: ValueConfidence<float>) //uid:116
	sig attentionZone(P0: str) //uid:117
	sig ambiance(P0: str) //uid:118
	sig ambianceLevel(P0: float32) //uid:119
	sig valenceChanged(P0: str) //uid:120
	sig attentionChanged(P0: str) //uid:121
	sig ambianceChanged(P0: str) //uid:122
	prop valence(param: str) //uid:113
	prop valenceLevel(param: ValueConfidence<float>) //uid:114
	prop attention(param: str) //uid:115
	prop attentionLevel(param: ValueConfidence<float>) //uid:116
	prop attentionZone(param: str) //uid:117
	prop ambiance(param: str) //uid:118
	prop ambianceLevel(param: float32) //uid:119
end
interface ALSonar
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn subscribe(name: str,period: int32,precision: float32) //uid:114
	fn subscribe(name: str) //uid:115
	fn unsubscribe(name: str) //uid:116
	fn updatePeriod(name: str,period: int32) //uid:117
	fn updatePrecision(name: str,precision: float32) //uid:118
	fn getCurrentPeriod() -> int32 //uid:119
	fn getCurrentPrecision() -> float32 //uid:120
	fn getMyPeriod(name: str) -> int32 //uid:121
	fn getMyPrecision(name: str) -> float32 //uid:122
	fn getSubscribersInfo() -> any //uid:123
	fn getOutputNames() -> Vec<str> //uid:124
	fn getEventList() -> Vec<str> //uid:125
	fn getMemoryKeyList() -> Vec<str> //uid:126
	fn getFilteredValues() -> Vec<float32> //uid:127
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALColorBlobDetection
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn subscribe(name: str,period: int32,precision: float32) //uid:114
	fn subscribe(name: str) //uid:115
	fn unsubscribe(name: str) //uid:116
	fn updatePeriod(name: str,period: int32) //uid:117
	fn updatePrecision(name: str,precision: float32) //uid:118
	fn getCurrentPeriod() -> int32 //uid:119
	fn getCurrentPrecision() -> float32 //uid:120
	fn getMyPeriod(name: str) -> int32 //uid:121
	fn getMyPrecision(name: str) -> float32 //uid:122
	fn getSubscribersInfo() -> any //uid:123
	fn getOutputNames() -> Vec<str> //uid:124
	fn getEventList() -> Vec<str> //uid:125
	fn getMemoryKeyList() -> Vec<str> //uid:126
	fn setFrameRate(subscriberName: str,framerate: int32) -> bool //uid:127
	fn setFrameRate(framerate: int32) -> bool //uid:128
	fn setResolution(resolution: int32) -> bool //uid:129
	fn setActiveCamera(cameraId: int32) -> bool //uid:130
	fn setParameter(paramName: str,value: any) //uid:131
	fn getFrameRate() -> int32 //uid:132
	fn getResolution() -> int32 //uid:133
	fn getActiveCamera() -> int32 //uid:134
	fn isPaused() -> bool //uid:135
	fn isProcessing() -> bool //uid:136
	fn pause(paused: bool) //uid:137
	fn _run() //uid:138
	fn setColor(r: int32,g: int32,b: int32,colorThres: int32) //uid:139
	fn setObjectProperties(minSize: int32,span: float32) //uid:140
	fn setObjectProperties(minSize: int32,span: float32,shape: str) //uid:141
	fn getCircle() -> any //uid:142
	fn getAutoExposure() -> bool //uid:143
	fn setAutoExposure(mode: bool) //uid:144
	sig traceObject(P0: EventTrace) //uid:86
end
interface _ArmsLooker
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn setImplParam(P0: any) //uid:114
	fn start() //uid:115
	fn stopLooker() //uid:116
	fn look(P0: any) //uid:117
	fn lookEvent(P0: str, P1: any) //uid:118
	fn lostEvent() //uid:119
	sig traceObject(P0: EventTrace) //uid:86
end
interface LifeStarter
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn start() //uid:100
	fn stop() //uid:101
	sig traceObject(P0: EventTrace) //uid:86
end
interface _LaunchpadPluginActivities
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn _onActivityStatusChange(P0: str,P1: str,P2: str) //uid:114
	sig traceObject(P0: EventTrace) //uid:86
end
interface _ALNotificationAdder
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn _add(P0: int32) -> int32 //uid:100
	fn _add(P0: int32, P1: Vec<str>) -> int32 //uid:101
	fn _get(P0: int32) -> any //uid:102
	fn _get(P0: int32, P1: Vec<str>) -> any //uid:103
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALRedBallDetection
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn subscribe(name: str,period: int32,precision: float32) //uid:114
	fn subscribe(name: str) //uid:115
	fn unsubscribe(name: str) //uid:116
	fn updatePeriod(name: str,period: int32) //uid:117
	fn updatePrecision(name: str,precision: float32) //uid:118
	fn getCurrentPeriod() -> int32 //uid:119
	fn getCurrentPrecision() -> float32 //uid:120
	fn getMyPeriod(name: str) -> int32 //uid:121
	fn getMyPrecision(name: str) -> float32 //uid:122
	fn getSubscribersInfo() -> any //uid:123
	fn getOutputNames() -> Vec<str> //uid:124
	fn getEventList() -> Vec<str> //uid:125
	fn getMemoryKeyList() -> Vec<str> //uid:126
	fn _run() //uid:127
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALDialog
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn subscribe(name: str,period: int32,precision: float32) //uid:114
	fn subscribe(name: str) //uid:115
	fn unsubscribe(name: str) //uid:116
	fn updatePeriod(name: str,period: int32) //uid:117
	fn updatePrecision(name: str,precision: float32) //uid:118
	fn getCurrentPeriod() -> int32 //uid:119
	fn getCurrentPrecision() -> float32 //uid:120
	fn getMyPeriod(name: str) -> int32 //uid:121
	fn getMyPrecision(name: str) -> float32 //uid:122
	fn getSubscribersInfo() -> any //uid:123
	fn getOutputNames() -> Vec<str> //uid:124
	fn getEventList() -> Vec<str> //uid:125
	fn getMemoryKeyList() -> Vec<str> //uid:126
	fn _wordRecognized(unsuned: str,value: any,message: str) //uid:127
	fn getStoppable() -> bool //uid:128
	fn setStoppable(stoppable: bool) //uid:129
	fn runTopics(stoppable: Vec<str>) -> Vec<str> //uid:130
	fn stopTopics(stoppable: Vec<str>) //uid:131
	fn _setPhonetic(P0: str, P1: str, P2: str) //uid:132
	fn sayError(P0: Vec<str>, P1: str) //uid:133
	fn _forceCompileAll() //uid:134
	fn _androidPreloadMain() //uid:135
	fn _pauseEngine(enable: bool) //uid:136
	fn _enablePrediction(enable: bool) //uid:137
	fn _enableEmbeddedPrediction(enable: bool) //uid:138
	fn _learnEmbeddedPrediction() //uid:139
	fn _saveEmbeddedPrediction() //uid:140
	fn _wordRecognizedFromCallback(P0: str, P1: any, P2: str, P3: int32) //uid:141
	fn _getEnablePrediction() -> bool //uid:142
	fn say(P0: str, P1: str) //uid:143
	fn resetLanguage() //uid:144
	fn _getTriggerFromID(P0: str, P1: str) -> Vec<str> //uid:145
	fn addBlockingEvent(eventName: str) //uid:146
	fn removeBlockingEvent(eventName: str) //uid:147
	fn wordsRecognizedCallback(grammar: any,utteranceSize: int32) //uid:148
	fn endOfUtteranceCallback() -> bool //uid:149
	fn _releaseEngine() //uid:150
	fn _controlEngine(topicName: str,tagName: str) -> Vec<str> //uid:151
	fn _hasPreference() -> bool //uid:152
	fn _eventReceived(eventName: str,eventValue: any,message: str) //uid:153
	fn _statusChanged(internalCallBackEvent: str,internalCallbackValue: any,message: str) //uid:154
	fn gotoTag(topicName: str,tagName: str) //uid:155
	fn noPick(topicName: str) //uid:156
	fn _connectionChanged(internalCallBackEvent: str,internalCallbackValue: any,message: str) //uid:157
	fn compileAll() //uid:158
	fn compileBundle(P0: str) //uid:159
	fn createContext(P0: str, P1: str, P2: str) //uid:160
	fn loadTopic(topicPath: str) -> str //uid:161
	fn loadTopicContent(topicContent: str) -> str //uid:162
	fn loadTopicContentIntoBundleWithContext(P0: obj, P1: str, P2: str, P3: bool, P4: str) -> str //uid:163
	fn deactivateTopic(topicName: str) //uid:164
	fn activateTopic(topicName: str) //uid:165
	fn activateTopicInBundle(topicName: str,bundleName: str) //uid:166
	fn deactivateTopicInBundle(topicName: str,bundleName: str) //uid:167
	fn unloadTopic(topicName: str) //uid:168
	fn unloadTopicFromBundle(topicName: str,bundleName: str) //uid:169
	fn forceOutput() //uid:170
	fn _isRunDialogInstalled() -> bool //uid:171
	fn forceInput(input: str) //uid:172
	fn tell(input: str) //uid:173
	fn setASRConfidenceThreshold(threshold: float32) //uid:174
	fn getASRConfidenceThreshold() -> float32 //uid:175
	fn setConfidenceThreshold(strategy: str,confidence: float32) //uid:176
	fn setConfidenceThreshold(strategy: str,confidence: float32,language: str) //uid:177
	fn getAllConfidenceThresholds() -> Map<str,Map<str,float32>> //uid:178
	fn getConfidenceThreshold(P0: str, P1: str) -> float32 //uid:179
	fn removeAllLanguageThresholds() //uid:180
	fn _setConfidence(strategy: str,threshold: float32) //uid:181
	fn _getConfidence(strategy: str) -> float32 //uid:182
	fn openSession(id: int32) //uid:183
	fn _getBackend() -> str //uid:184
	fn _openTestSession(P0: str, P1: str, P2: bool, P3: bool, P4: str, P5: str) -> str //uid:185
	fn _closeTestSession() //uid:186
	fn _runTotTest(tot: str) -> Vec<Map<str,str>> //uid:187
	fn _runTotTest(tot: str,wavMode: str) -> Vec<Map<str,str>> //uid:188
	fn _runTotTest(tot: str,wavMode: str,wavTranscriptionFile: str) -> Vec<Map<str,str>> //uid:189
	fn closeSession() //uid:190
	fn closeTestSession() //uid:191
	fn _generateBNF(name: str,topic: str,language: str,destination: str) //uid:192
	fn _generatePOT(application: str,topics: Vec<str>,language: str,destination: str) //uid:193
	fn setDelay(eventName: str,Delay: int32) //uid:194
	fn setNumberOfScopes(numberOfScope: int32) //uid:195
	fn setConcept(P0: str, P1: str, P2: Vec<str>) //uid:196
	fn setConcept(conceptName: str,language: str,content: Vec<str>,store: bool) //uid:197
	fn setConceptKeepInCache(conceptName: str,language: str,content: Vec<str>) //uid:198
	fn setConceptInBundle(conceptName: str,bundleName: str,conceptContent: Vec<str>) //uid:199
	fn addToConcept(conceptName: str,language: str,content: Vec<str>) //uid:200
	fn getConcept(conceptName: str,language: str) -> Vec<str> //uid:201
	fn _setPushMode(pushMode: int32) //uid:202
	fn enableTriggerSentences(enableTriggerSentences: bool) //uid:203
	fn enableCategory(enableCategory: bool) //uid:204
	fn startPush() //uid:205
	fn stopPush() //uid:206
	fn setAnimatedSpeechConfiguration(animatedSpeechConfiguration: any) //uid:207
	fn getAnimatedSpeechConfiguration() -> any //uid:208
	fn applicationBlackList(applicationList: Vec<str>) //uid:209
	fn isContentNeedsUpdate() -> bool //uid:210
	fn _addDialogFromTopicBox(topicPathName: str,includeDirectory: str) -> str //uid:211
	fn _cleanEventStack() //uid:212
	fn _updateAIClient(libraryPath: str) //uid:213
	fn _addTopicsInGroup(groupName: str,topicNameList: Vec<str>) //uid:214
	fn _activateGroup(groupName: str) //uid:215
	fn _deactivateGroup(groupName: str) //uid:216
	fn _suggestNextTopic(topicName: str,suggestionValidity: int32) //uid:217
	fn _suggestUserNextTopic(topicName: str,suggestionValidity: int32,userID: int32) //uid:218
	fn exportContent(P0: str, P1: str) -> Vec<str> //uid:219
	fn _shareContent(P0: str, P1: Map<str,Vec<Map<str,str>>>) //uid:220
	fn _preloadMain() //uid:221
	fn _preloadMain2() //uid:222
	fn _mainLanguage(languageName: str) //uid:223
	fn _runMainNoActivation() //uid:224
	fn _runMain() //uid:225
	fn _startDialog(engagementMode: str) //uid:226
	fn _setEngagementMode(engagementMode: str) //uid:227
	fn _pause(P0: bool) //uid:228
	fn _endPause() //uid:229
	fn runDialog() //uid:230
	fn _resetPreload() //uid:231
	fn _stopMain() //uid:232
	fn stopDialog() //uid:233
	fn _stopDialog() //uid:234
	fn _loadStrategyConfiguration(strategyFile: str) //uid:235
	fn setVariablePath(topic: str,event: str,path: str) //uid:236
	fn _registerIO(boxName: str,topicName: str,inputList: Vec<str>,outputList: Vec<str>) //uid:237
	fn _unregisterIO(P0: str, P1: str) //uid:238
	fn _messageIn(boxName: str,topicName: str,variableName: str,value: any) //uid:239
	fn setLanguage(Language: str) //uid:240
	fn getLanguage() -> str //uid:241
	fn _startUpdate(variableName: str,variableValue: any,message: str) //uid:242
	fn _startApp(variableName: str,variableValue: any,message: str) //uid:243
	fn _packageInstalled(variableName: str,variableValue: any,message: str) //uid:244
	fn _packageRemoved(variableName: str,variableValue: any,message: str) //uid:245
	fn dialogAnswered(variableName: str,variableValue: any,message: str) //uid:246
	fn _compilationFinished(variableName: str,variableValue: any,message: str) //uid:247
	fn setFocus(topicName: str) //uid:248
	fn getFocus() -> str //uid:249
	fn gotoTopic(topicName: str) //uid:250
	fn _enableOneBNFActivated(enableFullBNF: bool) //uid:251
	fn _enableAISystem(enableAISystem: bool) //uid:252
	fn addFallback(language: str,name: str) //uid:253
	fn removeFallback(language: str,name: str) //uid:254
	fn _loadPrecompiledFile(filepath: str,bundleName: str,language: str) //uid:255
	fn _loadSLM(SLMFile: str,language: str) //uid:256
	fn getLoadedTopics(language: str) -> Vec<str> //uid:257
	fn getAllLoadedTopics() -> Vec<str> //uid:258
	fn getActivatedTopics() -> Vec<str> //uid:259
	fn _setBehaviorEvent(Event: str) //uid:260
	fn _fastModelActivation(enable: bool) //uid:261
	fn _byPassFastApproximateMatching(fastApproximative: bool) //uid:262
	fn activateTag(tagName: str,topicName: str) //uid:263
	fn deactivateTag(tagName: str,topicName: str) //uid:264
	fn _fallback(Question: str,Language: str) -> str //uid:265
	fn resetAll() //uid:266
	fn _setSynchronicity(P0: bool) //uid:267
	fn _getSynchronicity() -> bool //uid:268
	fn insertUserData(variableName: str,variableValue: str,UserID: int32) //uid:269
	fn _magicGet(P0: str) -> Vec<str> //uid:270
	fn getUserData(variableName: str,UserID: int32) -> str //uid:271
	fn getUserDataList(UserID: int32) -> Vec<str> //uid:272
	fn getUserList() -> Vec<int32> //uid:273
	fn removeUserData(UserID: int32) //uid:274
	fn clearConcepts() //uid:275
	fn _speechDetected(P0: str, P1: any, P2: str) //uid:276
	fn enableSendingLogToCloud(EnableLog: bool) //uid:277
	fn _encryptLog(EnableLog: bool) //uid:278
	fn isSendingLogToCloud() -> bool //uid:279
	fn _isEncryptingLog() -> bool //uid:280
	fn enableLogAudio(P0: bool) //uid:281
	fn _enableSemanticFallback(semanticPath: bool) //uid:282
	fn _setLogDatabaseType(databaseType: str) -> bool //uid:283
	fn _getLogDatabaseType() -> str //uid:284
	fn _setAwsBucketName(bucketName: str) -> bool //uid:285
	fn _getAwsBucketName() -> str //uid:286
	fn _setAwsEndPointName(endPointName: str) -> bool //uid:287
	fn _getAwsEndPointName() -> str //uid:288
	fn _setAwsCredentialsUrl(credentialsUrl: str) -> bool //uid:289
	fn _getAwsCredentialsUrl() -> str //uid:290
	fn _setDeletionCost(MatchingDeletionCost: float32) //uid:291
	fn _setInsertionCost(MatchingInsertCost: float32) //uid:292
	fn _setSubstitutionCost(MatchingSubstitutionCost: float32) //uid:293
	fn _setStarCost(MatchingStarCost: float32) //uid:294
	fn _setApproximateMatchingThreshold(MatchingThreshold: float32) //uid:295
	fn _useAcrobaticMatching(EnableAccrobatic: bool) //uid:296
	fn _enableStatisticalMatching(EnableSemantic: bool) //uid:297
	fn _enablePhoneticMatching(EnablePhonetic: bool) //uid:298
	fn _setSemanticModel(P0: str, P1: str) //uid:299
	fn _isOnePassEnabled() -> bool //uid:300
	fn _setSLMUpperThreshold(SLMUpper: float32) //uid:301
	fn _enableSerialization(enableSerialization: bool) //uid:302
	fn _deleteSerializationFiles() //uid:303
	fn _cleanPhonetic() //uid:304
	fn mute(P0: bool) //uid:305
	fn _copyInputConcepts(copyInput: bool) //uid:306
	fn _copyOutputConcepts(copyOutput: bool) //uid:307
	fn generateSentences(destination: str,topic: str,language: str) //uid:308
	fn generateSentences(destination: str,topic: str,language: str,sampling: int32) //uid:309
	fn _setLengthForAfterStarOptimization(length: int32) //uid:310
	fn _setLengthForBeforeStarOptimization(length: int32) //uid:311
	fn _onUserSessionFocused(P0: str,P1: any,P2: str) //uid:312
	fn _onUserDeleted(P0: str,P1: any,P2: str) //uid:313
	fn _us_getUserData(P0: str,P1: str,P2: str) -> any //uid:314
	fn _setUserSessionObeyed(is_obeyed: bool) //uid:315
	fn _isUserSessionObeyed() -> bool //uid:316
	fn enableSimulatedApps(simulateApps: bool) //uid:317
	fn _setMachineLearningEnable(Enable: bool) //uid:318
	fn _isMachineLearningEnabled() -> bool //uid:319
	fn _clearLastMisunderstood() //uid:320
	fn _isLastMisunderstoodEnabled() -> bool //uid:321
	fn _setLastMisunderstoodEnable(P0: bool) //uid:322
	fn getGlobalRecommandations() -> Vec<str> //uid:323
	fn getLocalRecommandations() -> Vec<str> //uid:324
	fn getFocusRecommandations() -> Vec<str> //uid:325
	fn setVariableValue(P0: str, P1: str, P2: str, P3: str) //uid:326
	fn getVariableValue(P0: str, P1: str, P2: str) -> str //uid:327
	fn getBookmarkActivationStatus(P0: str, P1: str, P2: str, P3: str) -> bool //uid:328
	fn loadTopicContentIntoBundle(topicContent: str,bundleName: str,newSDK: bool,forcedLanguage: str) -> str //uid:329
	fn goToBookmark(name: str,topic: str,failIfNotReached: bool) -> bool //uid:330
	fn getTopicDescription(topicName: str,bundle: str,language: str) -> str //uid:331
	fn isListening() -> bool //uid:332
	fn isDynamicConcept(conceptName: str,language: str,bundleName: str) -> bool //uid:333
	fn compileBundleWithConceptErrorCheck(bundleName: str) //uid:334
	fn getConceptInBundle(conceptName: str,bundleName: str,language: str) -> Vec<str> //uid:335
	fn _convertLocale(locale: str) -> str //uid:336
	fn _stopOutput() //uid:337
	fn _stopAndUnsubscribe(subscriber: str) //uid:338
	sig traceObject(P0: EventTrace) //uid:86
	sig variableValueUpdated(P0: str, P1: str) //uid:339
	sig bookmarkReached(P0: str, P1: str) //uid:340
	sig focusedTopicDescription(P0: str, P1: str) //uid:341
	sig bookmarkActivationStatusChanged(P0: str, P1: str, P2: bool) //uid:342
	sig endDiscuss(P0: str, P1: str) //uid:343
	sig lastInput(P0: str) //uid:344
	sig answered(P0: str) //uid:345
	sig dynamicConceptUpdated(P0: str, P1: Vec<str>) //uid:346
	sig waitingForSpeech(P0: bool) //uid:347
	sig _dialogStatusListening(P0: bool) //uid:348
	sig _heardKnowledge(P0: Knowledge) //uid:349
	sig _activityRequestedByUser(P0: str) //uid:350
	sig _requestCollaborativeDialog() //uid:351
	sig _startPreload(P0: int32) //uid:352
	sig _endPreload(P0: int32) //uid:353
	sig _wakeUpWord(P0: int32) //uid:354
	sig _byeWord(P0: int32) //uid:355
	sig signal(P0: Vec<str>) //uid:356
	prop _dialogStatusListening(param: bool) //uid:348
end
interface _LaunchpadPluginBattery
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	sig traceObject(P0: EventTrace) //uid:86
end
interface _NaoMarkConverter1
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn setImplParam(P0: any) //uid:114
	fn start(P0: int32) //uid:115
	fn stopConverter() //uid:116
	fn convert(P0: any) -> any //uid:117
	fn convertEvent(P0: str, P1: any) //uid:118
	fn updateDetectorPeriod(P0: int32) //uid:119
	fn getDetectorPeriod() -> int32 //uid:120
	sig traceObject(P0: EventTrace) //uid:86
end
interface _NavigationMove
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn setParam(P0: any) //uid:114
	fn start() //uid:115
	fn stopMove() //uid:116
	fn stopWithoutStopMove() //uid:117
	fn move(P0: any) //uid:118
	fn moveEvent(P0: str, P1: any) //uid:119
	fn _stopMoveEvent() //uid:120
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALWavingDetection
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn subscribe(name: str,period: int32,precision: float32) //uid:114
	fn subscribe(name: str) //uid:115
	fn unsubscribe(name: str) //uid:116
	fn updatePeriod(name: str,period: int32) //uid:117
	fn updatePrecision(name: str,precision: float32) //uid:118
	fn getCurrentPeriod() -> int32 //uid:119
	fn getCurrentPrecision() -> float32 //uid:120
	fn getMyPeriod(name: str) -> int32 //uid:121
	fn getMyPrecision(name: str) -> float32 //uid:122
	fn getSubscribersInfo() -> any //uid:123
	fn getOutputNames() -> Vec<str> //uid:124
	fn getEventList() -> Vec<str> //uid:125
	fn getMemoryKeyList() -> Vec<str> //uid:126
	fn isPaused() -> bool //uid:127
	fn pause(status: bool) //uid:128
	fn isProcessing() -> bool //uid:129
	fn setMaxDistance(maxDistance: float32) //uid:130
	fn getMaxDistance() -> float32 //uid:131
	fn setMinSize(sensitivity: float32) //uid:132
	fn getMinSize() -> float32 //uid:133
	sig traceObject(P0: EventTrace) //uid:86
end
interface _ConditionChecker_maxwell_75729_0
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn onEvent(key: str,value: any,message: str) //uid:114
	fn onPreferenceUpdated(P0: str,P1: any,P2: str) //uid:115
	fn onPreferenceSynchronized(P0: str,P1: any,P2: str) //uid:116
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALWorldRepresentation
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn addAttributeToCategory(P0: str, P1: str, P2: any) -> int32 //uid:114
	fn clearObject(P0: str) -> int32 //uid:115
	fn clearOldPositions(P0: str, P1: int32) -> int32 //uid:116
	fn createObjectCategory(P0: str, P1: bool) -> int32 //uid:117
	fn removeObjectCategory(P0: str) -> int32 //uid:118
	fn objectCategoryExists(P0: str) -> bool //uid:119
	fn deleteObjectAttribute(P0: str, P1: str, P2: str) -> int32 //uid:120
	fn findObject(P0: str) -> bool //uid:121
	fn load() -> int32 //uid:122
	fn getAttributesFromCategory(P0: str) -> any //uid:123
	fn getChildrenNames(P0: str) -> Vec<str> //uid:124
	fn getObjectNames() -> Vec<str> //uid:125
	fn getObjectAttributes(P0: str) -> any //uid:126
	fn getObjectAttributeValues(P0: str, P1: str, P2: int32) -> any //uid:127
	fn getObjectLatestAttributes(P0: str, P1: int32) -> any //uid:128
	fn getObjectParentName(P0: str) -> str //uid:129
	fn getObjectsInCategory(P0: str) -> Vec<str> //uid:130
	fn getObjectCategory(P0: str) -> str //uid:131
	fn getPosition(P0: str, P1: str) -> any //uid:132
	fn getPosition6D(P0: str, P1: str) -> Vec<float32> //uid:133
	fn getPosition6DAtTime(P0: str, P1: str, P2: int32, P3: int32) -> Vec<float32> //uid:134
	fn getRootName() -> str //uid:135
	fn save() -> int32 //uid:136
	fn select(P0: str, P1: str, P2: str, P3: str) -> any //uid:137
	fn selectWithOrder(P0: str, P1: str, P2: str, P3: str, P4: str) -> any //uid:138
	fn storeObject(P0: str, P1: str, P2: Vec<float32>, P3: str, P4: any) -> int32 //uid:139
	fn storeObjectWithReference(P0: str, P1: str, P2: str, P3: Vec<float32>, P4: str, P5: any) -> int32 //uid:140
	fn storeObjectAttribute(P0: str, P1: str, P2: any) -> int32 //uid:141
	fn updatePosition(P0: str, P1: Vec<float32>, P2: bool) -> int32 //uid:142
	fn updatePositionWithReference(P0: str, P1: str, P2: Vec<float32>, P3: bool) -> int32 //uid:143
	fn updateAttribute(P0: str, P1: str, P2: str, P3: any) -> int32 //uid:144
	fn _startMemoryCheck(P0: int32) //uid:145
	fn _stopMemoryCheck() //uid:146
	fn _beginTransaction(P0: str) -> int32 //uid:147
	fn _endTransaction(P0: str) -> int32 //uid:148
	sig traceObject(P0: EventTrace) //uid:86
end
interface _RedBallConverter
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn setImplParam(P0: any) //uid:114
	fn start(P0: int32) //uid:115
	fn stopConverter() //uid:116
	fn convert(P0: any) -> any //uid:117
	fn convertEvent(P0: str, P1: any) //uid:118
	fn updateDetectorPeriod(P0: int32) //uid:119
	fn getDetectorPeriod() -> int32 //uid:120
	sig traceObject(P0: EventTrace) //uid:86
end
interface _NaoMarkConverter2
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn setImplParam(P0: any) //uid:114
	fn start(P0: int32) //uid:115
	fn stopConverter() //uid:116
	fn convert(P0: any) -> any //uid:117
	fn convertEvent(P0: str, P1: any) //uid:118
	fn updateDetectorPeriod(P0: int32) //uid:119
	fn getDetectorPeriod() -> int32 //uid:120
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALMovementDetection
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn subscribe(name: str,period: int32,precision: float32) //uid:114
	fn subscribe(name: str) //uid:115
	fn unsubscribe(name: str) //uid:116
	fn updatePeriod(name: str,period: int32) //uid:117
	fn updatePrecision(name: str,precision: float32) //uid:118
	fn getCurrentPeriod() -> int32 //uid:119
	fn getCurrentPrecision() -> float32 //uid:120
	fn getMyPeriod(name: str) -> int32 //uid:121
	fn getMyPrecision(name: str) -> float32 //uid:122
	fn getSubscribersInfo() -> any //uid:123
	fn getOutputNames() -> Vec<str> //uid:124
	fn getEventList() -> Vec<str> //uid:125
	fn getMemoryKeyList() -> Vec<str> //uid:126
	fn isPaused() -> bool //uid:127
	fn pause(status: bool) //uid:128
	fn isProcessing() -> bool //uid:129
	fn setFrameRate(value: int32) -> bool //uid:130
	fn getFrameRate() -> int32 //uid:131
	fn setResolution(resolution: int32) -> bool //uid:132
	fn getResolution() -> int32 //uid:133
	fn setActiveCamera(cameraId: int32) -> bool //uid:134
	fn getActiveCamera() -> int32 //uid:135
	fn resetDetection() //uid:136
	fn setColorSensitivity(sensitivity: float32) //uid:137
	fn getColorSensitivity() -> float32 //uid:138
	fn setDepthSensitivity(sensitivity: float32) //uid:139
	fn getDepthSensitivity() -> float32 //uid:140
	fn _setDetectionMode(mode: str) //uid:141
	fn _getDetectionMode() -> str //uid:142
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALVisualCompass
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn subscribe(name: str,period: int32,precision: float32) //uid:114
	fn subscribe(name: str) //uid:115
	fn unsubscribe(name: str) //uid:116
	fn updatePeriod(name: str,period: int32) //uid:117
	fn updatePrecision(name: str,precision: float32) //uid:118
	fn getCurrentPeriod() -> int32 //uid:119
	fn getCurrentPrecision() -> float32 //uid:120
	fn getMyPeriod(name: str) -> int32 //uid:121
	fn getMyPrecision(name: str) -> float32 //uid:122
	fn getSubscribersInfo() -> any //uid:123
	fn getOutputNames() -> Vec<str> //uid:124
	fn getEventList() -> Vec<str> //uid:125
	fn getMemoryKeyList() -> Vec<str> //uid:126
	fn setFrameRate(subscriberName: str,framerate: int32) -> bool //uid:127
	fn setFrameRate(framerate: int32) -> bool //uid:128
	fn setResolution(resolution: int32) -> bool //uid:129
	fn setActiveCamera(cameraId: int32) -> bool //uid:130
	fn setParameter(paramName: str,value: any) //uid:131
	fn getFrameRate() -> int32 //uid:132
	fn getResolution() -> int32 //uid:133
	fn getActiveCamera() -> int32 //uid:134
	fn isPaused() -> bool //uid:135
	fn isProcessing() -> bool //uid:136
	fn pause(paused: bool) //uid:137
	fn _run() //uid:138
	fn getReferenceImage() -> any //uid:139
	fn enableReferenceRefresh(refresh: bool) //uid:140
	fn getMatchingQuality() -> any //uid:141
	fn setCurrentImageAsReference() -> bool //uid:142
	fn moveTo(x: float32,y: float32,theta: float32) -> bool //uid:143
	fn moveStraightTo(x: float32) -> bool //uid:144
	fn _xOnMoveFailed() //uid:145
	fn _xOnFootContactChanged(P0: str, P1: any, P2: str) //uid:146
	fn _stopControllers() //uid:147
	fn _resumeControllers(resumeControllers: bool) //uid:148
	fn _resume() //uid:149
	fn _setTranslationParameters(P0: float32, P1: float32, P2: float32, P3: float32) //uid:150
	fn _setRotationParameters(P0: any, P1: float32, P2: float32, P3: float32, P4: float32, P5: int32) //uid:151
	fn waitUntilTargetReached() //uid:152
	fn _setOdometryMode(P0: bool) //uid:153
	sig traceObject(P0: EventTrace) //uid:86
end
interface _LifeReporter
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn _onFocusedActivity(memoryKey: str,value: any,message: str) //uid:114
	fn _onAutonomousLifeStateChange(memoryKey: str,value: any,message: str) //uid:115
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALKnowledge
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn add(P0: str, P1: str, P2: str, P3: str) //uid:100
	fn addExpirationDate(P0: str, P1: str, P2: str, P3: str, P4: str) //uid:101
	fn updateExpirationDate(P0: str, P1: str, P2: str, P3: str, P4: str) //uid:102
	fn addHappeningDate(P0: str, P1: str, P2: str, P3: str, P4: str) //uid:103
	fn updateHappeningDate(P0: str, P1: str, P2: str, P3: str, P4: str) //uid:104
	fn getSubject(P0: str, P1: str, P2: str) -> Vec<str> //uid:105
	fn getPredicate(P0: str, P1: str, P2: str) -> Vec<str> //uid:106
	fn getObject(P0: str, P1: str, P2: str) -> Vec<str> //uid:107
	fn update(P0: str, P1: str, P2: str, P3: str) //uid:108
	fn queryTriplet(P0: str, P1: str, P2: str, P3: str) -> Vec<Vec<str>> //uid:109
	fn remove(P0: str, P1: str, P2: str, P3: str) //uid:110
	fn contains(P0: str, P1: str, P2: str, P3: str) -> bool //uid:111
	fn query(P0: str, P1: str, P2: str, P3: str) -> Vec<str> //uid:112
	fn query(P0: str, P1: str, P2: str, P3: str, P4: str, P5: str) -> Vec<str> //uid:113
	fn queryTripletWithMetadata(P0: str, P1: str, P2: str, P3: str, P4: str, P5: str, P6: bool) -> any //uid:114
	fn queryTripletWithMetadata(P0: str, P1: str, P2: str, P3: str, P4: Vec<Tuple<str,str>>, P5: bool) -> any //uid:115
	fn addRule(P0: str, P1: str) -> str //uid:116
	fn addRule(P0: str) -> str //uid:117
	fn getRules() -> Map<str,str> //uid:118
	fn removeRule(P0: str) //uid:119
	fn clearRules(P0: str) //uid:120
	fn clearRules() //uid:121
	fn clearInference() //uid:122
	fn performInference() //uid:123
	fn resetKnowledge(P0: str) //uid:124
	fn exportModel(P0: str, P1: str, P2: str) //uid:125
	fn importModel(P0: str, P1: str, P2: str) //uid:126
	fn sparqlQuery(P0: str) -> Vec<str> //uid:127
	fn sparqlQuery(P0: str, P1: bool) -> Vec<str> //uid:128
	fn createBackupModel(P0: unknown) //uid:129
	fn recoverBackupModel(P0: unknown) //uid:130
	fn addMetadata(P0: str, P1: str, P2: str, P3: str, P4: str, P5: str) -> bool //uid:131
	fn queryMetadata(P0: str, P1: str, P2: str, P3: str, P4: str) -> Vec<str> //uid:132
	fn updateMetadata(P0: str, P1: str, P2: str, P3: str, P4: str, P5: str) -> bool //uid:133
	fn containsMetadata(P0: str, P1: str, P2: str, P3: str, P4: str, P5: str) -> bool //uid:134
	fn removeMetadata(P0: str, P1: str, P2: str, P3: str, P4: str, P5: str) -> bool //uid:135
	fn getId(P0: str, P1: str, P2: str, P3: str) -> str //uid:136
	fn getTripletFromId(P0: str, P1: str) -> Vec<str> //uid:137
	fn _enableInference(P0: bool) //uid:140
	fn _isInferenceEnabled() -> bool //uid:141
	sig traceObject(P0: EventTrace) //uid:86
	sig knowledgeAdded(P0: str, P1: str, P2: str, P3: str) //uid:138
	sig knowledgeRemoved(P0: str, P1: str, P2: str, P3: str) //uid:139
end
interface ALMemory
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn declareEvent(eventName: str) //uid:114
	fn declareEvent(eventName: str,extractorName: str) //uid:115
	fn getData(key: str) -> any //uid:116
	fn getData(key: str,deprecatedParameter: int32) -> any //uid:117
	fn subscriber(eventName: str) -> obj //uid:118
	fn getTimestamp(key: str) -> any //uid:119
	fn getEventHistory(key: str) -> any //uid:120
	fn getDataList(filter: str) -> Vec<str> //uid:121
	fn getDataListName() -> Vec<str> //uid:122
	fn getDataOnChange(key: str,deprecatedParameter: int32) -> any //uid:123
	fn getDataPtr(key: str) -> unknown //uid:124
	fn getIntPtr(key: str) -> unknown //uid:125
	fn getFloatPtr(key: str) -> unknown //uid:126
	fn getEventList() -> Vec<str> //uid:127
	fn getExtractorEvent(extractorName: str) -> Vec<str> //uid:128
	fn getListData(keyList: any) -> any //uid:129
	fn getMicroEventList() -> Vec<str> //uid:130
	fn getSubscribers(name: str) -> Vec<str> //uid:131
	fn getType(key: str) -> str //uid:132
	fn insertData(key: str,value: int32) //uid:133
	fn insertData(key: str,value: float32) //uid:134
	fn insertData(key: str,value: str) //uid:135
	fn insertData(key: str,data: any) //uid:136
	fn insertListData(list: any) //uid:137
	fn raiseEvent(name: str,value: any) //uid:138
	fn raiseMicroEvent(name: str,value: any) //uid:139
	fn removeData(key: str) //uid:140
	fn removeEvent(name: str) //uid:141
	fn removeMicroEvent(name: str) //uid:142
	fn subscribeToEvent(name: str,callbackModule: str,callbackMethod: str) //uid:143
	fn subscribeToEvent(name: str,callbackModule: str,callbackMessage: str,callbacMethod: str) //uid:144
	fn subscribeToMicroEvent(name: str,callbackModule: str,callbackMessage: str,callbackMethod: str) //uid:145
	fn unregisterModuleReference(moduleName: str) //uid:146
	fn _perf() //uid:147
	fn unsubscribeToEvent(name: str,callbackModule: str) //uid:148
	fn unsubscribeToMicroEvent(name: str,callbackModule: str) //uid:149
	fn _insertObject(name: str,buffer: any,bufferSize: int32) //uid:150
	fn _subscribeOnDataSetTimePolicy(name: str,callbackModule: str,nTimePolicy: int32) //uid:151
	fn _subscribeOnDataSetSynchronizeResponse(name: str,callbackModule: str,synchronizedResponse: bool) //uid:152
	fn setDescription(name: str,description: str) //uid:153
	fn getDescriptionList(keylist: Vec<str>) -> any //uid:154
	fn addMapping(service: str,signal: str,event: str) //uid:155
	fn addMapping(service: str,signalEvent: Map<str,str>) //uid:156
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALRobotPosture
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn getPostureFamily() -> str //uid:114
	fn goToPosture(postureName: str,maxSpeedFraction: float32) -> bool //uid:115
	fn applyPosture(postureName: str,maxSpeedFraction: float32) -> bool //uid:116
	fn stopMove() //uid:117
	fn getPostureList() -> Vec<str> //uid:118
	fn getPostureFamilyList() -> Vec<str> //uid:119
	fn setMaxTryNumber(pMaxTryNumber: int32) //uid:120
	fn getPosture() -> str //uid:121
	fn _isRobotInPosture(P0: str, P1: float32, P2: float32) -> any //uid:122
	fn _isRobotInPostureId(P0: int32, P1: float32, P2: float32) -> bool //uid:123
	fn _getPosture() -> any //uid:124
	fn _setPostureId(P0: int32, P1: float32) -> bool //uid:125
	fn _goToPostureId(P0: int32, P1: float32) -> bool //uid:126
	fn _namePosture(P0: int32, P1: str) -> bool //uid:127
	fn _renamePosture(P0: str, P1: str) -> bool //uid:128
	fn _resavePosture(P0: int32) -> bool //uid:129
	fn _setSlowFactor(P0: int32, P1: int32, P2: float32) -> bool //uid:130
	fn _setAntiCollision(P0: int32, P1: bool) -> bool //uid:131
	fn _setUseAntiCollision(enable: bool) //uid:132
	fn _setUseAutoBalance(enable: bool) //uid:133
	fn _setCost(P0: int32, P1: float32) -> bool //uid:134
	fn _saveCurrentPosture(P0: int32) -> bool //uid:135
	fn _saveCurrentPostureWithName(P0: int32, P1: str) -> bool //uid:136
	fn _applyPostures(P0: Vec<int32>, P1: float32, P2: bool, P3: bool) -> bool //uid:137
	fn _eraseAllPostures() -> bool //uid:138
	fn _bindPostures(P0: int32, P1: int32, P2: float32, P3: float32) -> bool //uid:139
	fn _addNeighbourToPosture(P0: int32, P1: int32, P2: float32) -> bool //uid:140
	fn _removeNeighbourFromPosture(P0: int32, P1: int32) -> bool //uid:141
	fn _unBindPostures(P0: int32, P1: int32) -> bool //uid:142
	fn _erasePosture(P0: int32) -> bool //uid:143
	fn _getLibrarySize() -> int32 //uid:144
	fn _loadPostureLibraryFromName(P0: str) -> bool //uid:145
	fn _getCurrentPath() -> Vec<float32> //uid:146
	fn _isStandCallBack(P0: str, P1: any, P2: str) //uid:147
	fn _savePostureLibrary(P0: str) -> bool //uid:148
	fn _getArticularDistanceToPosture(P0: int32) -> float32 //uid:149
	fn _getCartesianDistanceToPosture(P0: int32) -> any //uid:150
	fn _getCartesianDistanceVector(P0: int32) -> Vec<float32> //uid:151
	fn _getPostureIdList() -> Vec<int32> //uid:152
	fn _isReachable(P0: int32) -> bool //uid:153
	fn _generateCartesianMap() //uid:154
	fn _getPostureZ(P0: float32) -> any //uid:155
	fn _getPostureNoZ() -> any //uid:156
	fn _getIdFromName(P0: str) -> int32 //uid:157
	fn _activeDiagnosisCallBack(P0: str, P1: any, P2: str) //uid:158
	fn _eraseFamily(P0: str) -> bool //uid:159
	sig traceObject(P0: EventTrace) //uid:86
end
interface Touch
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn getSensorNames() -> Vec<str> //uid:100
	fn getSensor(P0: str) -> obj //uid:101
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALUserSession
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn doesUserExist(P0: int32) -> bool //uid:110
	fn doUsersExist(P0: Vec<int32>) -> bool //uid:111
	fn getUserList() -> Vec<int32> //uid:112
	fn getNumUsers() -> int32 //uid:113
	fn getFocusedUser() -> int32 //uid:114
	fn getOpenUserSessions() -> Vec<int32> //uid:115
	fn isUserSessionOpen(P0: int32) -> bool //uid:116
	fn areUserSessionsOpen(P0: Vec<int32>) -> bool //uid:117
	fn isUserPermanent(P0: int32) -> bool //uid:118
	fn areUsersPermanent(P0: Vec<int32>) -> bool //uid:119
	fn getPermanentUserList() -> Vec<int32> //uid:120
	fn _rememberUserPermanently(P0: int32) -> bool //uid:121
	fn _forgetPermanentUser(P0: int32) -> bool //uid:122
	fn getBindingList() -> Vec<str> //uid:123
	fn doesBindingExist(P0: str) -> bool //uid:124
	fn getUserBinding(P0: int32, P1: str) -> str //uid:125
	fn getUserBindings(P0: int32) -> Map<str,str> //uid:126
	fn findUsersWithBinding(P0: str, P1: str) -> Vec<int32> //uid:127
	fn getUsidFromPpid(P0: int32) -> int32 //uid:128
	fn getPpidFromUsid(P0: int32) -> int32 //uid:129
	fn _checkPhotoForIdentification(P0: str) -> int32 //uid:130
	fn _reinforceIdentificationFromPhoto(P0: int32, P1: str) -> bool //uid:131
	fn _createUserFromPhoto(P0: str) -> int32 //uid:132
	fn _setFocusedUser(P0: int32) //uid:133
	fn _createUsers(P0: int32) -> Vec<int32> //uid:134
	fn _deleteUser(P0: int32) -> bool //uid:135
	fn _deleteUsers(P0: Vec<int32>) -> bool //uid:136
	fn _openUserSessions(P0: Vec<int32>) -> Vec<int32> //uid:137
	fn _closeUserSessions(P0: Vec<int32>) -> Vec<int32> //uid:138
	fn _bindUser(P0: int32, P1: str, P2: str) -> bool //uid:139
	fn _unbindUser(P0: int32, P1: str) -> bool //uid:140
	fn _getDatabaseVersion() -> int32 //uid:141
	fn _deleteAllUsers() -> bool //uid:142
	fn getBindingSources() -> Vec<str> //uid:143
	fn doesBindingSourceExist(P0: str) -> bool //uid:144
	fn getUserDataSources() -> Vec<str> //uid:145
	fn doesUserDataSourceExist(P0: str) -> bool //uid:146
	fn _registerUserDataSource(P0: str, P1: str) //uid:147
	fn _unregisterUserDataSource(P0: str) //uid:148
	fn getUserData(P0: int32, P1: str, P2: str) -> any //uid:149
	fn getUserData(P0: int32, P1: str) -> Map<str,any> //uid:150
	fn setUserData(P0: int32, P1: str, P2: str, P3: any) //uid:151
	fn getUserCreationDate(P0: int32) -> str //uid:152
	fn getFirstEncounterDate(P0: int32) -> str //uid:153
	fn getCurrentEncounterDate(P0: int32) -> str //uid:154
	fn getLastEncounterDate(P0: int32) -> str //uid:155
	fn getSecondsSinceLastEncounter(P0: int32) -> int32 //uid:156
	fn _getSecondsSinceUserCreation(P0: int32) -> int32 //uid:157
	sig traceObject(P0: EventTrace) //uid:86
	sig createdUsers(P0: Vec<int32>) //uid:100
	sig deletedUsers(P0: Vec<int32>) //uid:101
	sig openedSessions(P0: Vec<int32>) //uid:102
	sig closedSessions(P0: Vec<int32>) //uid:103
	sig focusedUser(P0: int32) //uid:104
	sig noOpenSession(P0: bool) //uid:105
	sig addedPermanentUsers(P0: Vec<int32>) //uid:106
	sig removedPermanentUsers(P0: Vec<int32>) //uid:107
	sig bindedUser(P0: int32, P1: str, P2: str) //uid:108
	sig unbindedUser(P0: int32, P1: str) //uid:109
end
interface ALFrameManager
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn newBehaviorFromFile(xmlFilePath: str,behName: str) -> str //uid:114
	fn createBehavior(packageDir: str,behaviorPath: str,behName: str) -> str //uid:115
	fn newBehaviorFromChoregraphe() -> str //uid:116
	fn completeBehavior(id: str) //uid:117
	fn deleteBehavior(id: str) //uid:118
	fn playBehavior(id: str) //uid:119
	fn exitBehavior(id: str) //uid:120
	fn isBehaviorRunning(id: str) -> bool //uid:121
	fn cleanBehaviors() //uid:122
	fn getBehaviorPath(id: str) -> str //uid:123
	fn createTimeline(timelineContent: str) -> str //uid:124
	fn playTimeline(id: str) //uid:125
	fn stopTimeline(id: str) //uid:126
	fn setTimelineFps(id: str,fps: int32) //uid:127
	fn getTimelineFps(id: str) -> int32 //uid:128
	fn getMotionLength(id: str) -> float32 //uid:129
	fn behaviors() -> Vec<str> //uid:130
	fn gotoAndStop(id: str,frame: str) //uid:131
	fn gotoAndStop(id: str,frame: int32) //uid:132
	fn gotoAndPlay(id: str,frame: str) //uid:133
	fn gotoAndPlay(id: str,frame: int32) //uid:134
	fn _dataChanged(dataName: str,data: any,message: str) //uid:135
	fn _subscribeBoxToEvent(eventName: str,boxName: str,message: str,callback: str,micro: bool) //uid:136
	fn _unsubscribeBoxToEvent(eventName: str,boxName: str,micro: bool) //uid:137
	fn _boxDataChanged(eventName: str,value: any,message: str) //uid:138
	fn _startBenchmark() //uid:139
	fn _stopBenchmark() -> str //uid:140
	fn _newBoxFromFile(xmlFilePath: str,path: str) -> str //uid:141
	fn _waitForStopped(fmid: str) //uid:142
	fn _onPreferenceUpdated(key: str,value: any,message: str) //uid:143
	fn _onPreferencesSynchronized(key: str,value: any,message: str) //uid:144
	fn _reportError(fmid: str,boxid: str,error_2: str) //uid:145
	fn getBehaviorDebuggerFor(behavior: str) -> obj //uid:146
	fn getBox(box: str) -> obj //uid:147
	fn callBoxInput(box: str,method: str,arg: any) -> any //uid:148
	fn callBoxInput(box: str,method: str,arg1: any,arg2: any) -> any //uid:149
	sig traceObject(P0: EventTrace) //uid:86
	sig behaviorCreated(P0: str) //uid:150
	sig behaviorPlayed(P0: str) //uid:151
	sig behaviorStopped(P0: str) //uid:152
	sig behaviorDestroyed(P0: str) //uid:153
	sig behaviorFailed(P0: str, P1: str, P2: str) //uid:154
end
interface _SoundConverter
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn setImplParam(P0: any) //uid:114
	fn start(P0: int32) //uid:115
	fn stopConverter() //uid:116
	fn convert(P0: any) -> any //uid:117
	fn convertEvent(P0: str, P1: any) //uid:118
	fn updateDetectorPeriod(P0: int32) //uid:119
	fn getDetectorPeriod() -> int32 //uid:120
	sig traceObject(P0: EventTrace) //uid:86
end
interface _Smoother
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn startEvent(pEventName: str) //uid:114
	fn startEvent(firsteventname: str,secondeventname: str) //uid:115
	fn restart(pEventName: str) //uid:116
	fn restart(firsteventname: str,secondeventname: str) //uid:117
	fn setMap(P0: any) //uid:118
	fn setTarget(P0: any) //uid:119
	fn setTargetIds(P0: int32, P1: int32) //uid:120
	fn getPosition() -> any //uid:121
	fn stopSmoother() //uid:122
	fn _smoothEvent(P0: str, P1: any) //uid:123
	fn _smoothFirstEvent(P0: str, P1: any) //uid:124
	fn _smoothSecondEvent(P0: str, P1: any) //uid:125
	fn _raiseSearchEvent() //uid:126
	fn getTimeOut() -> int32 //uid:127
	fn setTimeOut(pTime: int32) //uid:128
	fn getMaxDistance() -> float32 //uid:129
	fn setMaxDistance(pDistance: float32) //uid:130
	fn _setMoveEvent(P0: str) //uid:131
	fn _smoothMoveEvent(P0: str, P1: any) //uid:132
	fn _disableFeaturesChanged(P0: str, P1: any) //uid:133
	fn _setMoveHysteresis(P0: Vec<float32>) //uid:134
	fn _getMoveHysteresis() -> Vec<float32> //uid:135
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALPreferences
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn readPrefFile(fileName: str,autoGenerateMemoryNames: bool) -> any //uid:114
	fn writePrefFile(fileName: str,prefs: any,ignoreMemoryNames: bool) //uid:115
	fn removePrefFile(fileName: str) //uid:116
	fn saveToMemory(prefs: any) -> bool //uid:117
	sig traceObject(P0: EventTrace) //uid:86
end
interface Mapping
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn mapFrame() -> obj //uid:100
	fn chargingStationFrame() -> obj //uid:101
	fn makeFreeFrame() -> obj //uid:102
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALAnimatedSpeech
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn say(text: str) //uid:114
	fn say(text: str,configuration: any) //uid:115
	fn _sayKnowledge(P0: Knowledge, P1: TextProcessingContext, P2: any) //uid:116
	fn _reset() //uid:117
	fn _stopAll(blocking: bool) //uid:118
	fn sayWithoutInstructions(P0: str, P1: int32, P2: Locale) //uid:119
	fn _isRunning() -> bool //uid:120
	fn setBodyTalkEnabled(enable: bool) //uid:121
	fn setBodyLanguageEnabled(enable: bool) //uid:122
	fn setBodyLanguageModeFromStr(stringBodyLanguageMode: str) //uid:123
	fn setBodyLanguageMode(bodyLanguageMode: uint32) //uid:124
	fn getBodyLanguageModeToStr() -> str //uid:125
	fn getBodyLanguageMode() -> uint32 //uid:126
	fn declareAnimationsPackage(animationsPackage: str) //uid:127
	fn _setMSPauseBeforeSpeech(pause: int32) //uid:128
	fn _getMSPauseBeforeSpeech() -> uint32 //uid:129
	fn _isCheckExecutionTimesEnabled() -> bool //uid:130
	fn _setCheckExecutionTimes(pause: bool) //uid:131
	fn addTagsToWords(tagsToWords: any) //uid:132
	fn declareTagForAnimations(tagsToAnimations: any) //uid:133
	fn _diagnosis() //uid:134
	fn isBodyTalkEnabled() -> bool //uid:135
	fn isBodyLanguageEnabled() -> bool //uid:136
	fn _getTagList() -> Vec<str> //uid:137
	fn _getAnimationsByTag(tag: str) -> Vec<str> //uid:138
	fn _speechBookMarkCallback(memoryKey: str,value: any,message: str) //uid:139
	fn _mrkpauseCallback(pBookmark: uint32) //uid:140
	fn _postureFamilyChangedCallback(memoryKey: str,value: any,message: str) //uid:141
	sig traceObject(P0: EventTrace) //uid:86
	sig _saidKnowledge(P0: Knowledge) //uid:142
	sig _synthesizedKnowledge(P0: str) //uid:143
end
interface _HeadLooker
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn setImplParam(P0: any) //uid:114
	fn start() //uid:115
	fn stopLooker() //uid:116
	fn look(P0: any) //uid:117
	fn lookEvent(P0: str, P1: any) //uid:118
	fn lostEvent() //uid:119
	sig traceObject(P0: EventTrace) //uid:86
end
interface _WholeBodyLooker
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn setImplParam(P0: any) //uid:114
	fn start() //uid:115
	fn stopLooker() //uid:116
	fn look(P0: any) //uid:117
	fn lookEvent(P0: str, P1: any) //uid:118
	fn lostEvent() //uid:119
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALSegmentation3D
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn subscribe(name: str,period: int32,precision: float32) //uid:114
	fn subscribe(name: str) //uid:115
	fn unsubscribe(name: str) //uid:116
	fn updatePeriod(name: str,period: int32) //uid:117
	fn updatePrecision(name: str,precision: float32) //uid:118
	fn getCurrentPeriod() -> int32 //uid:119
	fn getCurrentPrecision() -> float32 //uid:120
	fn getMyPeriod(name: str) -> int32 //uid:121
	fn getMyPrecision(name: str) -> float32 //uid:122
	fn getSubscribersInfo() -> any //uid:123
	fn getOutputNames() -> Vec<str> //uid:124
	fn getEventList() -> Vec<str> //uid:125
	fn getMemoryKeyList() -> Vec<str> //uid:126
	fn isPaused() -> bool //uid:127
	fn pause(status: bool) //uid:128
	fn isProcessing() -> bool //uid:129
	fn setFrameRate(value: int32) -> bool //uid:130
	fn getFrameRate() -> int32 //uid:131
	fn setResolution(resolution: int32) -> bool //uid:132
	fn getResolution() -> int32 //uid:133
	fn setActiveCamera(cameraId: int32) -> bool //uid:134
	fn getActiveCamera() -> int32 //uid:135
	fn getTopOfBlob(distance: float32,frame: int32,applyVerticalOffset: bool) -> any //uid:136
	fn setBlobTrackingEnabled(status: bool) //uid:137
	fn isBlobTrackingEnabled() -> bool //uid:138
	fn setBlobTrackingDistance(distance: float32) //uid:139
	fn getBlobTrackingDistance() -> float32 //uid:140
	fn setVerticalOffset(value: float32) //uid:141
	fn getVerticalOffset() -> float32 //uid:142
	fn setDeltaDepthThreshold(value: float32) //uid:143
	fn getDeltaDepthThreshold() -> float32 //uid:144
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALLeds
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn createGroup(groupName: str,ledNames: Vec<str>) //uid:114
	fn earLedsSetAngle(degrees: int32,duration: float32,leaveOnAtEnd: bool) //uid:115
	fn fade(name: str,intensity: float32,duration: float32) //uid:116
	fn fadeListRGB(name: str,rgbList: any,timeList: any) //uid:117
	fn fadeRGB(name: str,red: float32,green: float32,blue: float32,duration: float32) //uid:118
	fn fadeRGB(name: str,colorName: str,duration: float32) //uid:119
	fn fadeRGB(name: str,rgb: int32,duration: float32) //uid:120
	fn _fadeRGB(name: str,red: float32,green: float32,blue: float32,duration: float32) //uid:121
	fn reset(name: str) //uid:122
	fn _setIntensityRatio(name: str,intensity: float32) //uid:123
	fn getIntensity(name: str) -> any //uid:124
	fn listLEDs() -> Vec<str> //uid:125
	fn listLED(name: str) -> Vec<str> //uid:126
	fn listGroup(groupName: str) -> Vec<str> //uid:127
	fn listGroups() -> Vec<str> //uid:128
	fn off(name: str) //uid:129
	fn on(name: str) //uid:130
	fn rasta(duration: float32) //uid:131
	fn rotateEyes(rgb: int32,timeForRotation: float32,totalDuration: float32) //uid:132
	fn randomEyes(duration: float32) //uid:133
	fn setIntensity(name: str,intensity: float32) //uid:134
	fn _blink() //uid:135
	fn _blink(P0: int32) //uid:136
	fn _setAnyLedIntensity(name: str,intensity: float32) //uid:137
	fn _startPassiveBlinking() //uid:138
	fn _startPassiveBlinking(eyeShadow: int32) //uid:139
	fn _stopPassiveBlinking() //uid:140
	fn _blinkWithShadow() //uid:141
	fn _setTimeBetweenTwoBlinks(min: float32,max: float32) //uid:142
	fn _startEyesRotationASR() //uid:143
	fn _stopEyesRotationASR() //uid:144
	fn _setEnabledEyesRotationASR(P0: bool) //uid:145
	fn _startEarsRotationASR() //uid:146
	fn _stopEarsRotationASR() //uid:147
	fn _setEnabledEarsRotationASR(P0: bool) //uid:148
	sig traceObject(P0: EventTrace) //uid:86
end
interface _LaunchpadPluginHardwareInfo
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	sig traceObject(P0: EventTrace) //uid:86
end
interface Knowledge
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn knowledgeBase() -> obj //uid:100
	fn editableKnowledgeGraph(P0: obj) -> obj //uid:101
	fn makeUniqueUrl() -> str //uid:102
	fn makeUrlFromName(P0: str) -> str //uid:103
	fn makeResourceNodeFromUrl(P0: str) -> ResourceNode //uid:104
	fn makeResourceNodeFromName(P0: str) -> ResourceNode //uid:105
	fn makeUniqueResourceNode() -> ResourceNode //uid:106
	fn makeEmptyResourceNode() -> ResourceNode //uid:107
	fn makeEmptyNode() -> Node //uid:108
	fn makeLocalizedStringNode(P0: str, P1: Locale) -> Node //uid:109
	fn makeStringNode(P0: str) -> Node //uid:110
	fn makeIntNode(P0: int32) -> Node //uid:111
	fn makeFloatNode(P0: float32) -> Node //uid:112
	fn makeDateTimeNode(P0: str) -> Node //uid:113
	fn makeDateNode(P0: str) -> Node //uid:114
	fn makeTimeNode(P0: str) -> Node //uid:115
	fn makeNodeFromResourceNode(P0: ResourceNode) -> Node //uid:116
	fn makeResourceTripleFromNames(P0: str, P1: str, P2: str) -> Triple //uid:117
	fn makeTripleFromNames(P0: str, P1: str, P2: Node) -> Triple //uid:118
	fn makeTripleFromNodes(P0: ResourceNode, P1: ResourceNode, P2: Node) -> Triple //uid:119
	fn matchTriple(P0: Triple, P1: Triple) -> bool //uid:120
	fn isTriplePartial(P0: Triple) -> bool //uid:121
	fn isNodeEmpty(P0: Node) -> bool //uid:122
	fn isNodeValid(P0: Node) -> bool //uid:123
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALPreferenceManager
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn getValue(domain: str,setting: str) -> any //uid:114
	fn setValue(domain: str,setting: str,value: any) //uid:115
	fn getValueList(domain: str) -> Vec<Vec<any>> //uid:116
	fn getDomainList() -> Vec<str> //uid:117
	fn removeValue(domain: str,setting: str) //uid:118
	fn setValues(values: Map<str,Map<str,any>>) //uid:119
	fn removeDomainValues(domain: str) //uid:120
	fn importPrefFile(domain: str,applicationName: str,filename: str,override: bool) //uid:121
	fn update() //uid:122
	fn _setFromCloud(domain: str,setting: str,value: any) //uid:123
	fn _restart(url: str,path: str) //uid:124
	fn _onConnectivityChanged(string: str,string: any,string: str) //uid:125
	fn _factoryReset() //uid:126
	sig traceObject(P0: EventTrace) //uid:86
	sig preferenceAdded(P0: str, P1: str, P2: any) //uid:127
	sig preferenceUpdated(P0: str, P1: str, P2: any) //uid:128
	sig preferenceRemoved(P0: str, P1: str) //uid:129
	sig preferenceDomainRemoved(P0: str) //uid:130
	sig preferencesSynchronized() //uid:131
end
interface ALVideoDevice
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn subscribeCamera(name: str,cameraIndex: int32,resolution: int32,colorSpace: int32,fps: int32) -> str //uid:114
	fn subscribeCameras(name: str,cameraIndexes: any,resolutions: any,colorSpaces: any,fps: int32) -> str //uid:115
	fn unsubscribe(nameId: str) -> bool //uid:116
	fn getSubscribers() -> any //uid:117
	fn getCameraIndexes() -> any //uid:118
	fn getActiveCamera() -> int32 //uid:119
	fn setActiveCamera(activeCamera: int32) -> bool //uid:120
	fn getCameraModel(cameraIndex: int32) -> int32 //uid:121
	fn isCameraSimulated(cameraIndex: int32) -> bool //uid:122
	fn getCameraName(cameraIndex: int32) -> str //uid:123
	fn getFrameRate(cameraIndex: int32) -> int32 //uid:124
	fn getResolution(cameraIndex: int32) -> int32 //uid:125
	fn getColorSpace(cameraIndex: int32) -> int32 //uid:126
	fn getHorizontalFOV(cameraIndex: int32) -> float32 //uid:127
	fn getVerticalFOV(cameraIndex: int32) -> float32 //uid:128
	fn getParameterList(cameraIndex: int32) -> Vec<int32> //uid:129
	fn getParameter(cameraIndex: int32,parameterId: int32) -> int32 //uid:130
	fn getParameterRange(cameraIndex: int32,parameterId: int32) -> any //uid:131
	fn getParameterInfo(cameraIndex: int32,parameterId: int32) -> any //uid:132
	fn setParameter(cameraIndex: int32,parameterId: int32,value: int32) -> bool //uid:133
	fn setParameterToDefault(cameraIndex: int32,parameterId: int32) -> bool //uid:134
	fn setCameraCalibration(cameraIndex: int32,filenames: Vec<str>) -> bool //uid:135
	fn setAllParametersToDefault(cameraIndex: int32) -> bool //uid:136
	fn openCamera(P0: int32) -> bool //uid:137
	fn closeCamera(P0: int32) -> bool //uid:138
	fn isCameraOpen(P0: int32) -> bool //uid:139
	fn startCamera(P0: int32) -> bool //uid:140
	fn stopCamera(P0: int32) -> bool //uid:141
	fn isCameraStarted(P0: int32) -> bool //uid:142
	fn resetCamera(P0: int32) -> bool //uid:143
	fn startFrameGrabber(cameraIndex: int32) -> bool //uid:144
	fn stopFrameGrabber(cameraIndex: int32) -> bool //uid:145
	fn isFrameGrabberOff(cameraIndex: int32) -> bool //uid:146
	fn hasDepthCamera() -> bool //uid:147
	fn getFrameRate(name: str) -> int32 //uid:148
	fn setFrameRate(name: str,frameRate: int32) -> bool //uid:149
	fn getActiveCamera(name: str) -> int32 //uid:150
	fn setActiveCamera(name: str,cameraIndex: int32) -> bool //uid:151
	fn getResolution(name: str) -> int32 //uid:152
	fn setResolution(name: str,resolution: int32) -> bool //uid:153
	fn getColorSpace(name: str) -> int32 //uid:154
	fn setColorSpace(name: str,colorSpace: int32) -> bool //uid:155
	fn getCameraParameterList(name: str) -> Vec<int32> //uid:156
	fn getCameraParameter(name: str,parameterId: int32) -> int32 //uid:157
	fn getCameraParameterRange(name: str,parameterId: int32) -> any //uid:158
	fn getCameraParameterInfo(name: str,parameterId: int32) -> any //uid:159
	fn setCameraParameter(name: str,parameterId: int32,value: int32) -> bool //uid:160
	fn setCameraParameterToDefault(name: str,parameterId: int32) -> bool //uid:161
	fn setAllCameraParametersToDefault(name: str) -> bool //uid:162
	fn getDirectRawImageLocal(name: str) -> unknown //uid:163
	fn getDirectRawImageRemote(name: str) -> any //uid:164
	fn releaseDirectRawImage(name: str) -> bool //uid:165
	fn getImageLocal(name: str) -> unknown //uid:166
	fn getImageRemote(name: str) -> any //uid:167
	fn releaseImage(name: str) -> bool //uid:168
	fn getActiveCameras(name: str) -> any //uid:169
	fn setActiveCameras(name: str,cameraIndexes: any) -> any //uid:170
	fn getResolutions(name: str) -> any //uid:171
	fn setResolutions(name: str,resolutions: any) -> any //uid:172
	fn getColorSpaces(name: str) -> any //uid:173
	fn setColorSpaces(name: str,colorSpaces: any) -> any //uid:174
	fn getCamerasParameter(name: str,parameterId: int32) -> any //uid:175
	fn setCamerasParameter(name: str,parameterId: int32,values: any) -> any //uid:176
	fn setCamerasParameterToDefault(name: str,parameterId: int32) -> any //uid:177
	fn getDirectRawImagesLocal(name: str) -> any //uid:178
	fn getDirectRawImagesRemote(name: str) -> any //uid:179
	fn releaseDirectRawImages(name: str) -> any //uid:180
	fn getImagesLocal(name: str) -> any //uid:181
	fn getImagesRemote(name: str) -> any //uid:182
	fn releaseImages(name: str) -> any //uid:183
	fn recordVideo(id: str,path: str,totalNumber: int32,period: int32) -> bool //uid:184
	fn stopVideo(id: str) -> bool //uid:185
	fn getAngularPositionFromImagePosition(P0: int32, P1: Vec<float32>) -> Vec<float32> //uid:186
	fn getImagePositionFromAngularPosition(P0: int32, P1: Vec<float32>) -> Vec<float32> //uid:187
	fn getAngularSizeFromImageSize(P0: int32, P1: Vec<float32>) -> Vec<float32> //uid:188
	fn getImageSizeFromAngularSize(P0: int32, P1: Vec<float32>) -> Vec<float32> //uid:189
	fn getImageInfoFromAngularInfo(P0: int32, P1: Vec<float32>) -> Vec<float32> //uid:190
	fn getImageInfoFromAngularInfoWithResolution(P0: int32, P1: Vec<float32>, P2: int32) -> Vec<float32> //uid:191
	fn putImage(cameraIndex: int32,timeStamp: any,width: int32,height: int32,colorSpace: int32,imageBuffer: any) -> bool //uid:192
	fn getExpectedImageParameters(cameraIndex: int32) -> any //uid:193
	fn _getExternalBrightness(cameraIndex: int32) -> int32 //uid:194
	fn onClientDisconnected(eventName: str,eventContents: any,message: str) //uid:195
	fn subscribe(gvmName: str,resolution: int32,colorSpace: int32,fps: int32) -> str //uid:196
	fn unsubscribeAllInstances(id: str) //uid:197
	fn getVIMResolution() -> int32 //uid:198
	fn getVIMColorSpace() -> int32 //uid:199
	fn getVIMFrameRate() -> int32 //uid:200
	fn getGVMResolution(P0: str) -> int32 //uid:201
	fn getGVMColorSpace(P0: str) -> int32 //uid:202
	fn getGVMFrameRate(P0: str) -> int32 //uid:203
	fn getCameraModelID() -> int32 //uid:204
	fn setParam(param: int32,newValue: int32) //uid:205
	fn setParam(param: int32,newValue: int32,cameraIndex: int32) //uid:206
	fn getParam(param: int32) -> int32 //uid:207
	fn getParam(param: int32,cameraIndex: int32) -> int32 //uid:208
	fn setParamDefault(param: int32) //uid:209
	fn getAngPosFromImgPos(imgPos: Vec<float32>) -> Vec<float32> //uid:210
	fn getImgPosFromAngPos(angPos: Vec<float32>) -> Vec<float32> //uid:211
	fn getAngSizeFromImgSize(imgSize: Vec<float32>) -> Vec<float32> //uid:212
	fn getImgSizeFromAngSize(angSize: Vec<float32>) -> Vec<float32> //uid:213
	fn getImgInfoFromAngInfo(angInfo: Vec<float32>) -> Vec<float32> //uid:214
	fn getImgInfoFromAngInfoWithRes(angInfo: Vec<float32>,resolution: int32) -> Vec<float32> //uid:215
	fn resolutionToSizes(resolution: int32) -> any //uid:216
	fn sizesToResolution(width: int32,height: int32) -> int32 //uid:217
	fn getExpectedImageParameters() -> any //uid:218
	fn setSimCamInputSize(width: int32,height: int32) -> bool //uid:219
	fn putImage(imageBuffer: any) -> bool //uid:220
	fn putImage(cameraIndex: int32,width: int32,height: int32,imageBuffer: any) -> bool //uid:221
	fn startFrameGrabber() -> bool //uid:222
	fn stopFrameGrabber() -> bool //uid:223
	fn isFrameGrabberOff() -> int32 //uid:224
	fn getHorizontalAperture(cameraIndex: int32) -> float32 //uid:225
	fn getVerticalAperture(cameraIndex: int32) -> float32 //uid:226
	sig traceObject(P0: EventTrace) //uid:86
end
interface _LaunchpadPluginPosture
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn _onPostureFamilyChanged(name: str,valuePostureFamilyChanged: any,message: str) //uid:114
	fn _onPostureChanged(name: str,valuePostureChanged: any,message: str) //uid:115
	fn _onFall(name: str,valueRobotHasFallen: any,message: str) //uid:116
	fn _onPush(name: str,valuePushRecovery: any,message: str) //uid:117
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALPythonBridge
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn eval(stringToEvaluate: str) -> str //uid:114
	fn evalReturn(stringToEvaluate: str) -> any //uid:115
	fn evalFull(stringToEvaluate: str) -> any //uid:116
	sig traceObject(P0: EventTrace) //uid:86
end
interface _PeopleConverter
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn setImplParam(P0: any) //uid:114
	fn start(P0: int32) //uid:115
	fn stopConverter() //uid:116
	fn convert(P0: any) -> any //uid:117
	fn convertEvent(P0: str, P1: any) //uid:118
	fn updateDetectorPeriod(P0: int32) //uid:119
	fn getDetectorPeriod() -> int32 //uid:120
	sig traceObject(P0: EventTrace) //uid:86
end
interface _ALTargetManager
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn start() //uid:114
	fn stopManager() //uid:115
	fn addTarget(pTargetname: str,pParam: any) //uid:116
	fn removeTarget(pTargetname: str) //uid:117
	fn removeTargets(pTargetnamearray: Vec<str>) //uid:118
	fn removeAllTargets() //uid:119
	fn setActiveTarget(pTargetname: str) //uid:120
	fn setActiveEvent(pTargetname: str) //uid:121
	fn getActiveTarget() -> str //uid:122
	fn getActiveTargetPosition() -> Vec<float32> //uid:123
	fn getEventName() -> str //uid:124
	fn getSecondEventName() -> str //uid:125
	fn isTargetManaged(pTargetname: str) -> bool //uid:126
	fn getTargetIds(pTargetname: str) -> Vec<int32> //uid:127
	fn getSupportedTargets() -> Vec<str> //uid:128
	fn getRegisteredTargets() -> Vec<str> //uid:129
	fn setExtractorPeriod(pTarget: str,pPeriod: int32) //uid:130
	fn getExtractorPeriod(pTarget: str) -> int32 //uid:131
	fn _raiseEvent(key: str,value: any) //uid:132
	fn _genericEvent(P0: str, P1: any) //uid:133
	sig traceObject(P0: EventTrace) //uid:86
end
interface _ALExpressiveness
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn _updateNotification(P0: str, P1: any, P2: any) //uid:114
	fn _setNotificationEnabled(enable: bool) //uid:115
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALMotionRecorder
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn startInteractiveRecording(jointsToRecord: Vec<str>,nbPoses: int32,extensionAllowed: bool,mode: int32) //uid:114
	fn startPeriodicRecording(jointsToRecord: Vec<str>,nbPoses: int32,extensionAllowed: bool,timeStep: float32,jointsToReplay: Vec<str>,replayData: any) //uid:115
	fn stopAndGetRecording() -> any //uid:116
	fn dataChanged(dataName: str,data: any,message: str) //uid:117
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALSpeakingMovement
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn setEnabled(P0: bool) //uid:100
	fn isEnabled() -> bool //uid:101
	fn isRunning() -> bool //uid:102
	fn setMode(P0: str) //uid:103
	fn getMode() -> str //uid:104
	fn addTagsToWords(P0: any) //uid:105
	fn resetTagsToWords() //uid:106
	fn _reset() //uid:107
	fn _getConfig() -> SpeakingMovementConfig //uid:108
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALSensors
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn subscribe(name: str,period: int32,precision: float32) //uid:114
	fn subscribe(name: str) //uid:115
	fn unsubscribe(name: str) //uid:116
	fn updatePeriod(name: str,period: int32) //uid:117
	fn updatePrecision(name: str,precision: float32) //uid:118
	fn getCurrentPeriod() -> int32 //uid:119
	fn getCurrentPrecision() -> float32 //uid:120
	fn getMyPeriod(name: str) -> int32 //uid:121
	fn getMyPrecision(name: str) -> float32 //uid:122
	fn getSubscribersInfo() -> any //uid:123
	fn getOutputNames() -> Vec<str> //uid:124
	fn getEventList() -> Vec<str> //uid:125
	fn getMemoryKeyList() -> Vec<str> //uid:126
	fn run() //uid:127
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALTouch
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn _setTouchConfig(config: any) //uid:114
	fn getSensorList() -> Vec<str> //uid:115
	fn getStatus() -> any //uid:116
	fn _createGroup(groupName: str,jointNames: Vec<str>) -> bool //uid:117
	fn _deleteGroup(groupName: str) -> bool //uid:118
	fn _getGroupList() -> Vec<str> //uid:119
	fn _getDetectionTypeName(type_0: int32) -> str //uid:120
	fn _robotFallingCallback(P0: str, P1: any, P2: any) //uid:121
	fn _robotFallenCallback(P0: str, P1: any, P2: any) //uid:122
	fn _diagnosisCallback(P0: str, P1: any, P2: any) //uid:123
	fn _temperatureCallback(P0: str, P1: any, P2: any) //uid:124
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALBehaviorManager
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn preloadBehavior(behavior: str) -> bool //uid:114
	fn startBehavior(behavior: str) //uid:115
	fn runBehavior(behavior: str) //uid:116
	fn stopBehavior(behavior: str) //uid:117
	fn stopAllBehaviors() //uid:118
	fn isBehaviorInstalled(name: str) -> bool //uid:119
	fn isBehaviorPresent(prefixedBehavior: str) -> bool //uid:120
	fn getBehaviorNames() -> Vec<str> //uid:121
	fn getUserBehaviorNames() -> Vec<str> //uid:122
	fn getSystemBehaviorNames() -> Vec<str> //uid:123
	fn getInstalledBehaviors() -> Vec<str> //uid:124
	fn getBehaviorsByTag(tag: str) -> Vec<str> //uid:125
	fn isBehaviorRunning(behavior: str) -> bool //uid:126
	fn isBehaviorLoaded(behavior: str) -> bool //uid:127
	fn getRunningBehaviors() -> Vec<str> //uid:128
	fn getLoadedBehaviors() -> Vec<str> //uid:129
	fn getTagList() -> Vec<str> //uid:130
	fn getBehaviorTags(behavior: str) -> Vec<str> //uid:131
	fn getBehaviorNature(behavior: str) -> str //uid:132
	fn _getBehaviorRelativePath(behaviorId: str) -> str //uid:133
	fn _getPackageUid(behaviorId: str) -> str //uid:134
	fn addDefaultBehavior(behavior: str) //uid:135
	fn removeDefaultBehavior(behavior: str) //uid:136
	fn getDefaultBehaviors() -> Vec<str> //uid:137
	fn playDefaultProject() //uid:138
	fn _onDataChanged(dataName: str,dataValue: any,message: str) //uid:139
	fn _getBehaviorFrameManagerId(name: str) -> str //uid:140
	fn resolveBehaviorName(name: str) -> str //uid:141
	sig traceObject(P0: EventTrace) //uid:86
	sig behaviorsAdded(P0: Vec<str>) //uid:142
	sig behaviorsRemoved(P0: Vec<str>) //uid:143
	sig behaviorLoaded(P0: str) //uid:144
	sig behaviorStarted(P0: str) //uid:145
	sig behaviorStopped(P0: str) //uid:146
	sig behaviorFailed(P0: str, P1: str, P2: str) //uid:147
end
interface ALPeoplePerception
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn subscribe(name: str,period: int32,precision: float32) //uid:114
	fn subscribe(name: str) //uid:115
	fn unsubscribe(name: str) //uid:116
	fn updatePeriod(name: str,period: int32) //uid:117
	fn updatePrecision(name: str,precision: float32) //uid:118
	fn getCurrentPeriod() -> int32 //uid:119
	fn getCurrentPrecision() -> float32 //uid:120
	fn getMyPeriod(name: str) -> int32 //uid:121
	fn getMyPrecision(name: str) -> float32 //uid:122
	fn getSubscribersInfo() -> any //uid:123
	fn getOutputNames() -> Vec<str> //uid:124
	fn getEventList() -> Vec<str> //uid:125
	fn getMemoryKeyList() -> Vec<str> //uid:126
	fn isPaused() -> bool //uid:127
	fn pause(status: bool) //uid:128
	fn isProcessing() -> bool //uid:129
	fn getMaximumDetectionRange() -> float32 //uid:130
	fn getMinimumBodyHeight() -> float32 //uid:131
	fn getMaximumBodyHeight() -> float32 //uid:132
	fn getTimeBeforePersonDisappears() -> float32 //uid:133
	fn getTimeBeforeVisiblePersonDisappears() -> float32 //uid:134
	fn isFaceDetectionEnabled() -> bool //uid:135
	fn isFastModeEnabled() -> bool //uid:136
	fn isGraphicalDisplayEnabled() -> bool //uid:137
	fn isMovementDetectionEnabled() -> bool //uid:138
	fn resetPopulation() //uid:139
	fn setFastModeEnabled(enable: bool) //uid:140
	fn setGraphicalDisplayEnabled(enable: bool) //uid:141
	fn setMaximumDetectionRange(range_0: float32) //uid:142
	fn setMinimumBodyHeight(height: float32) //uid:143
	fn setMaximumBodyHeight(height: float32) //uid:144
	fn setMovementDetectionEnabled(enable: bool) //uid:145
	fn setTimeBeforePersonDisappears(seconds: float32) //uid:146
	fn setTimeBeforeVisiblePersonDisappears(seconds: float32) //uid:147
	fn _getDetectionMode() -> str //uid:148
	fn _setDetectionMode(mode: str) //uid:149
	fn setFaceDetectionEnabled(P0: bool) //uid:150
	sig traceObject(P0: EventTrace) //uid:86
	sig maximumDetectionRangeChanged(P0: float32) //uid:151
	sig justArrived(P0: int32) //uid:152
	sig justLeft(P0: int32) //uid:153
	sig populationReset() //uid:154
end
interface _LaunchpadPluginTiming
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	sig traceObject(P0: EventTrace) //uid:86
end
interface SharedTopics
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn topicsWithLocale(P0: Locale) -> Vec<obj> //uid:100
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALFsr
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALListeningMovement
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn setEnabled(P0: bool) //uid:100
	fn isEnabled() -> bool //uid:101
	fn isRunning() -> bool //uid:102
	fn _setEnabled(P0: bool, P1: str) //uid:103
	fn _isEnabled(P0: str) -> bool //uid:104
	sig traceObject(P0: EventTrace) //uid:86
end
interface _UserIdentification
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn match(P0: int32) -> RecognitionResult //uid:100
	fn match(P0: str) -> RecognitionResult //uid:101
	fn store(P0: int32, P1: uint64) -> int32 //uid:102
	fn store(P0: str, P1: uint64) -> int32 //uid:103
	fn makePermanent(P0: uint64) -> bool //uid:104
	fn makeTemporary(P0: uint64) -> bool //uid:105
	fn remove(P0: uint64) -> bool //uid:106
	fn clear() -> bool //uid:107
	fn isPermanent(P0: uint64) -> bool //uid:108
	fn isTemporary(P0: uint64) -> bool //uid:109
	fn getStoredUsers() -> Vec<uint64> //uid:110
	fn checkPhotoForIdentification(P0: str) -> int32 //uid:111
	fn _getImageMTM(P0: uint64) -> str //uid:112
	fn _printDatabase() //uid:113
	sig traceObject(P0: EventTrace) //uid:86
	sig faceRecognitionThreshold(P0: float32) //uid:114
	sig maxRetryRecognition(P0: int32) //uid:115
	sig retryRecognitionDelay(P0: uint64) //uid:116
	sig enableImageFiltering(P0: bool) //uid:117
	sig maximumHeadYawDegree(P0: float32) //uid:118
	sig maximumHeadPitchDegree(P0: float32) //uid:119
	sig maximumHeadRollDegree(P0: float32) //uid:120
	sig filterNonFrontalFaces(P0: bool) //uid:121
	sig minimumHeadSizePixel(P0: int32) //uid:122
	sig minimumFacialPartsAvgConfidence(P0: float32) //uid:123
	sig filterCameraMovements(P0: bool) //uid:124
	prop faceRecognitionThreshold(param: float32) //uid:114
	prop maxRetryRecognition(param: int32) //uid:115
	prop retryRecognitionDelay(param: uint64) //uid:116
	prop enableImageFiltering(param: bool) //uid:117
	prop maximumHeadYawDegree(param: float32) //uid:118
	prop maximumHeadPitchDegree(param: float32) //uid:119
	prop maximumHeadRollDegree(param: float32) //uid:120
	prop filterNonFrontalFaces(param: bool) //uid:121
	prop minimumHeadSizePixel(param: int32) //uid:122
	prop minimumFacialPartsAvgConfidence(param: float32) //uid:123
	prop filterCameraMovements(param: bool) //uid:124
end
interface ALRobotMood
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn getState() -> RobotState //uid:100
	fn getFullState() -> RobotFullState //uid:101
	fn _useCocoroEmotion(P0: bool) //uid:102
	fn _pushState(P0: str, P1: float32, P2: str, P3: float32) //uid:103
	sig traceObject(P0: EventTrace) //uid:86
	sig state(P0: RobotState) //uid:104
	sig fullState(P0: RobotFullState) //uid:105
	sig stateChanged(P0: RobotState) //uid:106
	sig pleasure(P0: str) //uid:107
	sig excitement(P0: str) //uid:108
	sig pleasureChanged(P0: str) //uid:109
	sig excitementChanged(P0: str) //uid:110
	prop state(param: RobotState) //uid:104
	prop fullState(param: RobotFullState) //uid:105
	prop pleasure(param: str) //uid:107
	prop excitement(param: str) //uid:108
end
interface ALNavigation
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn navigateTo(x: float32,y: float32) -> bool //uid:114
	fn navigateTo(x: float32,y: float32,theta: float32) -> bool //uid:115
	fn stopNavigateTo() //uid:116
	fn _isNavigateToRunning() -> bool //uid:117
	fn _getTrajectory() -> any //uid:118
	fn moveAlong(trajectory: any) -> bool //uid:119
	fn _moveAlong(moveAlongScale: float32,allowMove: bool,trajectory: any) -> bool //uid:120
	fn getFreeZone(desiredRadius: float32,maximumDisplacement: float32) -> any //uid:121
	fn findFreeZone(desiredRadius: float32,maximumDisplacement: float32) -> any //uid:122
	fn _getFreeZoneCenter(P0: float64) -> any //uid:123
	fn _getFreeZoneWithConstraints(P0: float32) -> any //uid:124
	fn startFreeZoneUpdate() //uid:125
	fn _startFreeZoneUpdateWithTimeout(P0: int32) //uid:126
	fn stopAndComputeFreeZone(desiredRadius: float32,maximumDisplacement: float32) -> any //uid:127
	fn _moveToFreeZoneCenter() //uid:128
	fn _stopFreeZoneTasks() //uid:129
	fn _eventMoveFailedCallback() //uid:130
	fn _setFreeZoneTimeout(P0: int32) //uid:131
	fn explore(P0: float32) //uid:132
	fn stopExploration() //uid:133
	fn startMapping() //uid:134
	fn _quickStartMapping() //uid:135
	fn getRobotPositionInMap() -> any //uid:136
	fn getExplorationPath() -> any //uid:137
	fn _getTopoMap() -> any //uid:138
	fn _getExplorationParams() -> any //uid:139
	fn _topoNavigateTo(P0: int32) -> bool //uid:140
	fn loadExploration(P0: str) -> bool //uid:141
	fn navigateToInMap(P0: float32, P1: float32) -> bool //uid:142
	fn computePathInMap(P0: unknown) -> Vec<unknown> //uid:143
	fn _getScanHoles() -> any //uid:144
	fn _getTargetScanHoleId() -> int32 //uid:145
	fn _getPlanningCostMap() -> any //uid:146
	fn _getTopoNodeOccupancyMap(P0: int32) -> any //uid:147
	fn _saveAggregatedMap() //uid:148
	fn _computeAggregatedMap() -> bool //uid:149
	fn saveExploration() -> str //uid:150
	fn _saveRelocalizationDebug() -> str //uid:151
	fn setDefaultExploration(P0: str) //uid:152
	fn getMetricalMap() -> any //uid:153
	fn _getLocalizationDebug() -> any //uid:154
	fn relocalizeInMapWithHint(P0: float32, P1: float32, P2: float32) //uid:155
	fn _getWifiScores(P0: bool) -> any //uid:156
	fn _getWifiResult() -> any //uid:157
	fn _relocalizeWithWifi() -> any //uid:158
	fn relocalizeInMap() //uid:159
	fn _quickRelocalizeInMap() //uid:160
	fn _getVisionResult() -> any //uid:161
	fn _getVisionDebugResult() -> any //uid:162
	fn _saveVisionResult() -> str //uid:163
	fn _setKeypointNumberThreshold(P0: int32) //uid:164
	fn _computeVisionResult() -> any //uid:165
	fn _useVisionInExploration(P0: bool) //uid:166
	fn _useWifiInExploration(P0: bool) //uid:167
	fn startLocalization() //uid:168
	fn stopLocalization() //uid:169
	fn _startTopoMapper() //uid:170
	fn _stopTopoMapper() //uid:171
	fn _resetTopoMap() //uid:172
	fn _setNavigateToInMapAvoidanceDistance(P0: float32) //uid:173
	fn _startPeopleLooper() //uid:174
	fn _stopPeopleLooper() //uid:175
	fn _getPeopleVector() -> Vec<TimestampedPosition3D> //uid:176
	fn _isPointInMap(P0: float32, P1: float32) -> bool //uid:177
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALLocalization
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn getMessageFromErrorCode(P0: int32) -> str //uid:114
	fn stopAll() //uid:115
	fn _safetyStop() //uid:116
	fn learnHome() -> int32 //uid:117
	fn isInCurrentHome() -> bool //uid:118
	fn getCurrentPanoramaDescriptor() -> any //uid:119
	fn getFrame(P0: int32, P1: str) -> any //uid:120
	fn clear(pDirectory: str) -> int32 //uid:121
	fn load(pDirectory: str) -> int32 //uid:122
	fn save(pDirectory: str) -> int32 //uid:123
	fn isRelocalizationRequired() -> bool //uid:124
	fn getDriftPercentages() -> Vec<float32> //uid:125
	fn isDataAvailable() -> bool //uid:126
	fn getRobotPosition() -> Vec<float32> //uid:127
	fn getRobotPosition(P0: bool) -> Vec<float32> //uid:128
	fn getRobotOrientation(P0: bool) -> any //uid:129
	fn getRobotOrientation() -> any //uid:130
	fn isInGivenZone(P0: float32, P1: float32, P2: float32, P3: float32) -> any //uid:131
	fn _launchLocalization() -> Vec<float32> //uid:132
	fn goToHome() -> int32 //uid:133
	fn goToPosition(P0: Vec<float32>) -> int32 //uid:134
	fn _getSavingDirectories() -> Vec<str> //uid:135
	fn _getLoadedDirectory() -> str //uid:136
	fn _handlePush() //uid:137
	sig traceObject(P0: EventTrace) //uid:86
end
interface LogManager
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn log(P0: Vec<LogMessage>) //uid:100
	fn createListener() -> obj //uid:101
	fn getListener() -> obj //uid:102
	fn addProvider(P0: obj) -> int32 //uid:103
	fn removeProvider(P0: int32) //uid:104
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALRobotModel
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn getConfig() -> str //uid:114
	fn _getConfigMap() -> Map<str,any> //uid:115
	fn _isRobocup() -> bool //uid:116
	fn _getRobotModel() -> int32 //uid:117
	fn _getRobotType() -> int32 //uid:118
	fn getRobotType() -> str //uid:119
	fn _getRobotTypeString() -> str //uid:120
	fn hasArms() -> bool //uid:121
	fn hasHands() -> bool //uid:122
	fn hasLegs() -> bool //uid:123
	fn _setConfigFromConfigXml(fileName: str) //uid:124
	fn _getMicrophoneConfig() -> int32 //uid:125
	fn _hasTouchSensorInHands() -> bool //uid:126
	fn _hasTablet() -> bool //uid:127
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALBodyTemperature
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn getTemperatureDiagnosis() -> any //uid:114
	fn setEnableNotifications(enable: bool) //uid:115
	fn areNotificationsEnabled() -> bool //uid:116
	fn _getDeviceTemperature(deviceName: str) -> int32 //uid:117
	fn _getDeviceStatus(deviceName: str) -> int32 //uid:118
	fn _getTemperatureStatus() -> any //uid:119
	fn _setEnableDump(status: bool) //uid:120
	fn _isDumpEnabled() -> bool //uid:121
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALBattery
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn getBatteryCharge() -> int32 //uid:114
	sig traceObject(P0: EventTrace) //uid:86
end
interface _LaunchpadPluginTemperature
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	sig traceObject(P0: EventTrace) //uid:86
end
interface _RoundSearcher
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn startEvent() //uid:114
	fn stopSearcher() //uid:115
	fn search(P0: any) //uid:116
	fn searchEvent(P0: str, P1: any) //uid:117
	fn _stopMove() //uid:118
	fn setUseWholeBodyLookAt(P0: bool) //uid:119
	fn setFractionMaxSpeed(P0: float32) //uid:120
	fn getFractionMaxSpeed() -> float32 //uid:121
	fn initialize() //uid:122
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALModularity
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn getModularity() -> unknown //uid:114
	fn loadProgram(program: str) -> bool //uid:115
	fn loadProgramFromFile(P0: str) -> bool //uid:116
	fn getData(sink: str) -> any //uid:117
	fn getLastData(sink: str) -> any //uid:118
	fn getImageLocal(sink: str) -> unknown //uid:119
	fn getImageRemote(sink: str) -> any //uid:120
	fn getFilters() -> any //uid:121
	fn getFilterDescription(name: str) -> str //uid:122
	fn getFilterInputs(name: str) -> any //uid:123
	fn getFilterOutputs(name: str) -> any //uid:124
	fn deleteFilter(name: str) -> bool //uid:125
	fn getSources() -> Vec<str> //uid:126
	fn isSourceBinded(name: str) -> bool //uid:127
	fn getSourceFrequency(name: str) -> float32 //uid:128
	fn getSourceData(source: str) -> any //uid:129
	fn getSourceData(P0: str, P1: int64) -> any //uid:130
	fn setData(name: str,value: any) //uid:131
	fn deleteSource(name: str) -> bool //uid:132
	fn getRobotHeightOffset() -> float32 //uid:133
	fn setRobotHeightOffset(heightOffset: float32) //uid:134
	fn getProcesses() -> Vec<str> //uid:135
	fn isProcesses(name: str) -> bool //uid:136
	fn getProcessDescription(name: str) -> str //uid:137
	fn getProcessSources(name: str) -> Vec<str> //uid:138
	fn getProcessSinks(name: str) -> Vec<str> //uid:139
	fn getProcessAggregatedSinks(name: str) -> Vec<str> //uid:140
	fn getProcessPriority(name: str) -> int32 //uid:141
	fn getProcessFrequency(name: str) -> float32 //uid:142
	fn setProcessPriority(name: str,priority: uint32) //uid:143
	fn setProcessFrequency(name: str,frequency: float32) //uid:144
	fn setProcessTolerance(name: str,tolerance: int64) //uid:145
	fn resetProcess(name: str) -> bool //uid:146
	fn isProcessEnable(name: str) -> bool //uid:147
	fn isProcessZombie(name: str) -> bool //uid:148
	fn enableProcess(name: str) -> bool //uid:149
	fn disableProcess(name: str) -> bool //uid:150
	fn deleteProcess(name: str) -> bool //uid:151
	fn getScheduledJobs() -> Vec<str> //uid:152
	fn startScheduler() -> bool //uid:153
	fn stopScheduler() -> bool //uid:154
	fn getInstrumentationResult() -> str //uid:155
	fn getDotGraph(filter: str,level: int32) -> any //uid:156
	fn _startMotionWorker() //uid:157
	fn _stopMotionWorker() //uid:158
	fn _setMotionSource(sourceName: str,data: Vec<float32>) //uid:159
	fn _setMotionSources(sourceNameList: Vec<str>,dataList: Vec<Vec<float32>>) //uid:160
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALAutonomousMoves
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn startSmallDisplacements() //uid:114
	fn stopSmallDisplacements() //uid:115
	fn _moveForward() //uid:116
	fn _moveBackward() //uid:117
	fn _moveSides() //uid:118
	fn _moveRandomly() //uid:119
	fn setExpressiveListeningEnabled(enable: bool) //uid:120
	fn getExpressiveListeningEnabled() -> bool //uid:121
	fn setBackgroundStrategy(strategy: str) //uid:122
	fn getBackgroundStrategy() -> str //uid:123
	fn _enableJapaneseBackgroundPosture() //uid:124
	fn _enableDefaultBackgroundPosture() //uid:125
	fn _disableBackgroundPosture() //uid:126
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALDebug
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn _stopOneThread() //uid:100
	fn _dumpPythonTraces() -> str //uid:101
	fn _makeMinidump() //uid:102
	fn _probesInit(P0: bool, P1: int32) //uid:103
	fn _probesRecordSnapshot() -> bool //uid:104
	fn _probesSetTrigger(P0: str, P1: str, P2: str) //uid:105
	fn _probesRemoveTrigger(P0: str) //uid:106
	fn _probesStartTrigger() //uid:107
	fn _probesStopTrigger() //uid:108
	sig traceObject(P0: EventTrace) //uid:86
end
interface ALExpressionWatcher
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn _start() //uid:100
	fn _stop() //uid:101
	fn _isStarted() -> bool //uid:102
	fn add(expression: str,report_mode: int32) -> obj //uid:103
	fn _list() -> Vec<obj> //uid:104
	fn _listReactor() -> Map<uint32,str> //uid:105
	fn _purgeAll() //uid:106
	sig traceObject(P0: EventTrace) //uid:86
end
interface ActuationPrivate
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn makeAnimation(P0: Vec<str>) -> obj //uid:100
	fn makeCroppedAnimation(P0: obj, P1: uint64, P2: uint64) -> obj //uid:101
	fn makeAnimate(P0: obj) -> obj //uid:102
	fn makeGoTo() -> obj //uid:103
	fn makeGlobalGoTo(P0: obj) -> obj //uid:104
	fn makeMoveTo() -> obj //uid:105
	fn makeMixedGoTo() -> obj //uid:106
	fn makeLookAt(P0: obj, P1: bool, P2: float32) -> obj //uid:107
	sig traceObject(P0: EventTrace) //uid:86
end
interface _MotionMove
	fn registerEvent(P0: uint32, P1: uint32, P2: uint64) -> uint64 //uid:0
	fn unregisterEvent(P0: uint32, P1: uint32, P2: uint64) //uid:1
	fn metaObject(P0: uint32) -> MetaObject //uid:2
	fn terminate(P0: uint32) //uid:3
	fn property(P0: any) -> any //uid:5
	fn setProperty(P0: any, P1: any) //uid:6
	fn properties() -> Vec<str> //uid:7
	fn registerEventWithSignature(P0: uint32, P1: uint32, P2: uint64, P3: str) -> uint64 //uid:8
	fn isStatsEnabled() -> bool //uid:80
	fn enableStats(P0: bool) //uid:81
	fn stats() -> Map<uint32,MethodStatistics> //uid:82
	fn clearStats() //uid:83
	fn isTraceEnabled() -> bool //uid:84
	fn enableTrace(P0: bool) //uid:85
	fn exit() //uid:100
	fn __pCall(P0: uint32, P1: Vec<any>) -> int32 //uid:101
	fn pCall(P0: any) -> any //uid:102
	fn version() -> str //uid:103
	fn ping() -> bool //uid:104
	fn getMethodList() -> Vec<str> //uid:105
	fn getMethodHelp(methodName: str) -> any //uid:106
	fn getModuleHelp() -> any //uid:107
	fn wait(id: int32,timeoutPeriod: int32) -> bool //uid:108
	fn wait(id: int32) //uid:109
	fn isRunning(id: int32) -> bool //uid:110
	fn stop(id: int32) //uid:111
	fn getBrokerName() -> str //uid:112
	fn getUsage(name: str) -> str //uid:113
	fn setParam(P0: any) //uid:114
	fn start() //uid:115
	fn stopMove() //uid:116
	fn stopWithoutStopMove() //uid:117
	fn move(P0: any) //uid:118
	fn moveEvent(P0: str, P1: any) //uid:119
	fn _stopMoveEvent() //uid:120
	sig traceObject(P0: EventTrace) //uid:86
end
struct MetaMethodParameter
	name: str
	description: str
end
struct MetaMethod
	uid: uint32
	returnSignature: str
	name: str
	parametersSignature: str
	description: str
	parameters: Vec<MetaMethodParameter>
	returnDescription: str
end
struct MetaSignal
	uid: uint32
	name: str
	signature: str
end
struct MetaProperty
	uid: uint32
	name: str
	signature: str
end
struct MetaObject
	methods: Map<uint32,MetaMethod>
	signals: Map<uint32,MetaSignal>
	properties: Map<uint32,MetaProperty>
	description: str
end
struct MinMaxSum
	minValue: float32
	maxValue: float32
	cumulatedValue: float32
end
struct MethodStatistics
	count: uint32
	wall: MinMaxSum
	user: MinMaxSum
	system: MinMaxSum
end
struct timeval
	tv_sec: int64
	tv_usec: int64
end
struct EventTrace
	id: uint32
	kind: int32
	slotId: uint32
	arguments: any
	timestamp: timeval
	userUsTime: int64
	systemUsTime: int64
	callerContext: uint32
	calleeContext: uint32
end
struct PackageInfo2
	uuid: str
	version: str
	author: str
	channel: str
	organization: str
	date: str
	typeVersion: str
	installer: str
	path: str
	elems: Map<str,any>
end
struct BehaviorInfo
	path: str
	nature: str
	langToName: Map<str,str>
	langToDesc: Map<str,str>
	categories: str
	langToTags: Map<str,Vec<str>>
	langToTriggerSentences: Map<str,Vec<str>>
	langToLoadingResponses: Map<str,Vec<str>>
	purposeToCondition: Map<str,Vec<str>>
	permissions: Vec<str>
	userRequestable: bool
end
struct LanguageInfo
	path: str
	engineName: str
	engineVersion: str
	locale: str
	langToName: Map<str,str>
end
struct RobotRequirement
	model: str
	minHeadVersion: str
	maxHeadVersion: str
	minBodyVersion: str
	maxBodyVersion: str
end
struct NaoqiRequirement
	minVersion: str
	maxVersion: str
end
struct PackageService
	execStart: str
	name: str
	autoRun: bool
	envVars: Map<str,str>
end
struct DialogInfo
	topicName: str
	typeVersion: str
	topics: Map<str,str>
end
struct PackageInfo
	uuid: str
	path: str
	version: str
	channel: str
	author: str
	organization: str
	date: str
	typeVersion: str
	langToName: Map<str,str>
	langToDesc: Map<str,str>
	supportedLanguages: Vec<str>
	behaviors: Vec<BehaviorInfo>
	languages: Vec<LanguageInfo>
	installer: str
	robotRequirements: Vec<RobotRequirement>
	naoqiRequirements: Vec<NaoqiRequirement>
	services: Vec<PackageService>
	executableFiles: Vec<str>
	dialogs: Vec<DialogInfo>
	descriptionLanguages: Vec<str>
end
struct RecognitionMatch
	uid: int32
	confidence: float32
	isLongTerm: bool
end
struct RecognitionResult
	status: int32
	matches: Vec<RecognitionMatch>
end
struct ServiceProcessInfo
	running: bool
	name: str
	execStart: str
	autorun: bool
	packageUuid: str
end
struct Limits
	maxJerk: float32
	maxAcc: float32
	maxVel: float32
end
struct MotionToDCM
	whenToSendToDcm: int32
	anglesJoint: unknown
	anglesActuator: unknown
	stiffnessesJoint: unknown
	stiffnessesActuator: unknown
	stiffnessesWheel: unknown
	sendVelocitiesJoint: bool
	velocitiesJoint: unknown
	velocitiesWheel: unknown
	sendTorquesJoint: bool
	torquesJoint: unknown
	enableFuseProtection: bool
end
struct Quaternion
	x: float64
	y: float64
	z: float64
	w: float64
end
struct Vector3
	x: float64
	y: float64
	z: float64
end
struct Transform
	rotation: Quaternion
	translation: Vector3
end
struct TransformTime
	transform: Transform
	time: uint64
end
struct Locale
	language: int32
	region: int32
end
struct IdleDefinition
	idleBases: Vec<str>
	idleBreaks: Vec<str>
end
struct ServiceInfo
	name: str
	serviceId: uint32
	machineId: str
	processId: uint32
	endpoints: Vec<str>
	sessionId: str
end
struct AgentGrd
	concepts: Map<str,int8>
	confidence: float32
	userId: str
end
struct TextProcessingContext
	author: AgentGrd
	recever: AgentGrd
	language: int32
end
struct Duration
	timeInfos: Map<int32,int32>
end
struct TimeGrd
	concepts: Map<str,int8>
	confidence: float32
	reference: Duration
end
struct Expression
	type: int32
	exp: any
end
struct Knowledge
	fromSource: int32
	fromLanguage: int32
	fromText: str
	author: AgentGrd
	time: TimeGrd
	exp: Expression
end
struct SentimentContext
	author: Expression
	sentiment: int32
	sentimentStrengh: int32
	recever: Expression
	fromSource: int32
end
struct Rdf
	subjectVal: str
	predicateVal: str
	objectVal: str
end
struct KnowledgeExtractionResult
	idOfKnowledgeThatCausedTheExtraction: int32
	extractedKnowledge: Knowledge
	remainingKnowledge: Knowledge
end
struct TaskInfo
	priorityName: str
	priorityValue: int32
	isContinuous: bool
	isEnabled: bool
	isRunning: bool
end
struct AutonomousAbilityStatus
	name: str
	enabled: bool
	running: bool
end
struct ActivityTransitionInfo
	TransitionTime: uint64
	PreviousActivityName: str
	PreviousActivityStopReason: str
	FocusedActivityName: str
	FocusedActivityStartReason: str
end
struct Phrase
	text: str
end
struct ValueConfidence<float>
	value: float32
	confidence: float32
end
struct BodyLanguageEase
	level: float32
	confidence: float32
end
struct BodyLanguageState
	ease: BodyLanguageEase
end
struct Smile
	value: float32
	confidence: float32
end
struct Expressions
	calm: ValueConfidence<float>
	anger: ValueConfidence<float>
	joy: ValueConfidence<float>
	sorrow: ValueConfidence<float>
	laughter: ValueConfidence<float>
	excitement: ValueConfidence<float>
	surprise: ValueConfidence<float>
end
struct PersonState
	valence: ValueConfidence<float>
	attention: ValueConfidence<float>
	bodyLanguageState: BodyLanguageState
	smile: Smile
	expressions: Expressions
end
struct PersonDescriptor
	pleasure: int32
	attention: int32
end
struct Person
	personID: int32
	personState: PersonState
end
struct AmbianceState
	agitationLevel: float32
	calmLevel: float32
end
struct AmbianceDescriptor
	excitement: int32
end
struct ResourceNode
	url: str
end
struct Node
	value: any
end
struct Triple
	subject: ResourceNode
	predicate: ResourceNode
	object: Node
end
struct SpeakingMovementConfig
	enabled: bool
	speakingMovementMode: int32
	wordsToTags: Map<str,Vec<str>>
	inputMode2: bool
end
struct RecognitionMatch_0
	value: uint64
	confidence: float32
	storage: int32
end
struct RecognitionResult_0
	status: int32
	matches: Vec<RecognitionMatch_0>
end
struct RecognitionMatch_1
	value: uint64
	confidence: float32
	storage: int32
end
struct RecognitionResult_1
	status: int32
	matches: Vec<RecognitionMatch_1>
end
struct RobotState
	pleasure: str
	excitement: str
end
struct RobotFullState
	pleasure: ValueConfidence<float>
	excitement: ValueConfidence<float>
end
struct Position3D
	x: float32
	y: float32
	z: float32
end
struct TimestampedPosition3D
	position: Position3D
	timestamp: uint64
end
struct LogMessage
	source: str
	level: int32
	category: str
	location: str
	message: str
	id: uint32
	date: uint64
	systemDate: uint64
end

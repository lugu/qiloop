// file generated. DO NOT EDIT.
package services

import (
	bytes "bytes"
	fmt "fmt"
	basic "github.com/lugu/qiloop/basic"
	object "github.com/lugu/qiloop/object"
	session "github.com/lugu/qiloop/session"
	value "github.com/lugu/qiloop/value"
	io "io"
)

type Server struct {
	session.Proxy
}

func NewServer(ses session.Session, obj uint32) (*Server, error) {
	proxy, err := ses.Proxy("Server", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &Server{proxy}, nil
}
func (p *Server) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *Server) Authenticate(p0 map[string]value.Value) (map[string]value.Value, error) {
	var err error
	var ret map[string]value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p0)), buf)
		if err != nil {
			return fmt.Errorf("failed to write map size: %s", err)
		}
		for k, v := range p0 {
			err = basic.WriteString(k, buf)
			if err != nil {
				return fmt.Errorf("failed to write map key: %s", err)
			}
			err = v.Write(buf)
			if err != nil {
				return fmt.Errorf("failed to write map value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call authenticate failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[string]value.Value, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[string]value.Value, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadString(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := value.NewValue(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse authenticate response: %s", err)
	}
	return ret, nil
}

type ServiceDirectory struct {
	session.Proxy
}

func NewServiceDirectory(ses session.Session, obj uint32) (*ServiceDirectory, error) {
	proxy, err := ses.Proxy("ServiceDirectory", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ServiceDirectory{proxy}, nil
}
func (p *ServiceDirectory) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ServiceDirectory) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ServiceDirectory) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ServiceDirectory) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ServiceDirectory) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ServiceDirectory) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ServiceDirectory) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ServiceDirectory) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ServiceDirectory) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ServiceDirectory) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ServiceDirectory) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ServiceDirectory) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ServiceDirectory) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ServiceDirectory) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ServiceDirectory) Service(p0 string) (ServiceInfo, error) {
	var err error
	var ret ServiceInfo
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(100, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call service failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = ReadServiceInfo(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse service response: %s", err)
	}
	return ret, nil
}
func (p *ServiceDirectory) Services() ([]ServiceInfo, error) {
	var err error
	var ret []ServiceInfo
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(101, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call services failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []ServiceInfo, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]ServiceInfo, size)
		for i := 0; i < int(size); i++ {
			b[i], err = ReadServiceInfo(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse services response: %s", err)
	}
	return ret, nil
}
func (p *ServiceDirectory) RegisterService(p0 ServiceInfo) (uint32, error) {
	var err error
	var ret uint32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = WriteServiceInfo(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(102, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerService failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerService response: %s", err)
	}
	return ret, nil
}
func (p *ServiceDirectory) UnregisterService(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(103, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterService failed: %s", err)
	}
	return nil
}
func (p *ServiceDirectory) ServiceReady(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(104, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call serviceReady failed: %s", err)
	}
	return nil
}
func (p *ServiceDirectory) UpdateServiceInfo(p0 ServiceInfo) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = WriteServiceInfo(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(105, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call updateServiceInfo failed: %s", err)
	}
	return nil
}
func (p *ServiceDirectory) MachineId() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(108, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call machineId failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse machineId response: %s", err)
	}
	return ret, nil
}

type LogManager struct {
	session.Proxy
}

func NewLogManager(ses session.Session, obj uint32) (*LogManager, error) {
	proxy, err := ses.Proxy("LogManager", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &LogManager{proxy}, nil
}
func (p *LogManager) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *LogManager) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *LogManager) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *LogManager) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *LogManager) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *LogManager) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *LogManager) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *LogManager) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *LogManager) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *LogManager) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *LogManager) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *LogManager) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *LogManager) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *LogManager) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}

type PackageManager struct {
	session.Proxy
}

func NewPackageManager(ses session.Session, obj uint32) (*PackageManager, error) {
	proxy, err := ses.Proxy("PackageManager", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &PackageManager{proxy}, nil
}
func (p *PackageManager) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *PackageManager) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *PackageManager) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *PackageManager) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *PackageManager) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *PackageManager) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *PackageManager) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *PackageManager) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *PackageManager) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *PackageManager) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *PackageManager) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *PackageManager) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *PackageManager) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *PackageManager) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *PackageManager) Install(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(100, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call install failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse install response: %s", err)
	}
	return ret, nil
}
func (p *PackageManager) InstallCheckMd5(p0 string, p1 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(102, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call installCheckMd5 failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse installCheckMd5 response: %s", err)
	}
	return ret, nil
}
func (p *PackageManager) _install(p0 string, p1 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _install failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _install response: %s", err)
	}
	return ret, nil
}
func (p *PackageManager) _install_0(p0 string, p1 string, p2 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _install failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _install response: %s", err)
	}
	return ret, nil
}
func (p *PackageManager) _install_1(p0 string, p1 string, p2 string, p3 bool) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteBool(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _install failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _install response: %s", err)
	}
	return ret, nil
}
func (p *PackageManager) HasPackage(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(108, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call hasPackage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse hasPackage response: %s", err)
	}
	return ret, nil
}
func (p *PackageManager) Packages2() ([]PackageInfo2, error) {
	var err error
	var ret []PackageInfo2
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(109, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call packages2 failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []PackageInfo2, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]PackageInfo2, size)
		for i := 0; i < int(size); i++ {
			b[i], err = ReadPackageInfo2(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse packages2 response: %s", err)
	}
	return ret, nil
}
func (p *PackageManager) Package2(p0 string) (PackageInfo2, error) {
	var err error
	var ret PackageInfo2
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(110, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call package2 failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = ReadPackageInfo2(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse package2 response: %s", err)
	}
	return ret, nil
}
func (p *PackageManager) PackageIcon(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(111, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call packageIcon failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse packageIcon response: %s", err)
	}
	return ret, nil
}
func (p *PackageManager) RemovePkg(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(112, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call removePkg failed: %s", err)
	}
	return nil
}
func (p *PackageManager) GetPackages() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(115, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getPackages failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getPackages response: %s", err)
	}
	return ret, nil
}
func (p *PackageManager) Packages() ([]PackageInfo, error) {
	var err error
	var ret []PackageInfo
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(116, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call packages failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []PackageInfo, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]PackageInfo, size)
		for i := 0; i < int(size); i++ {
			b[i], err = ReadPackageInfo(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse packages response: %s", err)
	}
	return ret, nil
}
func (p *PackageManager) Package(p0 string) (PackageInfo, error) {
	var err error
	var ret PackageInfo
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(117, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call package failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = ReadPackageInfo(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse package response: %s", err)
	}
	return ret, nil
}
func (p *PackageManager) GetPackage(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(118, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getPackage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getPackage response: %s", err)
	}
	return ret, nil
}
func (p *PackageManager) GetPackageIcon(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(119, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getPackageIcon failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getPackageIcon response: %s", err)
	}
	return ret, nil
}

type ALServiceManager struct {
	session.Proxy
}

func NewALServiceManager(ses session.Session, obj uint32) (*ALServiceManager, error) {
	proxy, err := ses.Proxy("ALServiceManager", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALServiceManager{proxy}, nil
}
func (p *ALServiceManager) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALServiceManager) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALServiceManager) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALServiceManager) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALServiceManager) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALServiceManager) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALServiceManager) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALServiceManager) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALServiceManager) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALServiceManager) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALServiceManager) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALServiceManager) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALServiceManager) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALServiceManager) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALServiceManager) Start(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call start failed: %s", err)
	}
	return nil
}
func (p *ALServiceManager) Restart(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(101, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call restart failed: %s", err)
	}
	return nil
}
func (p *ALServiceManager) Stop(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(102, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call stop failed: %s", err)
	}
	return nil
}
func (p *ALServiceManager) StopAllServices() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(103, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call stopAllServices failed: %s", err)
	}
	return nil
}
func (p *ALServiceManager) IsServiceRunning(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isServiceRunning failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isServiceRunning response: %s", err)
	}
	return ret, nil
}
func (p *ALServiceManager) ServiceMemoryUsage(p0 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call serviceMemoryUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse serviceMemoryUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALServiceManager) Services() ([]ServiceProcessInfo, error) {
	var err error
	var ret []ServiceProcessInfo
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call services failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []ServiceProcessInfo, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]ServiceProcessInfo, size)
		for i := 0; i < int(size); i++ {
			b[i], err = ReadServiceProcessInfo(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse services response: %s", err)
	}
	return ret, nil
}
func (p *ALServiceManager) Service(p0 string) (ServiceProcessInfo, error) {
	var err error
	var ret ServiceProcessInfo
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call service failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = ReadServiceProcessInfo(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse service response: %s", err)
	}
	return ret, nil
}
func (p *ALServiceManager) StartService(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(110, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call startService failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse startService response: %s", err)
	}
	return ret, nil
}
func (p *ALServiceManager) RestartService(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(111, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call restartService failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse restartService response: %s", err)
	}
	return ret, nil
}
func (p *ALServiceManager) StopService(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stopService failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse stopService response: %s", err)
	}
	return ret, nil
}

type ALFileManager struct {
	session.Proxy
}

func NewALFileManager(ses session.Session, obj uint32) (*ALFileManager, error) {
	proxy, err := ses.Proxy("ALFileManager", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALFileManager{proxy}, nil
}
func (p *ALFileManager) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALFileManager) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALFileManager) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALFileManager) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALFileManager) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALFileManager) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALFileManager) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALFileManager) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALFileManager) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALFileManager) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALFileManager) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALFileManager) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALFileManager) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALFileManager) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALFileManager) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALFileManager) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALFileManager) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALFileManager) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALFileManager) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALFileManager) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALFileManager) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALFileManager) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALFileManager) SetUserSharedFolderPath(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(114, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setUserSharedFolderPath failed: %s", err)
	}
	return nil
}
func (p *ALFileManager) GetUserSharedFolderPath() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(115, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUserSharedFolderPath failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUserSharedFolderPath response: %s", err)
	}
	return ret, nil
}
func (p *ALFileManager) GetSystemSharedFolderPath() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(116, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getSystemSharedFolderPath failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getSystemSharedFolderPath response: %s", err)
	}
	return ret, nil
}
func (p *ALFileManager) FileExists(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(117, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call fileExists failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse fileExists response: %s", err)
	}
	return ret, nil
}
func (p *ALFileManager) DataFileExists(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(118, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call dataFileExists failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse dataFileExists response: %s", err)
	}
	return ret, nil
}
func (p *ALFileManager) GetFileCompletePath(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(119, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getFileCompletePath failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getFileCompletePath response: %s", err)
	}
	return ret, nil
}
func (p *ALFileManager) GetFileContents(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(120, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getFileContents failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getFileContents response: %s", err)
	}
	return ret, nil
}
func (p *ALFileManager) _getBehaviorsPath() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(121, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getBehaviorsPath failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getBehaviorsPath response: %s", err)
	}
	return ret, nil
}
func (p *ALFileManager) _getBoxLibrariesPath() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(122, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getBoxLibrariesPath failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getBoxLibrariesPath response: %s", err)
	}
	return ret, nil
}

type ALMemory struct {
	session.Proxy
}

func NewALMemory(ses session.Session, obj uint32) (*ALMemory, error) {
	proxy, err := ses.Proxy("ALMemory", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALMemory{proxy}, nil
}
func (p *ALMemory) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALMemory) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALMemory) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALMemory) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALMemory) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALMemory) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALMemory) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALMemory) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALMemory) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALMemory) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALMemory) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALMemory) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALMemory) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALMemory) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALMemory) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALMemory) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALMemory) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALMemory) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALMemory) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALMemory) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALMemory) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALMemory) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALMemory) DeclareEvent(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(114, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call declareEvent failed: %s", err)
	}
	return nil
}
func (p *ALMemory) DeclareEvent_0(p0 string, p1 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call declareEvent failed: %s", err)
	}
	return nil
}
func (p *ALMemory) GetData(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(116, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getData failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getData response: %s", err)
	}
	return ret, nil
}
func (p *ALMemory) GetTimestamp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(119, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getTimestamp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getTimestamp response: %s", err)
	}
	return ret, nil
}
func (p *ALMemory) GetEventHistory(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(120, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getEventHistory failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getEventHistory response: %s", err)
	}
	return ret, nil
}
func (p *ALMemory) GetDataList(p0 string) ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(121, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getDataList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getDataList response: %s", err)
	}
	return ret, nil
}
func (p *ALMemory) GetDataListName() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(122, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getDataListName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getDataListName response: %s", err)
	}
	return ret, nil
}
func (p *ALMemory) GetEventList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(127, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getEventList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getEventList response: %s", err)
	}
	return ret, nil
}
func (p *ALMemory) GetExtractorEvent(p0 string) ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(128, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getExtractorEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getExtractorEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALMemory) GetListData(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(129, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getListData failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getListData response: %s", err)
	}
	return ret, nil
}
func (p *ALMemory) GetMicroEventList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(130, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMicroEventList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMicroEventList response: %s", err)
	}
	return ret, nil
}
func (p *ALMemory) GetSubscribers(p0 string) ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(131, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getSubscribers failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getSubscribers response: %s", err)
	}
	return ret, nil
}
func (p *ALMemory) GetType(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(132, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getType failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getType response: %s", err)
	}
	return ret, nil
}
func (p *ALMemory) InsertData_0(p0 string, p1 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(134, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call insertData failed: %s", err)
	}
	return nil
}
func (p *ALMemory) InsertData_1(p0 string, p1 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(135, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call insertData failed: %s", err)
	}
	return nil
}
func (p *ALMemory) InsertData_2(p0 string, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(136, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call insertData failed: %s", err)
	}
	return nil
}
func (p *ALMemory) InsertListData(p0 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(137, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call insertListData failed: %s", err)
	}
	return nil
}
func (p *ALMemory) RaiseEvent(p0 string, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(138, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call raiseEvent failed: %s", err)
	}
	return nil
}
func (p *ALMemory) RaiseMicroEvent(p0 string, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(139, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call raiseMicroEvent failed: %s", err)
	}
	return nil
}
func (p *ALMemory) RemoveData(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(140, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call removeData failed: %s", err)
	}
	return nil
}
func (p *ALMemory) RemoveEvent(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(141, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call removeEvent failed: %s", err)
	}
	return nil
}
func (p *ALMemory) RemoveMicroEvent(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(142, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call removeMicroEvent failed: %s", err)
	}
	return nil
}
func (p *ALMemory) SubscribeToEvent(p0 string, p1 string, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(143, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call subscribeToEvent failed: %s", err)
	}
	return nil
}
func (p *ALMemory) SubscribeToEvent_0(p0 string, p1 string, p2 string, p3 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return fmt.Errorf("failed to serialize p3: %s", err)
	}
	_, err = p.Call(144, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call subscribeToEvent failed: %s", err)
	}
	return nil
}
func (p *ALMemory) SubscribeToMicroEvent(p0 string, p1 string, p2 string, p3 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return fmt.Errorf("failed to serialize p3: %s", err)
	}
	_, err = p.Call(145, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call subscribeToMicroEvent failed: %s", err)
	}
	return nil
}
func (p *ALMemory) UnregisterModuleReference(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(146, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterModuleReference failed: %s", err)
	}
	return nil
}
func (p *ALMemory) _perf() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(147, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _perf failed: %s", err)
	}
	return nil
}
func (p *ALMemory) UnsubscribeToEvent(p0 string, p1 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(148, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unsubscribeToEvent failed: %s", err)
	}
	return nil
}
func (p *ALMemory) UnsubscribeToMicroEvent(p0 string, p1 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(149, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unsubscribeToMicroEvent failed: %s", err)
	}
	return nil
}
func (p *ALMemory) _subscribeOnDataSetSynchronizeResponse(p0 string, p1 string, p2 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteBool(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(152, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _subscribeOnDataSetSynchronizeResponse failed: %s", err)
	}
	return nil
}
func (p *ALMemory) SetDescription(p0 string, p1 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(153, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setDescription failed: %s", err)
	}
	return nil
}
func (p *ALMemory) GetDescriptionList(p0 []string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p0)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p0 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(154, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getDescriptionList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getDescriptionList response: %s", err)
	}
	return ret, nil
}
func (p *ALMemory) AddMapping(p0 string, p1 string, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(155, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call addMapping failed: %s", err)
	}
	return nil
}
func (p *ALMemory) AddMapping_0(p0 string, p1 map[string]string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p1)), buf)
		if err != nil {
			return fmt.Errorf("failed to write map size: %s", err)
		}
		for k, v := range p1 {
			err = basic.WriteString(k, buf)
			if err != nil {
				return fmt.Errorf("failed to write map key: %s", err)
			}
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write map value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(156, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call addMapping failed: %s", err)
	}
	return nil
}

type ALLogger struct {
	session.Proxy
}

func NewALLogger(ses session.Session, obj uint32) (*ALLogger, error) {
	proxy, err := ses.Proxy("ALLogger", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALLogger{proxy}, nil
}
func (p *ALLogger) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALLogger) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALLogger) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALLogger) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALLogger) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALLogger) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALLogger) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALLogger) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALLogger) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALLogger) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALLogger) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALLogger) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALLogger) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALLogger) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALLogger) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALLogger) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALLogger) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALLogger) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALLogger) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALLogger) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALLogger) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALLogger) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALLogger) Fatal(p0 string, p1 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(114, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call fatal failed: %s", err)
	}
	return nil
}
func (p *ALLogger) Error(p0 string, p1 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call error failed: %s", err)
	}
	return nil
}
func (p *ALLogger) Warn(p0 string, p1 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call warn failed: %s", err)
	}
	return nil
}
func (p *ALLogger) Info(p0 string, p1 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(117, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call info failed: %s", err)
	}
	return nil
}
func (p *ALLogger) Debug(p0 string, p1 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call debug failed: %s", err)
	}
	return nil
}
func (p *ALLogger) SetVerbosity(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(119, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setVerbosity failed: %s", err)
	}
	return nil
}
func (p *ALLogger) LogInFile(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(121, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call logInFile failed: %s", err)
	}
	return nil
}
func (p *ALLogger) LogInForwarder(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(122, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call logInForwarder failed: %s", err)
	}
	return nil
}
func (p *ALLogger) RemoveHandler(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(123, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call removeHandler failed: %s", err)
	}
	return nil
}

type ALPreferences struct {
	session.Proxy
}

func NewALPreferences(ses session.Session, obj uint32) (*ALPreferences, error) {
	proxy, err := ses.Proxy("ALPreferences", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALPreferences{proxy}, nil
}
func (p *ALPreferences) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALPreferences) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALPreferences) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALPreferences) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALPreferences) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALPreferences) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALPreferences) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALPreferences) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALPreferences) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALPreferences) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALPreferences) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALPreferences) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALPreferences) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALPreferences) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALPreferences) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALPreferences) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALPreferences) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALPreferences) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALPreferences) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALPreferences) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALPreferences) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALPreferences) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALPreferences) ReadPrefFile(p0 string, p1 bool) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteBool(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(114, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call readPrefFile failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse readPrefFile response: %s", err)
	}
	return ret, nil
}
func (p *ALPreferences) WritePrefFile(p0 string, p1 value.Value, p2 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteBool(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call writePrefFile failed: %s", err)
	}
	return nil
}
func (p *ALPreferences) RemovePrefFile(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call removePrefFile failed: %s", err)
	}
	return nil
}
func (p *ALPreferences) SaveToMemory(p0 value.Value) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(117, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call saveToMemory failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse saveToMemory response: %s", err)
	}
	return ret, nil
}

type ALLauncher struct {
	session.Proxy
}

func NewALLauncher(ses session.Session, obj uint32) (*ALLauncher, error) {
	proxy, err := ses.Proxy("ALLauncher", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALLauncher{proxy}, nil
}
func (p *ALLauncher) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALLauncher) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALLauncher) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALLauncher) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALLauncher) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALLauncher) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALLauncher) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALLauncher) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALLauncher) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALLauncher) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALLauncher) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALLauncher) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALLauncher) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALLauncher) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALLauncher) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALLauncher) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALLauncher) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALLauncher) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALLauncher) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALLauncher) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALLauncher) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALLauncher) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALLauncher) LaunchLocal(p0 string) ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(114, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call launchLocal failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse launchLocal response: %s", err)
	}
	return ret, nil
}
func (p *ALLauncher) LaunchExecutable(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(115, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call launchExecutable failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse launchExecutable response: %s", err)
	}
	return ret, nil
}
func (p *ALLauncher) LaunchScript(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(118, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call launchScript failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse launchScript response: %s", err)
	}
	return ret, nil
}
func (p *ALLauncher) LaunchPythonModule(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(119, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call launchPythonModule failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse launchPythonModule response: %s", err)
	}
	return ret, nil
}
func (p *ALLauncher) IsModulePresent(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(120, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isModulePresent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isModulePresent response: %s", err)
	}
	return ret, nil
}
func (p *ALLauncher) GetGlobalModuleList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(121, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getGlobalModuleList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getGlobalModuleList response: %s", err)
	}
	return ret, nil
}

type ALDebug struct {
	session.Proxy
}

func NewALDebug(ses session.Session, obj uint32) (*ALDebug, error) {
	proxy, err := ses.Proxy("ALDebug", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALDebug{proxy}, nil
}
func (p *ALDebug) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALDebug) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALDebug) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALDebug) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALDebug) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALDebug) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALDebug) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALDebug) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALDebug) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALDebug) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALDebug) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALDebug) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALDebug) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALDebug) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALDebug) _stopOneThread() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _stopOneThread failed: %s", err)
	}
	return nil
}
func (p *ALDebug) _dumpPythonTraces() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(101, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _dumpPythonTraces failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _dumpPythonTraces response: %s", err)
	}
	return ret, nil
}
func (p *ALDebug) _makeMinidump() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(102, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _makeMinidump failed: %s", err)
	}
	return nil
}
func (p *ALDebug) _probesRecordSnapshot() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _probesRecordSnapshot failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _probesRecordSnapshot response: %s", err)
	}
	return ret, nil
}
func (p *ALDebug) _probesSetTrigger(p0 string, p1 string, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(105, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _probesSetTrigger failed: %s", err)
	}
	return nil
}
func (p *ALDebug) _probesRemoveTrigger(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(106, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _probesRemoveTrigger failed: %s", err)
	}
	return nil
}
func (p *ALDebug) _probesStartTrigger() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(107, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _probesStartTrigger failed: %s", err)
	}
	return nil
}
func (p *ALDebug) _probesStopTrigger() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(108, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _probesStopTrigger failed: %s", err)
	}
	return nil
}

type ALPreferenceManager struct {
	session.Proxy
}

func NewALPreferenceManager(ses session.Session, obj uint32) (*ALPreferenceManager, error) {
	proxy, err := ses.Proxy("ALPreferenceManager", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALPreferenceManager{proxy}, nil
}
func (p *ALPreferenceManager) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALPreferenceManager) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALPreferenceManager) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALPreferenceManager) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALPreferenceManager) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALPreferenceManager) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALPreferenceManager) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALPreferenceManager) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALPreferenceManager) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALPreferenceManager) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALPreferenceManager) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALPreferenceManager) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALPreferenceManager) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALPreferenceManager) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALPreferenceManager) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALPreferenceManager) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALPreferenceManager) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALPreferenceManager) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALPreferenceManager) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALPreferenceManager) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALPreferenceManager) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALPreferenceManager) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALPreferenceManager) GetValue(p0 string, p1 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(114, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getValue failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getValue response: %s", err)
	}
	return ret, nil
}
func (p *ALPreferenceManager) SetValue(p0 string, p1 string, p2 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = p2.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setValue failed: %s", err)
	}
	return nil
}
func (p *ALPreferenceManager) GetValueList(p0 string) ([][]value.Value, error) {
	var err error
	var ret [][]value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(116, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getValueList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b [][]value.Value, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([][]value.Value, size)
		for i := 0; i < int(size); i++ {
			b[i], err = func() (b []value.Value, err error) {
				size, err := basic.ReadUint32(buf)
				if err != nil {
					return b, fmt.Errorf("failed to read slice size: %s", err)
				}
				b = make([]value.Value, size)
				for i := 0; i < int(size); i++ {
					b[i], err = value.NewValue(buf)
					if err != nil {
						return b, fmt.Errorf("failed to read slice value: %s", err)
					}
				}
				return b, nil
			}()
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getValueList response: %s", err)
	}
	return ret, nil
}
func (p *ALPreferenceManager) GetDomainList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(117, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getDomainList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getDomainList response: %s", err)
	}
	return ret, nil
}
func (p *ALPreferenceManager) RemoveValue(p0 string, p1 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call removeValue failed: %s", err)
	}
	return nil
}
func (p *ALPreferenceManager) SetValues(p0 map[string]map[string]value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p0)), buf)
		if err != nil {
			return fmt.Errorf("failed to write map size: %s", err)
		}
		for k, v := range p0 {
			err = basic.WriteString(k, buf)
			if err != nil {
				return fmt.Errorf("failed to write map key: %s", err)
			}
			err = func() error {
				err := basic.WriteUint32(uint32(len(v)), buf)
				if err != nil {
					return fmt.Errorf("failed to write map size: %s", err)
				}
				for k, v := range v {
					err = basic.WriteString(k, buf)
					if err != nil {
						return fmt.Errorf("failed to write map key: %s", err)
					}
					err = v.Write(buf)
					if err != nil {
						return fmt.Errorf("failed to write map value: %s", err)
					}
				}
				return nil
			}()
			if err != nil {
				return fmt.Errorf("failed to write map value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(119, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setValues failed: %s", err)
	}
	return nil
}
func (p *ALPreferenceManager) RemoveDomainValues(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(120, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call removeDomainValues failed: %s", err)
	}
	return nil
}
func (p *ALPreferenceManager) ImportPrefFile(p0 string, p1 string, p2 string, p3 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteBool(p3, buf); err != nil {
		return fmt.Errorf("failed to serialize p3: %s", err)
	}
	_, err = p.Call(121, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call importPrefFile failed: %s", err)
	}
	return nil
}
func (p *ALPreferenceManager) Update() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(122, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call update failed: %s", err)
	}
	return nil
}
func (p *ALPreferenceManager) _setFromCloud(p0 string, p1 string, p2 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = p2.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(123, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setFromCloud failed: %s", err)
	}
	return nil
}
func (p *ALPreferenceManager) _restart(p0 string, p1 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(124, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _restart failed: %s", err)
	}
	return nil
}
func (p *ALPreferenceManager) _onConnectivityChanged(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(125, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _onConnectivityChanged failed: %s", err)
	}
	return nil
}
func (p *ALPreferenceManager) _factoryReset() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(126, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _factoryReset failed: %s", err)
	}
	return nil
}

type ALNotificationManager struct {
	session.Proxy
}

func NewALNotificationManager(ses session.Session, obj uint32) (*ALNotificationManager, error) {
	proxy, err := ses.Proxy("ALNotificationManager", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALNotificationManager{proxy}, nil
}
func (p *ALNotificationManager) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALNotificationManager) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALNotificationManager) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALNotificationManager) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALNotificationManager) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALNotificationManager) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALNotificationManager) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALNotificationManager) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALNotificationManager) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALNotificationManager) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALNotificationManager) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALNotificationManager) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALNotificationManager) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALNotificationManager) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALNotificationManager) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALNotificationManager) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALNotificationManager) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALNotificationManager) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALNotificationManager) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALNotificationManager) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALNotificationManager) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALNotificationManager) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALNotificationManager) Notifications() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(116, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call notifications failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse notifications response: %s", err)
	}
	return ret, nil
}
func (p *ALNotificationManager) _internalNotifications() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(118, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _internalNotifications failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _internalNotifications response: %s", err)
	}
	return ret, nil
}

type _ALNotificationAdder struct {
	session.Proxy
}

func New_ALNotificationAdder(ses session.Session, obj uint32) (*_ALNotificationAdder, error) {
	proxy, err := ses.Proxy("_ALNotificationAdder", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &_ALNotificationAdder{proxy}, nil
}
func (p *_ALNotificationAdder) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *_ALNotificationAdder) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *_ALNotificationAdder) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *_ALNotificationAdder) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *_ALNotificationAdder) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *_ALNotificationAdder) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *_ALNotificationAdder) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *_ALNotificationAdder) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *_ALNotificationAdder) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_ALNotificationAdder) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *_ALNotificationAdder) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *_ALNotificationAdder) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *_ALNotificationAdder) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_ALNotificationAdder) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}

type ALResourceManager struct {
	session.Proxy
}

func NewALResourceManager(ses session.Session, obj uint32) (*ALResourceManager, error) {
	proxy, err := ses.Proxy("ALResourceManager", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALResourceManager{proxy}, nil
}
func (p *ALResourceManager) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALResourceManager) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALResourceManager) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALResourceManager) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALResourceManager) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALResourceManager) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALResourceManager) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALResourceManager) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALResourceManager) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALResourceManager) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALResourceManager) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALResourceManager) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALResourceManager) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALResourceManager) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALResourceManager) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALResourceManager) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALResourceManager) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALResourceManager) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALResourceManager) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALResourceManager) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALResourceManager) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALResourceManager) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALResourceManager) AreResourcesOwnedBy(p0 []string, p1 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p0)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p0 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(119, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call areResourcesOwnedBy failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse areResourcesOwnedBy response: %s", err)
	}
	return ret, nil
}
func (p *ALResourceManager) ReleaseResource(p0 string, p1 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(120, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call releaseResource failed: %s", err)
	}
	return nil
}
func (p *ALResourceManager) ReleaseResources(p0 []string, p1 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p0)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p0 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(121, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call releaseResources failed: %s", err)
	}
	return nil
}
func (p *ALResourceManager) EnableStateResource(p0 string, p1 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteBool(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(122, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStateResource failed: %s", err)
	}
	return nil
}
func (p *ALResourceManager) CheckStateResourceFree(p0 []string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p0)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p0 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(123, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call checkStateResourceFree failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse checkStateResourceFree response: %s", err)
	}
	return ret, nil
}
func (p *ALResourceManager) AreResourcesFree(p0 []string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p0)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p0 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(124, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call areResourcesFree failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse areResourcesFree response: %s", err)
	}
	return ret, nil
}
func (p *ALResourceManager) IsResourceFree(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(125, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isResourceFree failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isResourceFree response: %s", err)
	}
	return ret, nil
}
func (p *ALResourceManager) CreateResource(p0 string, p1 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(126, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call createResource failed: %s", err)
	}
	return nil
}
func (p *ALResourceManager) DeleteResource(p0 string, p1 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteBool(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(127, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call deleteResource failed: %s", err)
	}
	return nil
}
func (p *ALResourceManager) IsInGroup(p0 string, p1 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(128, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isInGroup failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isInGroup response: %s", err)
	}
	return ret, nil
}
func (p *ALResourceManager) CreateResourcesList(p0 []string, p1 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p0)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p0 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(129, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call createResourcesList failed: %s", err)
	}
	return nil
}
func (p *ALResourceManager) GetResources() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(130, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getResources failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getResources response: %s", err)
	}
	return ret, nil
}
func (p *ALResourceManager) OwnersGet() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(131, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ownersGet failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ownersGet response: %s", err)
	}
	return ret, nil
}

type ALRobotModel struct {
	session.Proxy
}

func NewALRobotModel(ses session.Session, obj uint32) (*ALRobotModel, error) {
	proxy, err := ses.Proxy("ALRobotModel", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALRobotModel{proxy}, nil
}
func (p *ALRobotModel) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotModel) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALRobotModel) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotModel) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALRobotModel) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotModel) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALRobotModel) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotModel) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotModel) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotModel) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALRobotModel) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotModel) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALRobotModel) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotModel) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALRobotModel) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALRobotModel) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotModel) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotModel) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotModel) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotModel) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotModel) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotModel) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotModel) GetConfig() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(114, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getConfig failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getConfig response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotModel) _getConfigMap() (map[string]value.Value, error) {
	var err error
	var ret map[string]value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(115, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getConfigMap failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[string]value.Value, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[string]value.Value, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadString(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := value.NewValue(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getConfigMap response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotModel) _isRobocup() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(116, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _isRobocup failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _isRobocup response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotModel) GetRobotType() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(119, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getRobotType failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getRobotType response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotModel) _getRobotTypeString() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(120, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getRobotTypeString failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getRobotTypeString response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotModel) HasArms() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(121, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call hasArms failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse hasArms response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotModel) HasHands() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(122, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call hasHands failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse hasHands response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotModel) HasLegs() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(123, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call hasLegs failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse hasLegs response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotModel) _setConfigFromConfigXml(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(124, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setConfigFromConfigXml failed: %s", err)
	}
	return nil
}
func (p *ALRobotModel) _hasTouchSensorInHands() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(126, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _hasTouchSensorInHands failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _hasTouchSensorInHands response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotModel) _hasTablet() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(127, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _hasTablet failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _hasTablet response: %s", err)
	}
	return ret, nil
}

type ALSonar struct {
	session.Proxy
}

func NewALSonar(ses session.Session, obj uint32) (*ALSonar, error) {
	proxy, err := ses.Proxy("ALSonar", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALSonar{proxy}, nil
}
func (p *ALSonar) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALSonar) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALSonar) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALSonar) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALSonar) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALSonar) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALSonar) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALSonar) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALSonar) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALSonar) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALSonar) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALSonar) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALSonar) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALSonar) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALSonar) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALSonar) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALSonar) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALSonar) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALSonar) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALSonar) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALSonar) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALSonar) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALSonar) Subscribe_0(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call subscribe failed: %s", err)
	}
	return nil
}
func (p *ALSonar) Unsubscribe(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unsubscribe failed: %s", err)
	}
	return nil
}
func (p *ALSonar) UpdatePrecision(p0 string, p1 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call updatePrecision failed: %s", err)
	}
	return nil
}
func (p *ALSonar) GetCurrentPrecision() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(120, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getCurrentPrecision failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getCurrentPrecision response: %s", err)
	}
	return ret, nil
}
func (p *ALSonar) GetMyPrecision(p0 string) (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(122, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMyPrecision failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMyPrecision response: %s", err)
	}
	return ret, nil
}
func (p *ALSonar) GetSubscribersInfo() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(123, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getSubscribersInfo failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getSubscribersInfo response: %s", err)
	}
	return ret, nil
}
func (p *ALSonar) GetOutputNames() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(124, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getOutputNames failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getOutputNames response: %s", err)
	}
	return ret, nil
}
func (p *ALSonar) GetEventList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(125, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getEventList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getEventList response: %s", err)
	}
	return ret, nil
}
func (p *ALSonar) GetMemoryKeyList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(126, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMemoryKeyList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMemoryKeyList response: %s", err)
	}
	return ret, nil
}
func (p *ALSonar) GetFilteredValues() ([]float32, error) {
	var err error
	var ret []float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(127, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getFilteredValues failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []float32, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]float32, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadFloat32(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getFilteredValues response: %s", err)
	}
	return ret, nil
}

type ALFsr struct {
	session.Proxy
}

func NewALFsr(ses session.Session, obj uint32) (*ALFsr, error) {
	proxy, err := ses.Proxy("ALFsr", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALFsr{proxy}, nil
}
func (p *ALFsr) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALFsr) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALFsr) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALFsr) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALFsr) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALFsr) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALFsr) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALFsr) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALFsr) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALFsr) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALFsr) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALFsr) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALFsr) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALFsr) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALFsr) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALFsr) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALFsr) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALFsr) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALFsr) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALFsr) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALFsr) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALFsr) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}

type ALSensors struct {
	session.Proxy
}

func NewALSensors(ses session.Session, obj uint32) (*ALSensors, error) {
	proxy, err := ses.Proxy("ALSensors", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALSensors{proxy}, nil
}
func (p *ALSensors) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALSensors) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALSensors) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALSensors) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALSensors) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALSensors) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALSensors) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALSensors) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALSensors) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALSensors) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALSensors) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALSensors) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALSensors) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALSensors) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALSensors) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALSensors) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALSensors) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALSensors) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALSensors) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALSensors) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALSensors) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALSensors) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALSensors) Subscribe_0(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call subscribe failed: %s", err)
	}
	return nil
}
func (p *ALSensors) Unsubscribe(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unsubscribe failed: %s", err)
	}
	return nil
}
func (p *ALSensors) UpdatePrecision(p0 string, p1 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call updatePrecision failed: %s", err)
	}
	return nil
}
func (p *ALSensors) GetCurrentPrecision() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(120, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getCurrentPrecision failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getCurrentPrecision response: %s", err)
	}
	return ret, nil
}
func (p *ALSensors) GetMyPrecision(p0 string) (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(122, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMyPrecision failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMyPrecision response: %s", err)
	}
	return ret, nil
}
func (p *ALSensors) GetSubscribersInfo() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(123, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getSubscribersInfo failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getSubscribersInfo response: %s", err)
	}
	return ret, nil
}
func (p *ALSensors) GetOutputNames() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(124, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getOutputNames failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getOutputNames response: %s", err)
	}
	return ret, nil
}
func (p *ALSensors) GetEventList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(125, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getEventList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getEventList response: %s", err)
	}
	return ret, nil
}
func (p *ALSensors) GetMemoryKeyList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(126, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMemoryKeyList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMemoryKeyList response: %s", err)
	}
	return ret, nil
}
func (p *ALSensors) Run() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(127, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call run failed: %s", err)
	}
	return nil
}

type ALBodyTemperature struct {
	session.Proxy
}

func NewALBodyTemperature(ses session.Session, obj uint32) (*ALBodyTemperature, error) {
	proxy, err := ses.Proxy("ALBodyTemperature", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALBodyTemperature{proxy}, nil
}
func (p *ALBodyTemperature) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALBodyTemperature) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALBodyTemperature) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALBodyTemperature) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALBodyTemperature) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALBodyTemperature) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALBodyTemperature) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALBodyTemperature) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALBodyTemperature) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALBodyTemperature) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALBodyTemperature) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALBodyTemperature) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALBodyTemperature) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALBodyTemperature) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALBodyTemperature) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALBodyTemperature) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALBodyTemperature) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALBodyTemperature) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALBodyTemperature) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALBodyTemperature) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALBodyTemperature) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALBodyTemperature) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALBodyTemperature) GetTemperatureDiagnosis() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(114, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getTemperatureDiagnosis failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getTemperatureDiagnosis response: %s", err)
	}
	return ret, nil
}
func (p *ALBodyTemperature) SetEnableNotifications(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setEnableNotifications failed: %s", err)
	}
	return nil
}
func (p *ALBodyTemperature) AreNotificationsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(116, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call areNotificationsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse areNotificationsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALBodyTemperature) _getTemperatureStatus() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(119, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getTemperatureStatus failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getTemperatureStatus response: %s", err)
	}
	return ret, nil
}
func (p *ALBodyTemperature) _setEnableDump(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(120, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setEnableDump failed: %s", err)
	}
	return nil
}
func (p *ALBodyTemperature) _isDumpEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(121, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _isDumpEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _isDumpEnabled response: %s", err)
	}
	return ret, nil
}

type ALMotion struct {
	session.Proxy
}

func NewALMotion(ses session.Session, obj uint32) (*ALMotion, error) {
	proxy, err := ses.Proxy("ALMotion", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALMotion{proxy}, nil
}
func (p *ALMotion) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALMotion) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALMotion) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALMotion) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALMotion) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALMotion) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALMotion) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALMotion) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) WakeUp() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(114, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call wakeUp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse wakeUp response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) Rest() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call rest failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _rest(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _rest failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _stopChain(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(117, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _stopChain failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _restReflex(p0 string, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _restReflex failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _blockedLegReflex() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(119, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _blockedLegReflex failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _shutdown() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(120, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _shutdown failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _setMotionPosture(p0 string, p1 []float32) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p1)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p1 {
			err = basic.WriteFloat32(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(121, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _setMotionPosture failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _setMotionPosture response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) _getMotionPosture(p0 string) ([]float32, error) {
	var err error
	var ret []float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(122, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getMotionPosture failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []float32, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]float32, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadFloat32(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getMotionPosture response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) _getMotionPostureList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(123, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getMotionPostureList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getMotionPostureList response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) RobotIsWakeUp() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(124, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call robotIsWakeUp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse robotIsWakeUp response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) StiffnessInterpolation(p0 value.Value, p1 value.Value, p2 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = p2.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(125, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call stiffnessInterpolation failed: %s", err)
	}
	return nil
}
func (p *ALMotion) SetStiffnesses(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(126, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setStiffnesses failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _setStiffnesses(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(127, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setStiffnesses failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _setSafeStiffnesses(p0 []uint32, p1 []uint32, p2 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p0)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p0 {
			err = basic.WriteUint32(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p1)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p1 {
			err = basic.WriteUint32(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteFloat32(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(128, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setSafeStiffnesses failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _disableSafeStiffnesses(p0 []uint32, p1 []uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p0)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p0 {
			err = basic.WriteUint32(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p1)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p1 {
			err = basic.WriteUint32(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(129, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _disableSafeStiffnesses failed: %s", err)
	}
	return nil
}
func (p *ALMotion) GetStiffnesses(p0 value.Value) ([]float32, error) {
	var err error
	var ret []float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(130, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getStiffnesses failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []float32, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]float32, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadFloat32(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getStiffnesses response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) AngleInterpolation(p0 value.Value, p1 value.Value, p2 value.Value, p3 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = p2.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteBool(p3, buf); err != nil {
		return fmt.Errorf("failed to serialize p3: %s", err)
	}
	_, err = p.Call(131, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call angleInterpolation failed: %s", err)
	}
	return nil
}
func (p *ALMotion) AngleInterpolationWithSpeed(p0 value.Value, p1 value.Value, p2 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteFloat32(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(132, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call angleInterpolationWithSpeed failed: %s", err)
	}
	return nil
}
func (p *ALMotion) AngleInterpolationBezier(p0 []string, p1 value.Value, p2 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p0)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p0 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = p2.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(133, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call angleInterpolationBezier failed: %s", err)
	}
	return nil
}
func (p *ALMotion) SetAngles(p0 value.Value, p1 value.Value, p2 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteFloat32(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(134, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setAngles failed: %s", err)
	}
	return nil
}
func (p *ALMotion) SetAngles_0(p0 value.Value, p1 value.Value, p2 []float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p2)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p2 {
			err = basic.WriteFloat32(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(135, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setAngles failed: %s", err)
	}
	return nil
}
func (p *ALMotion) ChangeAngles(p0 value.Value, p1 value.Value, p2 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteFloat32(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(136, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call changeAngles failed: %s", err)
	}
	return nil
}
func (p *ALMotion) GetAngles(p0 value.Value, p1 bool) ([]float32, error) {
	var err error
	var ret []float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteBool(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(137, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getAngles failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []float32, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]float32, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadFloat32(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getAngles response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) OpenHand(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(138, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call openHand failed: %s", err)
	}
	return nil
}
func (p *ALMotion) CloseHand(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(139, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call closeHand failed: %s", err)
	}
	return nil
}
func (p *ALMotion) Move(p0 float32, p1 float32, p2 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteFloat32(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(140, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call move failed: %s", err)
	}
	return nil
}
func (p *ALMotion) Move_0(p0 float32, p1 float32, p2 float32, p3 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteFloat32(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = p3.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p3: %s", err)
	}
	_, err = p.Call(141, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call move failed: %s", err)
	}
	return nil
}
func (p *ALMotion) MoveToward(p0 float32, p1 float32, p2 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteFloat32(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(142, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call moveToward failed: %s", err)
	}
	return nil
}
func (p *ALMotion) MoveToward_0(p0 float32, p1 float32, p2 float32, p3 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteFloat32(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = p3.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p3: %s", err)
	}
	_, err = p.Call(143, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call moveToward failed: %s", err)
	}
	return nil
}
func (p *ALMotion) SetWalkTargetVelocity(p0 float32, p1 float32, p2 float32, p3 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteFloat32(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteFloat32(p3, buf); err != nil {
		return fmt.Errorf("failed to serialize p3: %s", err)
	}
	_, err = p.Call(144, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setWalkTargetVelocity failed: %s", err)
	}
	return nil
}
func (p *ALMotion) SetWalkTargetVelocity_0(p0 float32, p1 float32, p2 float32, p3 float32, p4 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteFloat32(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteFloat32(p3, buf); err != nil {
		return fmt.Errorf("failed to serialize p3: %s", err)
	}
	if err = p4.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p4: %s", err)
	}
	_, err = p.Call(145, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setWalkTargetVelocity failed: %s", err)
	}
	return nil
}
func (p *ALMotion) SetWalkTargetVelocity_1(p0 float32, p1 float32, p2 float32, p3 float32, p4 value.Value, p5 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteFloat32(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteFloat32(p3, buf); err != nil {
		return fmt.Errorf("failed to serialize p3: %s", err)
	}
	if err = p4.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p4: %s", err)
	}
	if err = p5.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p5: %s", err)
	}
	_, err = p.Call(146, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setWalkTargetVelocity failed: %s", err)
	}
	return nil
}
func (p *ALMotion) MoveTo(p0 float32, p1 float32, p2 float32) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteFloat32(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(147, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call moveTo failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse moveTo response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) MoveTo_0(p0 float32, p1 float32, p2 float32, p3 float32) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteFloat32(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteFloat32(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(148, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call moveTo failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse moveTo response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) MoveTo_1(p0 float32, p1 float32, p2 float32, p3 value.Value) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteFloat32(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = p3.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(149, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call moveTo failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse moveTo response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) MoveTo_2(p0 float32, p1 float32, p2 float32, p3 float32, p4 value.Value) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteFloat32(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteFloat32(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	if err = p4.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p4: %s", err)
	}
	response, err := p.Call(150, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call moveTo failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse moveTo response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) MoveTo_3(p0 value.Value) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(151, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call moveTo failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse moveTo response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) MoveTo_4(p0 value.Value, p1 value.Value) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(152, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call moveTo failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse moveTo response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) _moveToPod(p0 float32, p1 float32, p2 float32) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteFloat32(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(153, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _moveToPod failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _moveToPod response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) _moveToPod_0(p0 float32, p1 float32, p2 float32, p3 value.Value) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteFloat32(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = p3.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(154, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _moveToPod failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _moveToPod response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) _followPath(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(155, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _followPath failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _followPath_0(p0 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(156, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _followPath failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _followPathInWorld(p0 value.Value, p1 value.Value, p2 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = p2.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(157, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _followPathInWorld failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _followPathInWorld_0(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(158, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _followPathInWorld failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _setFollowPathSpeedFactor(p0 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(159, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setFollowPathSpeedFactor failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _moveAlong(p0 value.Value) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(160, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _moveAlong failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _moveAlong response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) _moveAlong_0(p0 value.Value, p1 float32) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(161, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _moveAlong failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _moveAlong response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) _stopAndStitchMoveAlong() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(162, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _stopAndStitchMoveAlong failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _getRemainingPath(p0 float32) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(163, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getRemainingPath failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getRemainingPath response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) _getRemainingTrajectory(p0 float32, p1 float32) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(164, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getRemainingTrajectory failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getRemainingTrajectory response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) _getTrajectoryCompletion() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(165, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getTrajectoryCompletion failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getTrajectoryCompletion response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) WalkTo(p0 float32, p1 float32, p2 float32) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteFloat32(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(166, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call walkTo failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse walkTo response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) WalkTo_0(p0 float32, p1 float32, p2 float32, p3 value.Value) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteFloat32(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = p3.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(167, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call walkTo failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse walkTo response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) WalkTo_1(p0 value.Value) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(168, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call walkTo failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse walkTo response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) WalkTo_2(p0 value.Value, p1 value.Value) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(169, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call walkTo failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse walkTo response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) SetFootSteps(p0 []string, p1 value.Value, p2 []float32, p3 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p0)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p0 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p2)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p2 {
			err = basic.WriteFloat32(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteBool(p3, buf); err != nil {
		return fmt.Errorf("failed to serialize p3: %s", err)
	}
	_, err = p.Call(170, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setFootSteps failed: %s", err)
	}
	return nil
}
func (p *ALMotion) SetFootStepsWithSpeed(p0 []string, p1 value.Value, p2 []float32, p3 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p0)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p0 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p2)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p2 {
			err = basic.WriteFloat32(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteBool(p3, buf); err != nil {
		return fmt.Errorf("failed to serialize p3: %s", err)
	}
	_, err = p.Call(171, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setFootStepsWithSpeed failed: %s", err)
	}
	return nil
}
func (p *ALMotion) GetFootSteps() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(172, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getFootSteps failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getFootSteps response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) WalkInit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(173, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call walkInit failed: %s", err)
	}
	return nil
}
func (p *ALMotion) MoveInit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(174, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call moveInit failed: %s", err)
	}
	return nil
}
func (p *ALMotion) WaitUntilWalkIsFinished() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(175, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call waitUntilWalkIsFinished failed: %s", err)
	}
	return nil
}
func (p *ALMotion) WaitUntilMoveIsFinished() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(176, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call waitUntilMoveIsFinished failed: %s", err)
	}
	return nil
}
func (p *ALMotion) WalkIsActive() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(177, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call walkIsActive failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse walkIsActive response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) MoveIsActive() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(178, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call moveIsActive failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse moveIsActive response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) StopWalk() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(179, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stopWalk failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse stopWalk response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) StopMove() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(180, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stopMove failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse stopMove response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) GetFootGaitConfig(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(181, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getFootGaitConfig failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getFootGaitConfig response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) GetMoveConfig(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(182, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMoveConfig failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMoveConfig response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) GetRobotPosition(p0 bool) ([]float32, error) {
	var err error
	var ret []float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(183, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getRobotPosition failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []float32, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]float32, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadFloat32(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getRobotPosition response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) GetNextRobotPosition() ([]float32, error) {
	var err error
	var ret []float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(184, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getNextRobotPosition failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []float32, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]float32, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadFloat32(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getNextRobotPosition response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) GetRobotVelocity() ([]float32, error) {
	var err error
	var ret []float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(185, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getRobotVelocity failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []float32, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]float32, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadFloat32(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getRobotVelocity response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) _getCumulatedDisplacement() ([]float32, error) {
	var err error
	var ret []float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(186, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getCumulatedDisplacement failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []float32, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]float32, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadFloat32(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getCumulatedDisplacement response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) GetWalkArmsEnabled() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(187, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getWalkArmsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getWalkArmsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) SetWalkArmsEnabled(p0 bool, p1 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteBool(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(188, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setWalkArmsEnabled failed: %s", err)
	}
	return nil
}
func (p *ALMotion) GetMoveArmsEnabled(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(189, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMoveArmsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMoveArmsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) SetMoveArmsEnabled(p0 bool, p1 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteBool(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(190, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setMoveArmsEnabled failed: %s", err)
	}
	return nil
}
func (p *ALMotion) PositionInterpolations_0(p0 value.Value, p1 value.Value, p2 value.Value, p3 value.Value, p4 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = p2.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = p3.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p3: %s", err)
	}
	if err = p4.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p4: %s", err)
	}
	_, err = p.Call(193, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call positionInterpolations failed: %s", err)
	}
	return nil
}
func (p *ALMotion) SetPositions(p0 value.Value, p1 value.Value, p2 value.Value, p3 float32, p4 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = p2.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteFloat32(p3, buf); err != nil {
		return fmt.Errorf("failed to serialize p3: %s", err)
	}
	if err = p4.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p4: %s", err)
	}
	_, err = p.Call(195, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setPositions failed: %s", err)
	}
	return nil
}
func (p *ALMotion) TransformInterpolations_0(p0 value.Value, p1 value.Value, p2 value.Value, p3 value.Value, p4 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = p2.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = p3.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p3: %s", err)
	}
	if err = p4.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p4: %s", err)
	}
	_, err = p.Call(200, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call transformInterpolations failed: %s", err)
	}
	return nil
}
func (p *ALMotion) SetTransforms(p0 value.Value, p1 value.Value, p2 value.Value, p3 float32, p4 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = p2.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteFloat32(p3, buf); err != nil {
		return fmt.Errorf("failed to serialize p3: %s", err)
	}
	if err = p4.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p4: %s", err)
	}
	_, err = p.Call(202, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setTransforms failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _getSensorTransformAtTime(p0 string, p1 uint64) ([]float32, error) {
	var err error
	var ret []float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint64(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(205, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getSensorTransformAtTime failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []float32, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]float32, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadFloat32(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getSensorTransformAtTime response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) WbEnable(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(206, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call wbEnable failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _enableAutoBalance(p0 bool) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(207, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _enableAutoBalance failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _enableAutoBalance response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) _changeSupportMode(p0 bool, p1 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(208, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _changeSupportMode failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _changeSupportMode response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) WbFootState(p0 string, p1 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(209, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call wbFootState failed: %s", err)
	}
	return nil
}
func (p *ALMotion) WbEnableBalanceConstraint(p0 bool, p1 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(210, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call wbEnableBalanceConstraint failed: %s", err)
	}
	return nil
}
func (p *ALMotion) WbGoToBalance(p0 string, p1 float32) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(211, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call wbGoToBalance failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse wbGoToBalance response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) WbGoToBalanceWithSpeed(p0 string, p1 float32) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(212, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call wbGoToBalanceWithSpeed failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse wbGoToBalanceWithSpeed response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) WbEnableEffectorControl(p0 string, p1 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteBool(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(213, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call wbEnableEffectorControl failed: %s", err)
	}
	return nil
}
func (p *ALMotion) WbSetEffectorControl(p0 string, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(214, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call wbSetEffectorControl failed: %s", err)
	}
	return nil
}
func (p *ALMotion) WbEnableEffectorOptimization(p0 string, p1 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteBool(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(215, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call wbEnableEffectorOptimization failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _wbGetBalanceState() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(216, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _wbGetBalanceState failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _wbGetBalanceState response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) _wbIsActive() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(217, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _wbIsActive failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _wbIsActive response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) _wbDefaultConfiguration() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(218, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _wbDefaultConfiguration failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _wbGetFootState(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(219, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _wbGetFootState failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _wbGetFootState response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) _wbSetJointWeighting(p0 string, p1 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(220, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _wbSetJointWeighting failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _wbSetJointStiffness(p0 string, p1 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(221, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _wbSetJointStiffness failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _wbGetEffectorConstraint(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(224, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _wbGetEffectorConstraint failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _wbGetEffectorConstraint response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) _wbEnableJointOptimization(p0 string, p1 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteBool(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(226, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _wbEnableJointOptimization failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _wbGetEffectorOptimization(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(227, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _wbGetEffectorOptimization failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _wbGetEffectorOptimization response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) _wbSetEffectorWeight(p0 string, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(228, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _wbSetEffectorWeight failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _wbSetEffectorStiffness(p0 string, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(229, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _wbSetEffectorStiffness failed: %s", err)
	}
	return nil
}
func (p *ALMotion) SetCollisionProtectionEnabled(p0 string, p1 bool) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteBool(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(230, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call setCollisionProtectionEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse setCollisionProtectionEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) GetCollisionProtectionEnabled(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(231, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getCollisionProtectionEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getCollisionProtectionEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) SetExternalCollisionProtectionEnabled(p0 string, p1 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteBool(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(232, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setExternalCollisionProtectionEnabled failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _enablePhysicalInteractionForChain(p0 string, p1 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteBool(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(233, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _enablePhysicalInteractionForChain failed: %s", err)
	}
	return nil
}
func (p *ALMotion) GetExternalCollisionProtectionEnabled(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(235, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getExternalCollisionProtectionEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getExternalCollisionProtectionEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) SetOrthogonalSecurityDistance(p0 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(236, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setOrthogonalSecurityDistance failed: %s", err)
	}
	return nil
}
func (p *ALMotion) GetOrthogonalSecurityDistance() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(237, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getOrthogonalSecurityDistance failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getOrthogonalSecurityDistance response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) SetTangentialSecurityDistance(p0 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(238, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setTangentialSecurityDistance failed: %s", err)
	}
	return nil
}
func (p *ALMotion) GetTangentialSecurityDistance() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(239, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getTangentialSecurityDistance failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getTangentialSecurityDistance response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) IsCollision(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(240, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isCollision failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isCollision response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) _getCollisionStateForObstacleSummary(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(241, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getCollisionStateForObstacleSummary failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getCollisionStateForObstacleSummary response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) _getCollisionNames() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(242, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getCollisionNames failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getCollisionNames response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) _getCollisionShapes(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(243, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getCollisionShapes failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getCollisionShapes response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) _setCollisionShapes(p0 []string, p1 []string, p2 []string, p3 []string, p4 value.Value, p5 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p0)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p0 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p1)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p1 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p2)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p2 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p3)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p3 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p3: %s", err)
	}
	if err = p4.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p4: %s", err)
	}
	if err = p5.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p5: %s", err)
	}
	_, err = p.Call(244, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setCollisionShapes failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _setCollisionShapes_0(p0 []string, p1 []string, p2 value.Value, p3 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p0)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p0 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p1)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p1 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = p2.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = p3.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p3: %s", err)
	}
	_, err = p.Call(245, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setCollisionShapes failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _getDetectedCollisions(p0 float32) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(246, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getDetectedCollisions failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getDetectedCollisions response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) _getDetectedCollisionsFull() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(247, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getDetectedCollisionsFull failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getDetectedCollisionsFull response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) _getDangerousRegion() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(248, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getDangerousRegion failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getDangerousRegion response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) SetFallManagerEnabled(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(249, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setFallManagerEnabled failed: %s", err)
	}
	return nil
}
func (p *ALMotion) GetFallManagerEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(250, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getFallManagerEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getFallManagerEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) SetPushRecoveryEnabled(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(251, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setPushRecoveryEnabled failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _setPushRecoveryEnabled(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(252, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setPushRecoveryEnabled failed: %s", err)
	}
	return nil
}
func (p *ALMotion) GetPushRecoveryEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(253, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getPushRecoveryEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getPushRecoveryEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) SetSmartStiffnessEnabled(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(254, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setSmartStiffnessEnabled failed: %s", err)
	}
	return nil
}
func (p *ALMotion) GetSmartStiffnessEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(255, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getSmartStiffnessEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getSmartStiffnessEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) SetDiagnosisEffectEnabled(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(256, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setDiagnosisEffectEnabled failed: %s", err)
	}
	return nil
}
func (p *ALMotion) GetDiagnosisEffectEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(257, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getDiagnosisEffectEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getDiagnosisEffectEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) GetJointNames(p0 string) ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(258, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getJointNames failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getJointNames response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) GetBodyNames(p0 string) ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(259, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBodyNames failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBodyNames response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) GetSensorNames() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(260, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getSensorNames failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getSensorNames response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) GetLimits(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(261, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getLimits failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getLimits response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) _getFullLimits(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(262, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getFullLimits failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getFullLimits response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) GetRobotConfig() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(265, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getRobotConfig failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getRobotConfig response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) GetSummary() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(266, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getSummary failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getSummary response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) _getSummary() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(267, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getSummary failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getSummary response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) GetMass(p0 string) (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(268, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMass failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMass response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) _getSupportPolygonBipedDebug(p0 string) ([][]float32, error) {
	var err error
	var ret [][]float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(271, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getSupportPolygonBipedDebug failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b [][]float32, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([][]float32, size)
		for i := 0; i < int(size); i++ {
			b[i], err = func() (b []float32, err error) {
				size, err := basic.ReadUint32(buf)
				if err != nil {
					return b, fmt.Errorf("failed to read slice size: %s", err)
				}
				b = make([]float32, size)
				for i := 0; i < int(size); i++ {
					b[i], err = basic.ReadFloat32(buf)
					if err != nil {
						return b, fmt.Errorf("failed to read slice value: %s", err)
					}
				}
				return b, nil
			}()
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getSupportPolygonBipedDebug response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) _getTorque(p0 value.Value, p1 bool) ([]float32, error) {
	var err error
	var ret []float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteBool(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(272, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getTorque failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []float32, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]float32, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadFloat32(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getTorque response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) _getInertia(p0 string) ([]float32, error) {
	var err error
	var ret []float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(273, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getInertia failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []float32, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]float32, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadFloat32(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getInertia response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) SetMotionConfig(p0 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(274, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setMotionConfig failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _naoqiIsReadyCallback() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(275, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _naoqiIsReadyCallback failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _preferenceUpdatedCallback(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(276, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _preferenceUpdatedCallback failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _lookAtWbPersistent(p0 float32, p1 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(278, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _lookAtWbPersistent failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _lookAtWb(p0 float32, p1 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(279, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _lookAtWb failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _trackerPointAt(p0 []string, p1 []float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p0)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p0 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p1)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p1 {
			err = basic.WriteFloat32(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(280, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _trackerPointAt failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _trackerWithSpeed(p0 []string, p1 []float32, p2 []float32, p3 bool, p4 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p0)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p0 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p1)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p1 {
			err = basic.WriteFloat32(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p2)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p2 {
			err = basic.WriteFloat32(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteBool(p3, buf); err != nil {
		return fmt.Errorf("failed to serialize p3: %s", err)
	}
	if err = basic.WriteBool(p4, buf); err != nil {
		return fmt.Errorf("failed to serialize p4: %s", err)
	}
	_, err = p.Call(281, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _trackerWithSpeed failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _stopLookAt(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(284, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _stopLookAt failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _stopPointAt(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(285, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _stopPointAt failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _updateObstacles(p0 [][]float32, p1 [][][]float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p0)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p0 {
			err = func() error {
				err := basic.WriteUint32(uint32(len(v)), buf)
				if err != nil {
					return fmt.Errorf("failed to write slice size: %s", err)
				}
				for _, v := range v {
					err = basic.WriteFloat32(v, buf)
					if err != nil {
						return fmt.Errorf("failed to write slice value: %s", err)
					}
				}
				return nil
			}()
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p1)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p1 {
			err = func() error {
				err := basic.WriteUint32(uint32(len(v)), buf)
				if err != nil {
					return fmt.Errorf("failed to write slice size: %s", err)
				}
				for _, v := range v {
					err = func() error {
						err := basic.WriteUint32(uint32(len(v)), buf)
						if err != nil {
							return fmt.Errorf("failed to write slice size: %s", err)
						}
						for _, v := range v {
							err = basic.WriteFloat32(v, buf)
							if err != nil {
								return fmt.Errorf("failed to write slice value: %s", err)
							}
						}
						return nil
					}()
					if err != nil {
						return fmt.Errorf("failed to write slice value: %s", err)
					}
				}
				return nil
			}()
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(286, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _updateObstacles failed: %s", err)
	}
	return nil
}
func (p *ALMotion) SetBreathEnabled(p0 string, p1 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteBool(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(287, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setBreathEnabled failed: %s", err)
	}
	return nil
}
func (p *ALMotion) GetBreathEnabled(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(288, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBreathEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBreathEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) SetBreathConfig(p0 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(289, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setBreathConfig failed: %s", err)
	}
	return nil
}
func (p *ALMotion) GetBreathConfig() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(290, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBreathConfig failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBreathConfig response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) SetIdlePostureEnabled(p0 string, p1 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteBool(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(291, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setIdlePostureEnabled failed: %s", err)
	}
	return nil
}
func (p *ALMotion) GetIdlePostureEnabled(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(292, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getIdlePostureEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getIdlePostureEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) _resetIdleDefaultAnimation() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(294, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _resetIdleDefaultAnimation failed: %s", err)
	}
	return nil
}
func (p *ALMotion) GetTaskList() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(295, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getTaskList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getTaskList response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) AreResourcesAvailable(p0 []string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p0)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p0 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(296, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call areResourcesAvailable failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse areResourcesAvailable response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) KillTasksUsingResources(p0 []string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p0)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p0 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(298, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call killTasksUsingResources failed: %s", err)
	}
	return nil
}
func (p *ALMotion) KillWalk() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(299, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call killWalk failed: %s", err)
	}
	return nil
}
func (p *ALMotion) KillMove() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(300, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call killMove failed: %s", err)
	}
	return nil
}
func (p *ALMotion) KillAll() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(301, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call killAll failed: %s", err)
	}
	return nil
}
func (p *ALMotion) SetEnableNotifications(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(302, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setEnableNotifications failed: %s", err)
	}
	return nil
}
func (p *ALMotion) AreNotificationsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(303, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call areNotificationsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse areNotificationsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) _getGroundCollision() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(304, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getGroundCollision failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getGroundCollision response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) _getGroundCollisionForForceContact() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(305, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getGroundCollisionForForceContact failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getGroundCollisionForForceContact response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) _getGroundCollisionForFallManager() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(306, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getGroundCollisionForFallManager failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getGroundCollisionForFallManager response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) _getGroundPlaneTf() ([]float32, error) {
	var err error
	var ret []float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(307, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getGroundPlaneTf failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []float32, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]float32, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadFloat32(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getGroundPlaneTf response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) _getNormalForceContact() ([]float32, error) {
	var err error
	var ret []float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(308, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getNormalForceContact failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []float32, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]float32, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadFloat32(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getNormalForceContact response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) _getRealTorsoInWorld() ([]float32, error) {
	var err error
	var ret []float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(309, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getRealTorsoInWorld failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []float32, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]float32, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadFloat32(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getRealTorsoInWorld response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) _getRobotGroundConvexHullDebug() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(310, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getRobotGroundConvexHullDebug failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getRobotGroundConvexHullDebug response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) _getRobotGroundConvexHull() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(311, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getRobotGroundConvexHull failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getRobotGroundConvexHull response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) _setAnimationModeEnabled(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(314, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setAnimationModeEnabled failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _getMotionConfig(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(315, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getMotionConfig failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getMotionConfig response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) _getSupportPolygonCenter() ([]float32, error) {
	var err error
	var ret []float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(316, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getSupportPolygonCenter failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []float32, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]float32, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadFloat32(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getSupportPolygonCenter response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) _getComWorld() ([]float32, error) {
	var err error
	var ret []float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(317, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getComWorld failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []float32, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]float32, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadFloat32(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getComWorld response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) _getWorldRotation() ([]float32, error) {
	var err error
	var ret []float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(318, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getWorldRotation failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []float32, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]float32, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadFloat32(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getWorldRotation response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) _fall(p0 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(319, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _fall failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _relaxMotorsWhenSitting() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(320, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _relaxMotorsWhenSitting failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _relax(p0 value.Value, p1 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(321, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _relax failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _resetCartesianUnfeasible() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(322, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _resetCartesianUnfeasible failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _setCartesianUnfeasible() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(323, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setCartesianUnfeasible failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _saveWholeBodyDump() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(325, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _saveWholeBodyDump failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _resetNumJointCommandDiscontinuities() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(326, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _resetNumJointCommandDiscontinuities failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _getNumJointCommandDiscontinuities() (uint32, error) {
	var err error
	var ret uint32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(327, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getNumJointCommandDiscontinuities failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getNumJointCommandDiscontinuities response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) _resetMotionCommandModelToSensors(p0 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(328, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _resetMotionCommandModelToSensors failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _getBlindZones() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(330, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getBlindZones failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getBlindZones response: %s", err)
	}
	return ret, nil
}
func (p *ALMotion) _freeze(p0 string, p1 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(331, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _freeze failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _dumpBlackBoxUntil(p0 string, p1 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint64(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(332, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _dumpBlackBoxUntil failed: %s", err)
	}
	return nil
}
func (p *ALMotion) _dumpBlackBox(p0 string, p1 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint64(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(333, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _dumpBlackBox failed: %s", err)
	}
	return nil
}

type ALTouch struct {
	session.Proxy
}

func NewALTouch(ses session.Session, obj uint32) (*ALTouch, error) {
	proxy, err := ses.Proxy("ALTouch", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALTouch{proxy}, nil
}
func (p *ALTouch) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALTouch) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALTouch) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALTouch) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALTouch) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALTouch) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALTouch) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALTouch) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALTouch) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALTouch) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALTouch) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALTouch) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALTouch) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALTouch) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALTouch) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALTouch) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALTouch) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALTouch) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALTouch) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALTouch) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALTouch) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALTouch) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALTouch) _setTouchConfig(p0 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(114, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setTouchConfig failed: %s", err)
	}
	return nil
}
func (p *ALTouch) GetSensorList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(115, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getSensorList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getSensorList response: %s", err)
	}
	return ret, nil
}
func (p *ALTouch) GetStatus() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(116, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getStatus failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getStatus response: %s", err)
	}
	return ret, nil
}
func (p *ALTouch) _createGroup(p0 string, p1 []string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p1)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p1 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(117, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _createGroup failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _createGroup response: %s", err)
	}
	return ret, nil
}
func (p *ALTouch) _deleteGroup(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(118, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _deleteGroup failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _deleteGroup response: %s", err)
	}
	return ret, nil
}
func (p *ALTouch) _getGroupList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(119, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getGroupList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getGroupList response: %s", err)
	}
	return ret, nil
}
func (p *ALTouch) _triggerMotionReflex(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(121, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _triggerMotionReflex failed: %s", err)
	}
	return nil
}
func (p *ALTouch) _notifyTouchStopped(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(122, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _notifyTouchStopped failed: %s", err)
	}
	return nil
}
func (p *ALTouch) _robotFallingCallback(p0 string, p1 value.Value, p2 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = p2.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(123, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _robotFallingCallback failed: %s", err)
	}
	return nil
}
func (p *ALTouch) _robotFallenCallback(p0 string, p1 value.Value, p2 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = p2.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(124, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _robotFallenCallback failed: %s", err)
	}
	return nil
}
func (p *ALTouch) _diagnosisCallback(p0 string, p1 value.Value, p2 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = p2.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(125, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _diagnosisCallback failed: %s", err)
	}
	return nil
}
func (p *ALTouch) _temperatureCallback(p0 string, p1 value.Value, p2 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = p2.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(126, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _temperatureCallback failed: %s", err)
	}
	return nil
}

type ALRobotPosture struct {
	session.Proxy
}

func NewALRobotPosture(ses session.Session, obj uint32) (*ALRobotPosture, error) {
	proxy, err := ses.Proxy("ALRobotPosture", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALRobotPosture{proxy}, nil
}
func (p *ALRobotPosture) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotPosture) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALRobotPosture) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotPosture) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALRobotPosture) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotPosture) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALRobotPosture) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotPosture) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotPosture) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotPosture) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALRobotPosture) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotPosture) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALRobotPosture) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotPosture) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALRobotPosture) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALRobotPosture) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotPosture) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotPosture) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotPosture) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotPosture) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotPosture) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotPosture) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotPosture) GetPostureFamily() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(114, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getPostureFamily failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getPostureFamily response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotPosture) GoToPosture(p0 string, p1 float32) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(115, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call goToPosture failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse goToPosture response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotPosture) ApplyPosture(p0 string, p1 float32) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(116, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call applyPosture failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse applyPosture response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotPosture) StopMove() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(117, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call stopMove failed: %s", err)
	}
	return nil
}
func (p *ALRobotPosture) GetPostureList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(118, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getPostureList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getPostureList response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotPosture) GetPostureFamilyList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(119, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getPostureFamilyList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getPostureFamilyList response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotPosture) GetPosture() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(121, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getPosture failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getPosture response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotPosture) _isRobotInPosture(p0 string, p1 float32, p2 float32) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteFloat32(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(122, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _isRobotInPosture failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _isRobotInPosture response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotPosture) _getPosture() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(124, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getPosture failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getPosture response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotPosture) _renamePosture(p0 string, p1 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(128, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _renamePosture failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _renamePosture response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotPosture) _setUseAntiCollision(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(132, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setUseAntiCollision failed: %s", err)
	}
	return nil
}
func (p *ALRobotPosture) _setUseAutoBalance(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(133, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setUseAutoBalance failed: %s", err)
	}
	return nil
}
func (p *ALRobotPosture) _eraseAllPostures() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(138, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _eraseAllPostures failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _eraseAllPostures response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotPosture) _loadPostureLibraryFromName(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(145, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _loadPostureLibraryFromName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _loadPostureLibraryFromName response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotPosture) _getCurrentPath() ([]float32, error) {
	var err error
	var ret []float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(146, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getCurrentPath failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []float32, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]float32, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadFloat32(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getCurrentPath response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotPosture) _isStandCallBack(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(147, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _isStandCallBack failed: %s", err)
	}
	return nil
}
func (p *ALRobotPosture) _savePostureLibrary(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(148, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _savePostureLibrary failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _savePostureLibrary response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotPosture) _generateCartesianMap() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(154, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _generateCartesianMap failed: %s", err)
	}
	return nil
}
func (p *ALRobotPosture) _getPostureZ(p0 float32) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(155, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getPostureZ failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getPostureZ response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotPosture) _getPostureNoZ() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(156, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getPostureNoZ failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getPostureNoZ response: %s", err)
	}
	return ret, nil
}
func (p *ALRobotPosture) _activeDiagnosisCallBack(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(158, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _activeDiagnosisCallBack failed: %s", err)
	}
	return nil
}
func (p *ALRobotPosture) _eraseFamily(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(159, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _eraseFamily failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _eraseFamily response: %s", err)
	}
	return ret, nil
}

type ALMotionRecorder struct {
	session.Proxy
}

func NewALMotionRecorder(ses session.Session, obj uint32) (*ALMotionRecorder, error) {
	proxy, err := ses.Proxy("ALMotionRecorder", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALMotionRecorder{proxy}, nil
}
func (p *ALMotionRecorder) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALMotionRecorder) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALMotionRecorder) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALMotionRecorder) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALMotionRecorder) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALMotionRecorder) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALMotionRecorder) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALMotionRecorder) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALMotionRecorder) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALMotionRecorder) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALMotionRecorder) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALMotionRecorder) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALMotionRecorder) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALMotionRecorder) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALMotionRecorder) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALMotionRecorder) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALMotionRecorder) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALMotionRecorder) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALMotionRecorder) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALMotionRecorder) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALMotionRecorder) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALMotionRecorder) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALMotionRecorder) StopAndGetRecording() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(116, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stopAndGetRecording failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse stopAndGetRecording response: %s", err)
	}
	return ret, nil
}
func (p *ALMotionRecorder) DataChanged(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(117, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call dataChanged failed: %s", err)
	}
	return nil
}

type ALLeds struct {
	session.Proxy
}

func NewALLeds(ses session.Session, obj uint32) (*ALLeds, error) {
	proxy, err := ses.Proxy("ALLeds", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALLeds{proxy}, nil
}
func (p *ALLeds) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALLeds) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALLeds) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALLeds) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALLeds) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALLeds) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALLeds) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALLeds) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALLeds) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALLeds) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALLeds) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALLeds) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALLeds) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALLeds) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALLeds) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALLeds) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALLeds) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALLeds) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALLeds) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALLeds) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALLeds) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALLeds) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALLeds) CreateGroup(p0 string, p1 []string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p1)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p1 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(114, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call createGroup failed: %s", err)
	}
	return nil
}
func (p *ALLeds) Fade(p0 string, p1 float32, p2 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteFloat32(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call fade failed: %s", err)
	}
	return nil
}
func (p *ALLeds) FadeListRGB(p0 string, p1 value.Value, p2 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = p2.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(117, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call fadeListRGB failed: %s", err)
	}
	return nil
}
func (p *ALLeds) FadeRGB(p0 string, p1 float32, p2 float32, p3 float32, p4 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteFloat32(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteFloat32(p3, buf); err != nil {
		return fmt.Errorf("failed to serialize p3: %s", err)
	}
	if err = basic.WriteFloat32(p4, buf); err != nil {
		return fmt.Errorf("failed to serialize p4: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call fadeRGB failed: %s", err)
	}
	return nil
}
func (p *ALLeds) FadeRGB_0(p0 string, p1 string, p2 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteFloat32(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(119, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call fadeRGB failed: %s", err)
	}
	return nil
}
func (p *ALLeds) _fadeRGB(p0 string, p1 float32, p2 float32, p3 float32, p4 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteFloat32(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteFloat32(p3, buf); err != nil {
		return fmt.Errorf("failed to serialize p3: %s", err)
	}
	if err = basic.WriteFloat32(p4, buf); err != nil {
		return fmt.Errorf("failed to serialize p4: %s", err)
	}
	_, err = p.Call(121, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _fadeRGB failed: %s", err)
	}
	return nil
}
func (p *ALLeds) Reset(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(122, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call reset failed: %s", err)
	}
	return nil
}
func (p *ALLeds) _setIntensityRatio(p0 string, p1 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(123, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setIntensityRatio failed: %s", err)
	}
	return nil
}
func (p *ALLeds) GetIntensity(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(124, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getIntensity failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getIntensity response: %s", err)
	}
	return ret, nil
}
func (p *ALLeds) ListLEDs() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(125, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call listLEDs failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse listLEDs response: %s", err)
	}
	return ret, nil
}
func (p *ALLeds) ListLED(p0 string) ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(126, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call listLED failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse listLED response: %s", err)
	}
	return ret, nil
}
func (p *ALLeds) ListGroup(p0 string) ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(127, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call listGroup failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse listGroup response: %s", err)
	}
	return ret, nil
}
func (p *ALLeds) ListGroups() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(128, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call listGroups failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse listGroups response: %s", err)
	}
	return ret, nil
}
func (p *ALLeds) Off(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(129, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call off failed: %s", err)
	}
	return nil
}
func (p *ALLeds) On(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(130, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call on failed: %s", err)
	}
	return nil
}
func (p *ALLeds) Rasta(p0 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(131, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call rasta failed: %s", err)
	}
	return nil
}
func (p *ALLeds) RandomEyes(p0 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(133, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call randomEyes failed: %s", err)
	}
	return nil
}
func (p *ALLeds) SetIntensity(p0 string, p1 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(134, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setIntensity failed: %s", err)
	}
	return nil
}
func (p *ALLeds) _blink() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(135, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _blink failed: %s", err)
	}
	return nil
}
func (p *ALLeds) _setAnyLedIntensity(p0 string, p1 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(137, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setAnyLedIntensity failed: %s", err)
	}
	return nil
}
func (p *ALLeds) _startPassiveBlinking() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(138, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _startPassiveBlinking failed: %s", err)
	}
	return nil
}
func (p *ALLeds) _stopPassiveBlinking() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(140, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _stopPassiveBlinking failed: %s", err)
	}
	return nil
}
func (p *ALLeds) _blinkWithShadow() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(141, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _blinkWithShadow failed: %s", err)
	}
	return nil
}
func (p *ALLeds) _setTimeBetweenTwoBlinks(p0 float32, p1 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(142, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setTimeBetweenTwoBlinks failed: %s", err)
	}
	return nil
}

type ALWorldRepresentation struct {
	session.Proxy
}

func NewALWorldRepresentation(ses session.Session, obj uint32) (*ALWorldRepresentation, error) {
	proxy, err := ses.Proxy("ALWorldRepresentation", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALWorldRepresentation{proxy}, nil
}
func (p *ALWorldRepresentation) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALWorldRepresentation) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALWorldRepresentation) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALWorldRepresentation) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALWorldRepresentation) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALWorldRepresentation) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALWorldRepresentation) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALWorldRepresentation) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALWorldRepresentation) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALWorldRepresentation) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALWorldRepresentation) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALWorldRepresentation) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALWorldRepresentation) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALWorldRepresentation) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALWorldRepresentation) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALWorldRepresentation) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALWorldRepresentation) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALWorldRepresentation) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALWorldRepresentation) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALWorldRepresentation) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALWorldRepresentation) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALWorldRepresentation) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALWorldRepresentation) ObjectCategoryExists(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(119, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call objectCategoryExists failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse objectCategoryExists response: %s", err)
	}
	return ret, nil
}
func (p *ALWorldRepresentation) FindObject(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(121, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call findObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse findObject response: %s", err)
	}
	return ret, nil
}
func (p *ALWorldRepresentation) GetAttributesFromCategory(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(123, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getAttributesFromCategory failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getAttributesFromCategory response: %s", err)
	}
	return ret, nil
}
func (p *ALWorldRepresentation) GetChildrenNames(p0 string) ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(124, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getChildrenNames failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getChildrenNames response: %s", err)
	}
	return ret, nil
}
func (p *ALWorldRepresentation) GetObjectNames() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(125, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getObjectNames failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getObjectNames response: %s", err)
	}
	return ret, nil
}
func (p *ALWorldRepresentation) GetObjectAttributes(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(126, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getObjectAttributes failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getObjectAttributes response: %s", err)
	}
	return ret, nil
}
func (p *ALWorldRepresentation) GetObjectParentName(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(129, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getObjectParentName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getObjectParentName response: %s", err)
	}
	return ret, nil
}
func (p *ALWorldRepresentation) GetObjectsInCategory(p0 string) ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(130, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getObjectsInCategory failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getObjectsInCategory response: %s", err)
	}
	return ret, nil
}
func (p *ALWorldRepresentation) GetObjectCategory(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(131, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getObjectCategory failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getObjectCategory response: %s", err)
	}
	return ret, nil
}
func (p *ALWorldRepresentation) GetPosition(p0 string, p1 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(132, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getPosition failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getPosition response: %s", err)
	}
	return ret, nil
}
func (p *ALWorldRepresentation) GetPosition6D(p0 string, p1 string) ([]float32, error) {
	var err error
	var ret []float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(133, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getPosition6D failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []float32, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]float32, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadFloat32(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getPosition6D response: %s", err)
	}
	return ret, nil
}
func (p *ALWorldRepresentation) GetRootName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(135, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getRootName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getRootName response: %s", err)
	}
	return ret, nil
}
func (p *ALWorldRepresentation) Select(p0 string, p1 string, p2 string, p3 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(137, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call select failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse select response: %s", err)
	}
	return ret, nil
}
func (p *ALWorldRepresentation) SelectWithOrder(p0 string, p1 string, p2 string, p3 string, p4 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	if err = basic.WriteString(p4, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p4: %s", err)
	}
	response, err := p.Call(138, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call selectWithOrder failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse selectWithOrder response: %s", err)
	}
	return ret, nil
}
func (p *ALWorldRepresentation) _stopMemoryCheck() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(146, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _stopMemoryCheck failed: %s", err)
	}
	return nil
}

type ALKnowledgeManager struct {
	session.Proxy
}

func NewALKnowledgeManager(ses session.Session, obj uint32) (*ALKnowledgeManager, error) {
	proxy, err := ses.Proxy("ALKnowledgeManager", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALKnowledgeManager{proxy}, nil
}
func (p *ALKnowledgeManager) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALKnowledgeManager) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALKnowledgeManager) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALKnowledgeManager) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALKnowledgeManager) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALKnowledgeManager) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALKnowledgeManager) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALKnowledgeManager) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALKnowledgeManager) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALKnowledgeManager) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALKnowledgeManager) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALKnowledgeManager) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALKnowledgeManager) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALKnowledgeManager) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}

type ALKnowledge struct {
	session.Proxy
}

func NewALKnowledge(ses session.Session, obj uint32) (*ALKnowledge, error) {
	proxy, err := ses.Proxy("ALKnowledge", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALKnowledge{proxy}, nil
}
func (p *ALKnowledge) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALKnowledge) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALKnowledge) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALKnowledge) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALKnowledge) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALKnowledge) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALKnowledge) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALKnowledge) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALKnowledge) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALKnowledge) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALKnowledge) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALKnowledge) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALKnowledge) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALKnowledge) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALKnowledge) Add(p0 string, p1 string, p2 string, p3 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return fmt.Errorf("failed to serialize p3: %s", err)
	}
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call add failed: %s", err)
	}
	return nil
}
func (p *ALKnowledge) GetSubject(p0 string, p1 string, p2 string) ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(101, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getSubject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getSubject response: %s", err)
	}
	return ret, nil
}
func (p *ALKnowledge) GetPredicate(p0 string, p1 string, p2 string) ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(102, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getPredicate failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getPredicate response: %s", err)
	}
	return ret, nil
}
func (p *ALKnowledge) GetObject(p0 string, p1 string, p2 string) ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getObject response: %s", err)
	}
	return ret, nil
}
func (p *ALKnowledge) Update(p0 string, p1 string, p2 string, p3 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return fmt.Errorf("failed to serialize p3: %s", err)
	}
	_, err = p.Call(104, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call update failed: %s", err)
	}
	return nil
}
func (p *ALKnowledge) Query(p0 string, p1 string, p2 string, p3 string) ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call query failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse query response: %s", err)
	}
	return ret, nil
}
func (p *ALKnowledge) QueryTriplet(p0 string, p1 string, p2 string, p3 string) ([][]string, error) {
	var err error
	var ret [][]string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call queryTriplet failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b [][]string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([][]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = func() (b []string, err error) {
				size, err := basic.ReadUint32(buf)
				if err != nil {
					return b, fmt.Errorf("failed to read slice size: %s", err)
				}
				b = make([]string, size)
				for i := 0; i < int(size); i++ {
					b[i], err = basic.ReadString(buf)
					if err != nil {
						return b, fmt.Errorf("failed to read slice value: %s", err)
					}
				}
				return b, nil
			}()
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse queryTriplet response: %s", err)
	}
	return ret, nil
}
func (p *ALKnowledge) Remove(p0 string, p1 string, p2 string, p3 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return fmt.Errorf("failed to serialize p3: %s", err)
	}
	_, err = p.Call(107, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call remove failed: %s", err)
	}
	return nil
}
func (p *ALKnowledge) Contains(p0 string, p1 string, p2 string, p3 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(108, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call contains failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse contains response: %s", err)
	}
	return ret, nil
}
func (p *ALKnowledge) AddRule(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(109, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call addRule failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse addRule response: %s", err)
	}
	return ret, nil
}
func (p *ALKnowledge) ClearRules() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(110, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearRules failed: %s", err)
	}
	return nil
}
func (p *ALKnowledge) ResetKnowledge(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(111, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call resetKnowledge failed: %s", err)
	}
	return nil
}
func (p *ALKnowledge) ExportModel(p0 string, p1 string, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(112, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exportModel failed: %s", err)
	}
	return nil
}
func (p *ALKnowledge) ImportModel(p0 string, p1 string, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(113, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call importModel failed: %s", err)
	}
	return nil
}
func (p *ALKnowledge) SparqlQuery(p0 string) ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(114, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call sparqlQuery failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse sparqlQuery response: %s", err)
	}
	return ret, nil
}
func (p *ALKnowledge) SparqlQuery_0(p0 string, p1 bool) ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteBool(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(115, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call sparqlQuery failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse sparqlQuery response: %s", err)
	}
	return ret, nil
}

type ALAudioPlayer struct {
	session.Proxy
}

func NewALAudioPlayer(ses session.Session, obj uint32) (*ALAudioPlayer, error) {
	proxy, err := ses.Proxy("ALAudioPlayer", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALAudioPlayer{proxy}, nil
}
func (p *ALAudioPlayer) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALAudioPlayer) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALAudioPlayer) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALAudioPlayer) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALAudioPlayer) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALAudioPlayer) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALAudioPlayer) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALAudioPlayer) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALAudioPlayer) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALAudioPlayer) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALAudioPlayer) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALAudioPlayer) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALAudioPlayer) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALAudioPlayer) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALAudioPlayer) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALAudioPlayer) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALAudioPlayer) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALAudioPlayer) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALAudioPlayer) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALAudioPlayer) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALAudioPlayer) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALAudioPlayer) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALAudioPlayer) PlayFile(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(114, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call playFile failed: %s", err)
	}
	return nil
}
func (p *ALAudioPlayer) PlayFile_0(p0 string, p1 float32, p2 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteFloat32(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call playFile failed: %s", err)
	}
	return nil
}
func (p *ALAudioPlayer) PlayFileInLoop(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call playFileInLoop failed: %s", err)
	}
	return nil
}
func (p *ALAudioPlayer) PlayFileInLoop_0(p0 string, p1 float32, p2 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteFloat32(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(117, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call playFileInLoop failed: %s", err)
	}
	return nil
}
func (p *ALAudioPlayer) PlayFileFromPosition(p0 string, p1 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call playFileFromPosition failed: %s", err)
	}
	return nil
}
func (p *ALAudioPlayer) PlayFileFromPosition_0(p0 string, p1 float32, p2 float32, p3 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteFloat32(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteFloat32(p3, buf); err != nil {
		return fmt.Errorf("failed to serialize p3: %s", err)
	}
	_, err = p.Call(119, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call playFileFromPosition failed: %s", err)
	}
	return nil
}

type ALTextToSpeech struct {
	session.Proxy
}

func NewALTextToSpeech(ses session.Session, obj uint32) (*ALTextToSpeech, error) {
	proxy, err := ses.Proxy("ALTextToSpeech", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALTextToSpeech{proxy}, nil
}
func (p *ALTextToSpeech) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALTextToSpeech) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALTextToSpeech) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALTextToSpeech) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALTextToSpeech) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALTextToSpeech) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALTextToSpeech) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALTextToSpeech) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALTextToSpeech) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALTextToSpeech) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALTextToSpeech) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALTextToSpeech) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALTextToSpeech) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALTextToSpeech) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALTextToSpeech) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALTextToSpeech) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALTextToSpeech) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALTextToSpeech) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALTextToSpeech) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALTextToSpeech) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALTextToSpeech) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALTextToSpeech) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALTextToSpeech) Say(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(114, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call say failed: %s", err)
	}
	return nil
}
func (p *ALTextToSpeech) Say_0(p0 string, p1 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call say failed: %s", err)
	}
	return nil
}
func (p *ALTextToSpeech) SayToFile(p0 string, p1 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call sayToFile failed: %s", err)
	}
	return nil
}
func (p *ALTextToSpeech) StopAll() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(117, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call stopAll failed: %s", err)
	}
	return nil
}
func (p *ALTextToSpeech) SetLanguage(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setLanguage failed: %s", err)
	}
	return nil
}
func (p *ALTextToSpeech) GetLanguage() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(119, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getLanguage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getLanguage response: %s", err)
	}
	return ret, nil
}
func (p *ALTextToSpeech) GetAvailableLanguages() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(120, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getAvailableLanguages failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getAvailableLanguages response: %s", err)
	}
	return ret, nil
}
func (p *ALTextToSpeech) GetSupportedLanguages() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(121, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getSupportedLanguages failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getSupportedLanguages response: %s", err)
	}
	return ret, nil
}
func (p *ALTextToSpeech) ResetSpeed() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(122, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call resetSpeed failed: %s", err)
	}
	return nil
}
func (p *ALTextToSpeech) SetParameter(p0 string, p1 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(123, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setParameter failed: %s", err)
	}
	return nil
}
func (p *ALTextToSpeech) GetParameter(p0 string) (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(124, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getParameter failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getParameter response: %s", err)
	}
	return ret, nil
}
func (p *ALTextToSpeech) SetVoice(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(125, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setVoice failed: %s", err)
	}
	return nil
}
func (p *ALTextToSpeech) GetVoice() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(126, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getVoice failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getVoice response: %s", err)
	}
	return ret, nil
}
func (p *ALTextToSpeech) GetAvailableVoices() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(127, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getAvailableVoices failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getAvailableVoices response: %s", err)
	}
	return ret, nil
}
func (p *ALTextToSpeech) SetVolume(p0 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(128, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setVolume failed: %s", err)
	}
	return nil
}
func (p *ALTextToSpeech) GetVolume() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(129, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getVolume failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getVolume response: %s", err)
	}
	return ret, nil
}
func (p *ALTextToSpeech) Locale() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(130, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call locale failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse locale response: %s", err)
	}
	return ret, nil
}
func (p *ALTextToSpeech) LoadVoicePreference(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(131, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call loadVoicePreference failed: %s", err)
	}
	return nil
}
func (p *ALTextToSpeech) _setDefaultLanguage(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(132, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setDefaultLanguage failed: %s", err)
	}
	return nil
}
func (p *ALTextToSpeech) SetLanguageDefaultVoice(p0 string, p1 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(133, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setLanguageDefaultVoice failed: %s", err)
	}
	return nil
}
func (p *ALTextToSpeech) _setDefaultVoice() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(134, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setDefaultVoice failed: %s", err)
	}
	return nil
}
func (p *ALTextToSpeech) _naoStoreApplicationInstalled(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(135, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _naoStoreApplicationInstalled failed: %s", err)
	}
	return nil
}
func (p *ALTextToSpeech) _naoStoreApplicationUninstalled(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(136, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _naoStoreApplicationUninstalled failed: %s", err)
	}
	return nil
}
func (p *ALTextToSpeech) _pause() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(137, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _pause failed: %s", err)
	}
	return nil
}
func (p *ALTextToSpeech) _resume() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(138, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _resume failed: %s", err)
	}
	return nil
}
func (p *ALTextToSpeech) _enableFilter(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(139, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _enableFilter failed: %s", err)
	}
	return nil
}
func (p *ALTextToSpeech) _loadEffect(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(140, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _loadEffect failed: %s", err)
	}
	return nil
}
func (p *ALTextToSpeech) _applyEffect(p0 string, p1 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteBool(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(141, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _applyEffect failed: %s", err)
	}
	return nil
}
func (p *ALTextToSpeech) _diagnosis() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(142, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _diagnosis failed: %s", err)
	}
	return nil
}
func (p *ALTextToSpeech) _showVoiceSettings() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(143, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _showVoiceSettings failed: %s", err)
	}
	return nil
}
func (p *ALTextToSpeech) ShowDictionary() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(144, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call showDictionary failed: %s", err)
	}
	return nil
}
func (p *ALTextToSpeech) Reset() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(145, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call reset failed: %s", err)
	}
	return nil
}
func (p *ALTextToSpeech) _unloadDictionary() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(146, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _unloadDictionary failed: %s", err)
	}
	return nil
}
func (p *ALTextToSpeech) DeleteFromDictionary(p0 string, p1 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(147, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call deleteFromDictionary failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse deleteFromDictionary response: %s", err)
	}
	return ret, nil
}
func (p *ALTextToSpeech) DeleteFromDictionary_0(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(148, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call deleteFromDictionary failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse deleteFromDictionary response: %s", err)
	}
	return ret, nil
}
func (p *ALTextToSpeech) AddToDictionary(p0 string, p1 string, p2 string, p3 string, p4 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	if err = basic.WriteString(p4, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p4: %s", err)
	}
	response, err := p.Call(149, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call addToDictionary failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse addToDictionary response: %s", err)
	}
	return ret, nil
}
func (p *ALTextToSpeech) AddToDictionary_0(p0 string, p1 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(150, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call addToDictionary failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse addToDictionary response: %s", err)
	}
	return ret, nil
}
func (p *ALTextToSpeech) _loadDictionary() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(151, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _loadDictionary failed: %s", err)
	}
	return nil
}

type ALBattery struct {
	session.Proxy
}

func NewALBattery(ses session.Session, obj uint32) (*ALBattery, error) {
	proxy, err := ses.Proxy("ALBattery", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALBattery{proxy}, nil
}
func (p *ALBattery) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALBattery) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALBattery) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALBattery) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALBattery) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALBattery) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALBattery) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALBattery) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALBattery) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALBattery) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALBattery) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALBattery) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALBattery) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALBattery) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALBattery) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALBattery) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALBattery) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALBattery) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALBattery) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALBattery) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALBattery) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALBattery) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALBattery) EnablePowerMonitoring(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(114, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enablePowerMonitoring failed: %s", err)
	}
	return nil
}
func (p *ALBattery) _hasBattery() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(119, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _hasBattery failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _hasBattery response: %s", err)
	}
	return ret, nil
}
func (p *ALBattery) _setModeSlave(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(123, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setModeSlave failed: %s", err)
	}
	return nil
}

type ALFrameManager struct {
	session.Proxy
}

func NewALFrameManager(ses session.Session, obj uint32) (*ALFrameManager, error) {
	proxy, err := ses.Proxy("ALFrameManager", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALFrameManager{proxy}, nil
}
func (p *ALFrameManager) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALFrameManager) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALFrameManager) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALFrameManager) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALFrameManager) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALFrameManager) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALFrameManager) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALFrameManager) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALFrameManager) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALFrameManager) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALFrameManager) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALFrameManager) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALFrameManager) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALFrameManager) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALFrameManager) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALFrameManager) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALFrameManager) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALFrameManager) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALFrameManager) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALFrameManager) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALFrameManager) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALFrameManager) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALFrameManager) NewBehaviorFromFile(p0 string, p1 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(114, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call newBehaviorFromFile failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse newBehaviorFromFile response: %s", err)
	}
	return ret, nil
}
func (p *ALFrameManager) CreateBehavior(p0 string, p1 string, p2 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(115, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call createBehavior failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse createBehavior response: %s", err)
	}
	return ret, nil
}
func (p *ALFrameManager) NewBehaviorFromChoregraphe() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(116, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call newBehaviorFromChoregraphe failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse newBehaviorFromChoregraphe response: %s", err)
	}
	return ret, nil
}
func (p *ALFrameManager) CompleteBehavior(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(117, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call completeBehavior failed: %s", err)
	}
	return nil
}
func (p *ALFrameManager) DeleteBehavior(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call deleteBehavior failed: %s", err)
	}
	return nil
}
func (p *ALFrameManager) PlayBehavior(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(119, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call playBehavior failed: %s", err)
	}
	return nil
}
func (p *ALFrameManager) ExitBehavior(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(120, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exitBehavior failed: %s", err)
	}
	return nil
}
func (p *ALFrameManager) IsBehaviorRunning(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(121, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isBehaviorRunning failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isBehaviorRunning response: %s", err)
	}
	return ret, nil
}
func (p *ALFrameManager) CleanBehaviors() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(122, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call cleanBehaviors failed: %s", err)
	}
	return nil
}
func (p *ALFrameManager) GetBehaviorPath(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(123, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBehaviorPath failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBehaviorPath response: %s", err)
	}
	return ret, nil
}
func (p *ALFrameManager) CreateTimeline(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(124, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call createTimeline failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse createTimeline response: %s", err)
	}
	return ret, nil
}
func (p *ALFrameManager) PlayTimeline(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(125, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call playTimeline failed: %s", err)
	}
	return nil
}
func (p *ALFrameManager) StopTimeline(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(126, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call stopTimeline failed: %s", err)
	}
	return nil
}
func (p *ALFrameManager) GetMotionLength(p0 string) (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(129, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMotionLength failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMotionLength response: %s", err)
	}
	return ret, nil
}
func (p *ALFrameManager) Behaviors() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(130, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call behaviors failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse behaviors response: %s", err)
	}
	return ret, nil
}
func (p *ALFrameManager) GotoAndStop(p0 string, p1 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(131, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call gotoAndStop failed: %s", err)
	}
	return nil
}
func (p *ALFrameManager) GotoAndPlay(p0 string, p1 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(133, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call gotoAndPlay failed: %s", err)
	}
	return nil
}
func (p *ALFrameManager) _dataChanged(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(135, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _dataChanged failed: %s", err)
	}
	return nil
}
func (p *ALFrameManager) _subscribeBoxToEvent(p0 string, p1 string, p2 string, p3 string, p4 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return fmt.Errorf("failed to serialize p3: %s", err)
	}
	if err = basic.WriteBool(p4, buf); err != nil {
		return fmt.Errorf("failed to serialize p4: %s", err)
	}
	_, err = p.Call(136, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _subscribeBoxToEvent failed: %s", err)
	}
	return nil
}
func (p *ALFrameManager) _unsubscribeBoxToEvent(p0 string, p1 string, p2 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteBool(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(137, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _unsubscribeBoxToEvent failed: %s", err)
	}
	return nil
}
func (p *ALFrameManager) _boxDataChanged(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(138, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _boxDataChanged failed: %s", err)
	}
	return nil
}
func (p *ALFrameManager) _startBenchmark() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(139, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _startBenchmark failed: %s", err)
	}
	return nil
}
func (p *ALFrameManager) _stopBenchmark() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(140, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _stopBenchmark failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _stopBenchmark response: %s", err)
	}
	return ret, nil
}
func (p *ALFrameManager) _newBoxFromFile(p0 string, p1 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(141, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _newBoxFromFile failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _newBoxFromFile response: %s", err)
	}
	return ret, nil
}
func (p *ALFrameManager) _waitForStopped(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(142, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _waitForStopped failed: %s", err)
	}
	return nil
}
func (p *ALFrameManager) _onPreferenceUpdated(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(143, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _onPreferenceUpdated failed: %s", err)
	}
	return nil
}
func (p *ALFrameManager) _onPreferencesSynchronized(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(144, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _onPreferencesSynchronized failed: %s", err)
	}
	return nil
}
func (p *ALFrameManager) _reportError(p0 string, p1 string, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(145, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _reportError failed: %s", err)
	}
	return nil
}
func (p *ALFrameManager) CallBoxInput(p0 string, p1 string, p2 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = p2.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(148, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call callBoxInput failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse callBoxInput response: %s", err)
	}
	return ret, nil
}
func (p *ALFrameManager) CallBoxInput_0(p0 string, p1 string, p2 value.Value, p3 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = p2.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = p3.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(149, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call callBoxInput failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse callBoxInput response: %s", err)
	}
	return ret, nil
}

type ALPythonBridge struct {
	session.Proxy
}

func NewALPythonBridge(ses session.Session, obj uint32) (*ALPythonBridge, error) {
	proxy, err := ses.Proxy("ALPythonBridge", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALPythonBridge{proxy}, nil
}
func (p *ALPythonBridge) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALPythonBridge) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALPythonBridge) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALPythonBridge) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALPythonBridge) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALPythonBridge) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALPythonBridge) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALPythonBridge) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALPythonBridge) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALPythonBridge) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALPythonBridge) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALPythonBridge) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALPythonBridge) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALPythonBridge) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALPythonBridge) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALPythonBridge) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALPythonBridge) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALPythonBridge) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALPythonBridge) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALPythonBridge) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALPythonBridge) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALPythonBridge) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALPythonBridge) Eval(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(114, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call eval failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse eval response: %s", err)
	}
	return ret, nil
}
func (p *ALPythonBridge) EvalReturn(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(115, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call evalReturn failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse evalReturn response: %s", err)
	}
	return ret, nil
}
func (p *ALPythonBridge) EvalFull(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(116, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call evalFull failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse evalFull response: %s", err)
	}
	return ret, nil
}

type ALVideoDevice struct {
	session.Proxy
}

func NewALVideoDevice(ses session.Session, obj uint32) (*ALVideoDevice, error) {
	proxy, err := ses.Proxy("ALVideoDevice", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALVideoDevice{proxy}, nil
}
func (p *ALVideoDevice) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALVideoDevice) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALVideoDevice) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALVideoDevice) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALVideoDevice) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALVideoDevice) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALVideoDevice) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALVideoDevice) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) Unsubscribe(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(116, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call unsubscribe failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse unsubscribe response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) GetSubscribers() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(117, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getSubscribers failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getSubscribers response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) GetCameraIndexes() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(118, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getCameraIndexes failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getCameraIndexes response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) HasDepthCamera() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(147, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call hasDepthCamera failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse hasDepthCamera response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) SetAllCameraParametersToDefault(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(162, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call setAllCameraParametersToDefault failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse setAllCameraParametersToDefault response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) GetDirectRawImageRemote(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(164, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getDirectRawImageRemote failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getDirectRawImageRemote response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) ReleaseDirectRawImage(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(165, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call releaseDirectRawImage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse releaseDirectRawImage response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) GetImageRemote(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(167, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getImageRemote failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getImageRemote response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) ReleaseImage(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(168, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call releaseImage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse releaseImage response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) GetActiveCameras(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(169, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getActiveCameras failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getActiveCameras response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) SetActiveCameras(p0 string, p1 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(170, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call setActiveCameras failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse setActiveCameras response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) GetResolutions(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(171, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getResolutions failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getResolutions response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) SetResolutions(p0 string, p1 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(172, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call setResolutions failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse setResolutions response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) GetColorSpaces(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(173, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getColorSpaces failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getColorSpaces response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) SetColorSpaces(p0 string, p1 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(174, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call setColorSpaces failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse setColorSpaces response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) GetDirectRawImagesLocal(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(178, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getDirectRawImagesLocal failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getDirectRawImagesLocal response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) GetDirectRawImagesRemote(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(179, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getDirectRawImagesRemote failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getDirectRawImagesRemote response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) ReleaseDirectRawImages(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(180, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call releaseDirectRawImages failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse releaseDirectRawImages response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) GetImagesLocal(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(181, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getImagesLocal failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getImagesLocal response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) GetImagesRemote(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(182, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getImagesRemote failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getImagesRemote response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) ReleaseImages(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(183, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call releaseImages failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse releaseImages response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) StopVideo(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(185, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stopVideo failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse stopVideo response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) OnClientDisconnected(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(195, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call onClientDisconnected failed: %s", err)
	}
	return nil
}
func (p *ALVideoDevice) UnsubscribeAllInstances(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(197, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unsubscribeAllInstances failed: %s", err)
	}
	return nil
}
func (p *ALVideoDevice) GetAngPosFromImgPos(p0 []float32) ([]float32, error) {
	var err error
	var ret []float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p0)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p0 {
			err = basic.WriteFloat32(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(210, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getAngPosFromImgPos failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []float32, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]float32, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadFloat32(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getAngPosFromImgPos response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) GetImgPosFromAngPos(p0 []float32) ([]float32, error) {
	var err error
	var ret []float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p0)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p0 {
			err = basic.WriteFloat32(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(211, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getImgPosFromAngPos failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []float32, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]float32, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadFloat32(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getImgPosFromAngPos response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) GetAngSizeFromImgSize(p0 []float32) ([]float32, error) {
	var err error
	var ret []float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p0)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p0 {
			err = basic.WriteFloat32(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(212, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getAngSizeFromImgSize failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []float32, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]float32, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadFloat32(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getAngSizeFromImgSize response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) GetImgSizeFromAngSize(p0 []float32) ([]float32, error) {
	var err error
	var ret []float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p0)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p0 {
			err = basic.WriteFloat32(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(213, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getImgSizeFromAngSize failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []float32, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]float32, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadFloat32(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getImgSizeFromAngSize response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) GetImgInfoFromAngInfo(p0 []float32) ([]float32, error) {
	var err error
	var ret []float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p0)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p0 {
			err = basic.WriteFloat32(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(214, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getImgInfoFromAngInfo failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []float32, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]float32, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadFloat32(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getImgInfoFromAngInfo response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) GetExpectedImageParameters_0() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(218, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getExpectedImageParameters failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getExpectedImageParameters response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) PutImage_0(p0 value.Value) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(220, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call putImage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse putImage response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) StartFrameGrabber_0() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(222, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call startFrameGrabber failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse startFrameGrabber response: %s", err)
	}
	return ret, nil
}
func (p *ALVideoDevice) StopFrameGrabber_0() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(223, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stopFrameGrabber failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse stopFrameGrabber response: %s", err)
	}
	return ret, nil
}

type ALRedBallDetection struct {
	session.Proxy
}

func NewALRedBallDetection(ses session.Session, obj uint32) (*ALRedBallDetection, error) {
	proxy, err := ses.Proxy("ALRedBallDetection", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALRedBallDetection{proxy}, nil
}
func (p *ALRedBallDetection) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALRedBallDetection) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALRedBallDetection) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALRedBallDetection) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALRedBallDetection) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALRedBallDetection) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALRedBallDetection) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALRedBallDetection) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALRedBallDetection) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALRedBallDetection) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALRedBallDetection) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALRedBallDetection) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALRedBallDetection) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALRedBallDetection) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALRedBallDetection) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALRedBallDetection) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALRedBallDetection) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALRedBallDetection) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALRedBallDetection) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALRedBallDetection) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALRedBallDetection) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALRedBallDetection) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALRedBallDetection) Subscribe_0(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call subscribe failed: %s", err)
	}
	return nil
}
func (p *ALRedBallDetection) Unsubscribe(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unsubscribe failed: %s", err)
	}
	return nil
}
func (p *ALRedBallDetection) UpdatePrecision(p0 string, p1 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call updatePrecision failed: %s", err)
	}
	return nil
}
func (p *ALRedBallDetection) GetCurrentPrecision() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(120, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getCurrentPrecision failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getCurrentPrecision response: %s", err)
	}
	return ret, nil
}
func (p *ALRedBallDetection) GetMyPrecision(p0 string) (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(122, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMyPrecision failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMyPrecision response: %s", err)
	}
	return ret, nil
}
func (p *ALRedBallDetection) GetSubscribersInfo() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(123, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getSubscribersInfo failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getSubscribersInfo response: %s", err)
	}
	return ret, nil
}
func (p *ALRedBallDetection) GetOutputNames() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(124, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getOutputNames failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getOutputNames response: %s", err)
	}
	return ret, nil
}
func (p *ALRedBallDetection) GetEventList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(125, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getEventList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getEventList response: %s", err)
	}
	return ret, nil
}
func (p *ALRedBallDetection) GetMemoryKeyList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(126, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMemoryKeyList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMemoryKeyList response: %s", err)
	}
	return ret, nil
}
func (p *ALRedBallDetection) _run() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(127, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _run failed: %s", err)
	}
	return nil
}

type ALVisionRecognition struct {
	session.Proxy
}

func NewALVisionRecognition(ses session.Session, obj uint32) (*ALVisionRecognition, error) {
	proxy, err := ses.Proxy("ALVisionRecognition", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALVisionRecognition{proxy}, nil
}
func (p *ALVisionRecognition) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALVisionRecognition) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALVisionRecognition) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALVisionRecognition) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALVisionRecognition) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALVisionRecognition) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALVisionRecognition) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALVisionRecognition) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALVisionRecognition) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALVisionRecognition) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALVisionRecognition) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALVisionRecognition) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALVisionRecognition) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALVisionRecognition) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALVisionRecognition) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALVisionRecognition) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALVisionRecognition) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALVisionRecognition) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALVisionRecognition) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALVisionRecognition) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALVisionRecognition) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALVisionRecognition) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALVisionRecognition) Subscribe_0(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call subscribe failed: %s", err)
	}
	return nil
}
func (p *ALVisionRecognition) Unsubscribe(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unsubscribe failed: %s", err)
	}
	return nil
}
func (p *ALVisionRecognition) UpdatePrecision(p0 string, p1 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call updatePrecision failed: %s", err)
	}
	return nil
}
func (p *ALVisionRecognition) GetCurrentPrecision() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(120, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getCurrentPrecision failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getCurrentPrecision response: %s", err)
	}
	return ret, nil
}
func (p *ALVisionRecognition) GetMyPrecision(p0 string) (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(122, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMyPrecision failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMyPrecision response: %s", err)
	}
	return ret, nil
}
func (p *ALVisionRecognition) GetSubscribersInfo() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(123, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getSubscribersInfo failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getSubscribersInfo response: %s", err)
	}
	return ret, nil
}
func (p *ALVisionRecognition) GetOutputNames() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(124, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getOutputNames failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getOutputNames response: %s", err)
	}
	return ret, nil
}
func (p *ALVisionRecognition) GetEventList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(125, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getEventList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getEventList response: %s", err)
	}
	return ret, nil
}
func (p *ALVisionRecognition) GetMemoryKeyList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(126, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMemoryKeyList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMemoryKeyList response: %s", err)
	}
	return ret, nil
}
func (p *ALVisionRecognition) SetParameter(p0 string, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(131, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setParameter failed: %s", err)
	}
	return nil
}
func (p *ALVisionRecognition) IsPaused() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(135, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isPaused failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isPaused response: %s", err)
	}
	return ret, nil
}
func (p *ALVisionRecognition) IsProcessing() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(136, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isProcessing failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isProcessing response: %s", err)
	}
	return ret, nil
}
func (p *ALVisionRecognition) Pause(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(137, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call pause failed: %s", err)
	}
	return nil
}
func (p *ALVisionRecognition) _run() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(138, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _run failed: %s", err)
	}
	return nil
}
func (p *ALVisionRecognition) ChangeDatabase(p0 string, p1 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(139, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call changeDatabase failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse changeDatabase response: %s", err)
	}
	return ret, nil
}
func (p *ALVisionRecognition) ClearCurrentDatabase() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(140, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearCurrentDatabase failed: %s", err)
	}
	return nil
}
func (p *ALVisionRecognition) SetParam(p0 string, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(141, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setParam failed: %s", err)
	}
	return nil
}
func (p *ALVisionRecognition) GetParam(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(142, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getParam failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getParam response: %s", err)
	}
	return ret, nil
}
func (p *ALVisionRecognition) LearnFromFile(p0 string, p1 string, p2 []string, p3 bool, p4 bool) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p2)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p2 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteBool(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	if err = basic.WriteBool(p4, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p4: %s", err)
	}
	response, err := p.Call(143, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call learnFromFile failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse learnFromFile response: %s", err)
	}
	return ret, nil
}
func (p *ALVisionRecognition) _removeObject(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(147, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _removeObject failed: %s", err)
	}
	return nil
}
func (p *ALVisionRecognition) DetectFromFile(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(148, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call detectFromFile failed: %s", err)
	}
	return nil
}
func (p *ALVisionRecognition) GetDefaultDatabaseDirectory() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(149, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getDefaultDatabaseDirectory failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getDefaultDatabaseDirectory response: %s", err)
	}
	return ret, nil
}
func (p *ALVisionRecognition) GetDefaultDatabaseName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(150, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getDefaultDatabaseName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getDefaultDatabaseName response: %s", err)
	}
	return ret, nil
}

type ALBehaviorManager struct {
	session.Proxy
}

func NewALBehaviorManager(ses session.Session, obj uint32) (*ALBehaviorManager, error) {
	proxy, err := ses.Proxy("ALBehaviorManager", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALBehaviorManager{proxy}, nil
}
func (p *ALBehaviorManager) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALBehaviorManager) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALBehaviorManager) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALBehaviorManager) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALBehaviorManager) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALBehaviorManager) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALBehaviorManager) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALBehaviorManager) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALBehaviorManager) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALBehaviorManager) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALBehaviorManager) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALBehaviorManager) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALBehaviorManager) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALBehaviorManager) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALBehaviorManager) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALBehaviorManager) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALBehaviorManager) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALBehaviorManager) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALBehaviorManager) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALBehaviorManager) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALBehaviorManager) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALBehaviorManager) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALBehaviorManager) PreloadBehavior(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(114, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call preloadBehavior failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse preloadBehavior response: %s", err)
	}
	return ret, nil
}
func (p *ALBehaviorManager) StartBehavior(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call startBehavior failed: %s", err)
	}
	return nil
}
func (p *ALBehaviorManager) RunBehavior(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call runBehavior failed: %s", err)
	}
	return nil
}
func (p *ALBehaviorManager) StopBehavior(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(117, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call stopBehavior failed: %s", err)
	}
	return nil
}
func (p *ALBehaviorManager) StopAllBehaviors() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call stopAllBehaviors failed: %s", err)
	}
	return nil
}
func (p *ALBehaviorManager) IsBehaviorInstalled(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(119, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isBehaviorInstalled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isBehaviorInstalled response: %s", err)
	}
	return ret, nil
}
func (p *ALBehaviorManager) IsBehaviorPresent(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(120, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isBehaviorPresent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isBehaviorPresent response: %s", err)
	}
	return ret, nil
}
func (p *ALBehaviorManager) GetBehaviorNames() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(121, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBehaviorNames failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBehaviorNames response: %s", err)
	}
	return ret, nil
}
func (p *ALBehaviorManager) GetUserBehaviorNames() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(122, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUserBehaviorNames failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUserBehaviorNames response: %s", err)
	}
	return ret, nil
}
func (p *ALBehaviorManager) GetSystemBehaviorNames() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(123, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getSystemBehaviorNames failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getSystemBehaviorNames response: %s", err)
	}
	return ret, nil
}
func (p *ALBehaviorManager) GetInstalledBehaviors() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(124, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getInstalledBehaviors failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getInstalledBehaviors response: %s", err)
	}
	return ret, nil
}
func (p *ALBehaviorManager) GetBehaviorsByTag(p0 string) ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(125, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBehaviorsByTag failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBehaviorsByTag response: %s", err)
	}
	return ret, nil
}
func (p *ALBehaviorManager) IsBehaviorRunning(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(126, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isBehaviorRunning failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isBehaviorRunning response: %s", err)
	}
	return ret, nil
}
func (p *ALBehaviorManager) IsBehaviorLoaded(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(127, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isBehaviorLoaded failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isBehaviorLoaded response: %s", err)
	}
	return ret, nil
}
func (p *ALBehaviorManager) GetRunningBehaviors() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(128, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getRunningBehaviors failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getRunningBehaviors response: %s", err)
	}
	return ret, nil
}
func (p *ALBehaviorManager) GetLoadedBehaviors() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(129, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getLoadedBehaviors failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getLoadedBehaviors response: %s", err)
	}
	return ret, nil
}
func (p *ALBehaviorManager) GetTagList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(130, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getTagList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getTagList response: %s", err)
	}
	return ret, nil
}
func (p *ALBehaviorManager) GetBehaviorTags(p0 string) ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(131, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBehaviorTags failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBehaviorTags response: %s", err)
	}
	return ret, nil
}
func (p *ALBehaviorManager) GetBehaviorNature(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(132, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBehaviorNature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBehaviorNature response: %s", err)
	}
	return ret, nil
}
func (p *ALBehaviorManager) _getBehaviorRelativePath(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(133, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getBehaviorRelativePath failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getBehaviorRelativePath response: %s", err)
	}
	return ret, nil
}
func (p *ALBehaviorManager) _getPackageUid(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(134, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getPackageUid failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getPackageUid response: %s", err)
	}
	return ret, nil
}
func (p *ALBehaviorManager) AddDefaultBehavior(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(135, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call addDefaultBehavior failed: %s", err)
	}
	return nil
}
func (p *ALBehaviorManager) RemoveDefaultBehavior(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(136, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call removeDefaultBehavior failed: %s", err)
	}
	return nil
}
func (p *ALBehaviorManager) GetDefaultBehaviors() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(137, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getDefaultBehaviors failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getDefaultBehaviors response: %s", err)
	}
	return ret, nil
}
func (p *ALBehaviorManager) PlayDefaultProject() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(138, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call playDefaultProject failed: %s", err)
	}
	return nil
}
func (p *ALBehaviorManager) _onDataChanged(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(139, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _onDataChanged failed: %s", err)
	}
	return nil
}
func (p *ALBehaviorManager) _getBehaviorFrameManagerId(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(140, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getBehaviorFrameManagerId failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getBehaviorFrameManagerId response: %s", err)
	}
	return ret, nil
}
func (p *ALBehaviorManager) ResolveBehaviorName(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(141, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call resolveBehaviorName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse resolveBehaviorName response: %s", err)
	}
	return ret, nil
}

type _ALMovementScheduler struct {
	session.Proxy
}

func New_ALMovementScheduler(ses session.Session, obj uint32) (*_ALMovementScheduler, error) {
	proxy, err := ses.Proxy("_ALMovementScheduler", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &_ALMovementScheduler{proxy}, nil
}
func (p *_ALMovementScheduler) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *_ALMovementScheduler) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *_ALMovementScheduler) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *_ALMovementScheduler) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *_ALMovementScheduler) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *_ALMovementScheduler) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *_ALMovementScheduler) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *_ALMovementScheduler) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *_ALMovementScheduler) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_ALMovementScheduler) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *_ALMovementScheduler) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *_ALMovementScheduler) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *_ALMovementScheduler) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_ALMovementScheduler) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *_ALMovementScheduler) PrintTasks() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(100, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call printTasks failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse printTasks response: %s", err)
	}
	return ret, nil
}
func (p *_ALMovementScheduler) Reset() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(102, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call reset failed: %s", err)
	}
	return nil
}
func (p *_ALMovementScheduler) _inhibitAutonomousTasks(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(103, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _inhibitAutonomousTasks failed: %s", err)
	}
	return nil
}

type ALAnimationPlayer struct {
	session.Proxy
}

func NewALAnimationPlayer(ses session.Session, obj uint32) (*ALAnimationPlayer, error) {
	proxy, err := ses.Proxy("ALAnimationPlayer", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALAnimationPlayer{proxy}, nil
}
func (p *ALAnimationPlayer) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALAnimationPlayer) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALAnimationPlayer) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALAnimationPlayer) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALAnimationPlayer) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALAnimationPlayer) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALAnimationPlayer) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALAnimationPlayer) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALAnimationPlayer) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALAnimationPlayer) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALAnimationPlayer) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALAnimationPlayer) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALAnimationPlayer) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALAnimationPlayer) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALAnimationPlayer) AddTagForAnimations(p0 map[string][]string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p0)), buf)
		if err != nil {
			return fmt.Errorf("failed to write map size: %s", err)
		}
		for k, v := range p0 {
			err = basic.WriteString(k, buf)
			if err != nil {
				return fmt.Errorf("failed to write map key: %s", err)
			}
			err = func() error {
				err := basic.WriteUint32(uint32(len(v)), buf)
				if err != nil {
					return fmt.Errorf("failed to write slice size: %s", err)
				}
				for _, v := range v {
					err = basic.WriteString(v, buf)
					if err != nil {
						return fmt.Errorf("failed to write slice value: %s", err)
					}
				}
				return nil
			}()
			if err != nil {
				return fmt.Errorf("failed to write map value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call addTagForAnimations failed: %s", err)
	}
	return nil
}
func (p *ALAnimationPlayer) DeclarePathForTags(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(101, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call declarePathForTags failed: %s", err)
	}
	return nil
}
func (p *ALAnimationPlayer) _declarePathForTagsPermanently(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(102, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _declarePathForTagsPermanently failed: %s", err)
	}
	return nil
}
func (p *ALAnimationPlayer) Reset() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(103, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call reset failed: %s", err)
	}
	return nil
}
func (p *ALAnimationPlayer) _getPathsForTags() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getPathsForTags failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getPathsForTags response: %s", err)
	}
	return ret, nil
}
func (p *ALAnimationPlayer) _getTags() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getTags failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getTags response: %s", err)
	}
	return ret, nil
}
func (p *ALAnimationPlayer) _getTags_0(p0 string) ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getTags failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getTags response: %s", err)
	}
	return ret, nil
}
func (p *ALAnimationPlayer) _getAnimations() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getAnimations failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getAnimations response: %s", err)
	}
	return ret, nil
}
func (p *ALAnimationPlayer) _getAnimations_0(p0 string) ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(108, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getAnimations failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getAnimations response: %s", err)
	}
	return ret, nil
}
func (p *ALAnimationPlayer) _getAnimationsForTag(p0 string) ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(109, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getAnimationsForTag failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getAnimationsForTag response: %s", err)
	}
	return ret, nil
}
func (p *ALAnimationPlayer) _getAnimationsForTag_0(p0 string, p1 string) ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(110, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getAnimationsForTag failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getAnimationsForTag response: %s", err)
	}
	return ret, nil
}
func (p *ALAnimationPlayer) Run(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(111, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call run failed: %s", err)
	}
	return nil
}
func (p *ALAnimationPlayer) RunTag(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(112, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call runTag failed: %s", err)
	}
	return nil
}
func (p *ALAnimationPlayer) RunTag_0(p0 string, p1 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(113, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call runTag failed: %s", err)
	}
	return nil
}

type ALSpeakingMovement struct {
	session.Proxy
}

func NewALSpeakingMovement(ses session.Session, obj uint32) (*ALSpeakingMovement, error) {
	proxy, err := ses.Proxy("ALSpeakingMovement", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALSpeakingMovement{proxy}, nil
}
func (p *ALSpeakingMovement) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALSpeakingMovement) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALSpeakingMovement) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALSpeakingMovement) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALSpeakingMovement) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALSpeakingMovement) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALSpeakingMovement) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALSpeakingMovement) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALSpeakingMovement) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALSpeakingMovement) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALSpeakingMovement) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALSpeakingMovement) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALSpeakingMovement) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALSpeakingMovement) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALSpeakingMovement) SetEnabled(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setEnabled failed: %s", err)
	}
	return nil
}
func (p *ALSpeakingMovement) IsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(101, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALSpeakingMovement) IsRunning() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(102, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isRunning failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isRunning response: %s", err)
	}
	return ret, nil
}
func (p *ALSpeakingMovement) SetMode(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(103, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setMode failed: %s", err)
	}
	return nil
}
func (p *ALSpeakingMovement) GetMode() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMode failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMode response: %s", err)
	}
	return ret, nil
}
func (p *ALSpeakingMovement) AddTagsToWords(p0 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(105, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call addTagsToWords failed: %s", err)
	}
	return nil
}
func (p *ALSpeakingMovement) ResetTagsToWords() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(106, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call resetTagsToWords failed: %s", err)
	}
	return nil
}
func (p *ALSpeakingMovement) _reset() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(107, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _reset failed: %s", err)
	}
	return nil
}

type ALAnimatedSpeech struct {
	session.Proxy
}

func NewALAnimatedSpeech(ses session.Session, obj uint32) (*ALAnimatedSpeech, error) {
	proxy, err := ses.Proxy("ALAnimatedSpeech", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALAnimatedSpeech{proxy}, nil
}
func (p *ALAnimatedSpeech) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALAnimatedSpeech) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALAnimatedSpeech) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALAnimatedSpeech) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALAnimatedSpeech) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALAnimatedSpeech) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALAnimatedSpeech) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALAnimatedSpeech) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALAnimatedSpeech) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALAnimatedSpeech) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALAnimatedSpeech) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALAnimatedSpeech) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALAnimatedSpeech) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALAnimatedSpeech) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALAnimatedSpeech) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALAnimatedSpeech) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALAnimatedSpeech) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALAnimatedSpeech) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALAnimatedSpeech) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALAnimatedSpeech) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALAnimatedSpeech) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALAnimatedSpeech) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALAnimatedSpeech) Say(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(114, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call say failed: %s", err)
	}
	return nil
}
func (p *ALAnimatedSpeech) Say_0(p0 string, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call say failed: %s", err)
	}
	return nil
}
func (p *ALAnimatedSpeech) _reset() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _reset failed: %s", err)
	}
	return nil
}
func (p *ALAnimatedSpeech) _stopAll(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(117, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _stopAll failed: %s", err)
	}
	return nil
}
func (p *ALAnimatedSpeech) _isRunning() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(118, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _isRunning failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _isRunning response: %s", err)
	}
	return ret, nil
}
func (p *ALAnimatedSpeech) SetBodyTalkEnabled(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(119, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setBodyTalkEnabled failed: %s", err)
	}
	return nil
}
func (p *ALAnimatedSpeech) SetBodyLanguageEnabled(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(120, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setBodyLanguageEnabled failed: %s", err)
	}
	return nil
}
func (p *ALAnimatedSpeech) SetBodyLanguageModeFromStr(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(121, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setBodyLanguageModeFromStr failed: %s", err)
	}
	return nil
}
func (p *ALAnimatedSpeech) SetBodyLanguageMode(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(122, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setBodyLanguageMode failed: %s", err)
	}
	return nil
}
func (p *ALAnimatedSpeech) GetBodyLanguageModeToStr() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(123, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBodyLanguageModeToStr failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBodyLanguageModeToStr response: %s", err)
	}
	return ret, nil
}
func (p *ALAnimatedSpeech) GetBodyLanguageMode() (uint32, error) {
	var err error
	var ret uint32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(124, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBodyLanguageMode failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBodyLanguageMode response: %s", err)
	}
	return ret, nil
}
func (p *ALAnimatedSpeech) DeclareAnimationsPackage(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(125, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call declareAnimationsPackage failed: %s", err)
	}
	return nil
}
func (p *ALAnimatedSpeech) _getMSPauseBeforeSpeech() (uint32, error) {
	var err error
	var ret uint32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(127, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getMSPauseBeforeSpeech failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getMSPauseBeforeSpeech response: %s", err)
	}
	return ret, nil
}
func (p *ALAnimatedSpeech) _isCheckExecutionTimesEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(128, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _isCheckExecutionTimesEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _isCheckExecutionTimesEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALAnimatedSpeech) _setCheckExecutionTimes(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(129, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setCheckExecutionTimes failed: %s", err)
	}
	return nil
}
func (p *ALAnimatedSpeech) AddTagsToWords(p0 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(130, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call addTagsToWords failed: %s", err)
	}
	return nil
}
func (p *ALAnimatedSpeech) DeclareTagForAnimations(p0 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(131, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call declareTagForAnimations failed: %s", err)
	}
	return nil
}
func (p *ALAnimatedSpeech) _diagnosis() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(132, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _diagnosis failed: %s", err)
	}
	return nil
}
func (p *ALAnimatedSpeech) IsBodyTalkEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(133, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isBodyTalkEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isBodyTalkEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALAnimatedSpeech) IsBodyLanguageEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(134, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isBodyLanguageEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isBodyLanguageEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALAnimatedSpeech) _getTagList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(135, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getTagList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getTagList response: %s", err)
	}
	return ret, nil
}
func (p *ALAnimatedSpeech) _getAnimationsByTag(p0 string) ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(136, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getAnimationsByTag failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getAnimationsByTag response: %s", err)
	}
	return ret, nil
}
func (p *ALAnimatedSpeech) _speechBookMarkCallback(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(137, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _speechBookMarkCallback failed: %s", err)
	}
	return nil
}
func (p *ALAnimatedSpeech) _mrkpauseCallback(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(138, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _mrkpauseCallback failed: %s", err)
	}
	return nil
}
func (p *ALAnimatedSpeech) _speechStatusCallback(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(139, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _speechStatusCallback failed: %s", err)
	}
	return nil
}
func (p *ALAnimatedSpeech) _postureFamilyChangedCallback(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(140, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _postureFamilyChangedCallback failed: %s", err)
	}
	return nil
}

type ALColorBlobDetection struct {
	session.Proxy
}

func NewALColorBlobDetection(ses session.Session, obj uint32) (*ALColorBlobDetection, error) {
	proxy, err := ses.Proxy("ALColorBlobDetection", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALColorBlobDetection{proxy}, nil
}
func (p *ALColorBlobDetection) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALColorBlobDetection) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALColorBlobDetection) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALColorBlobDetection) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALColorBlobDetection) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALColorBlobDetection) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALColorBlobDetection) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALColorBlobDetection) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALColorBlobDetection) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALColorBlobDetection) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALColorBlobDetection) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALColorBlobDetection) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALColorBlobDetection) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALColorBlobDetection) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALColorBlobDetection) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALColorBlobDetection) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALColorBlobDetection) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALColorBlobDetection) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALColorBlobDetection) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALColorBlobDetection) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALColorBlobDetection) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALColorBlobDetection) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALColorBlobDetection) Subscribe_0(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call subscribe failed: %s", err)
	}
	return nil
}
func (p *ALColorBlobDetection) Unsubscribe(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unsubscribe failed: %s", err)
	}
	return nil
}
func (p *ALColorBlobDetection) UpdatePrecision(p0 string, p1 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call updatePrecision failed: %s", err)
	}
	return nil
}
func (p *ALColorBlobDetection) GetCurrentPrecision() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(120, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getCurrentPrecision failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getCurrentPrecision response: %s", err)
	}
	return ret, nil
}
func (p *ALColorBlobDetection) GetMyPrecision(p0 string) (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(122, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMyPrecision failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMyPrecision response: %s", err)
	}
	return ret, nil
}
func (p *ALColorBlobDetection) GetSubscribersInfo() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(123, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getSubscribersInfo failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getSubscribersInfo response: %s", err)
	}
	return ret, nil
}
func (p *ALColorBlobDetection) GetOutputNames() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(124, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getOutputNames failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getOutputNames response: %s", err)
	}
	return ret, nil
}
func (p *ALColorBlobDetection) GetEventList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(125, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getEventList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getEventList response: %s", err)
	}
	return ret, nil
}
func (p *ALColorBlobDetection) GetMemoryKeyList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(126, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMemoryKeyList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMemoryKeyList response: %s", err)
	}
	return ret, nil
}
func (p *ALColorBlobDetection) SetParameter(p0 string, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(131, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setParameter failed: %s", err)
	}
	return nil
}
func (p *ALColorBlobDetection) IsPaused() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(135, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isPaused failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isPaused response: %s", err)
	}
	return ret, nil
}
func (p *ALColorBlobDetection) IsProcessing() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(136, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isProcessing failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isProcessing response: %s", err)
	}
	return ret, nil
}
func (p *ALColorBlobDetection) Pause(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(137, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call pause failed: %s", err)
	}
	return nil
}
func (p *ALColorBlobDetection) _run() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(138, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _run failed: %s", err)
	}
	return nil
}
func (p *ALColorBlobDetection) GetCircle() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(142, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getCircle failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getCircle response: %s", err)
	}
	return ret, nil
}
func (p *ALColorBlobDetection) GetAutoExposure() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(143, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getAutoExposure failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getAutoExposure response: %s", err)
	}
	return ret, nil
}
func (p *ALColorBlobDetection) SetAutoExposure(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(144, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setAutoExposure failed: %s", err)
	}
	return nil
}

type ALVisualSpaceHistory struct {
	session.Proxy
}

func NewALVisualSpaceHistory(ses session.Session, obj uint32) (*ALVisualSpaceHistory, error) {
	proxy, err := ses.Proxy("ALVisualSpaceHistory", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALVisualSpaceHistory{proxy}, nil
}
func (p *ALVisualSpaceHistory) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualSpaceHistory) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALVisualSpaceHistory) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualSpaceHistory) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALVisualSpaceHistory) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualSpaceHistory) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALVisualSpaceHistory) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualSpaceHistory) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualSpaceHistory) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualSpaceHistory) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALVisualSpaceHistory) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualSpaceHistory) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALVisualSpaceHistory) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualSpaceHistory) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALVisualSpaceHistory) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALVisualSpaceHistory) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualSpaceHistory) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualSpaceHistory) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualSpaceHistory) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualSpaceHistory) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualSpaceHistory) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualSpaceHistory) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualSpaceHistory) Subscribe_0(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call subscribe failed: %s", err)
	}
	return nil
}
func (p *ALVisualSpaceHistory) Unsubscribe(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unsubscribe failed: %s", err)
	}
	return nil
}
func (p *ALVisualSpaceHistory) UpdatePrecision(p0 string, p1 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call updatePrecision failed: %s", err)
	}
	return nil
}
func (p *ALVisualSpaceHistory) GetCurrentPrecision() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(120, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getCurrentPrecision failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getCurrentPrecision response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualSpaceHistory) GetMyPrecision(p0 string) (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(122, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMyPrecision failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMyPrecision response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualSpaceHistory) GetSubscribersInfo() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(123, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getSubscribersInfo failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getSubscribersInfo response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualSpaceHistory) GetOutputNames() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(124, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getOutputNames failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getOutputNames response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualSpaceHistory) GetEventList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(125, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getEventList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getEventList response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualSpaceHistory) GetMemoryKeyList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(126, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMemoryKeyList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMemoryKeyList response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualSpaceHistory) SetGridPrecision(p0 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(127, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setGridPrecision failed: %s", err)
	}
	return nil
}
func (p *ALVisualSpaceHistory) GetGridPrecision() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(128, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getGridPrecision failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getGridPrecision response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualSpaceHistory) ResetGrid() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(129, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call resetGrid failed: %s", err)
	}
	return nil
}
func (p *ALVisualSpaceHistory) _run() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(130, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _run failed: %s", err)
	}
	return nil
}

type _RedBallConverter struct {
	session.Proxy
}

func New_RedBallConverter(ses session.Session, obj uint32) (*_RedBallConverter, error) {
	proxy, err := ses.Proxy("_RedBallConverter", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &_RedBallConverter{proxy}, nil
}
func (p *_RedBallConverter) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *_RedBallConverter) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *_RedBallConverter) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *_RedBallConverter) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *_RedBallConverter) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *_RedBallConverter) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *_RedBallConverter) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *_RedBallConverter) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *_RedBallConverter) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_RedBallConverter) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *_RedBallConverter) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *_RedBallConverter) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *_RedBallConverter) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_RedBallConverter) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *_RedBallConverter) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *_RedBallConverter) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *_RedBallConverter) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *_RedBallConverter) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *_RedBallConverter) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *_RedBallConverter) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *_RedBallConverter) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *_RedBallConverter) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *_RedBallConverter) SetImplParam(p0 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(114, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setImplParam failed: %s", err)
	}
	return nil
}
func (p *_RedBallConverter) StopConverter() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call stopConverter failed: %s", err)
	}
	return nil
}
func (p *_RedBallConverter) Convert(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(117, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call convert failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse convert response: %s", err)
	}
	return ret, nil
}
func (p *_RedBallConverter) ConvertEvent(p0 string, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call convertEvent failed: %s", err)
	}
	return nil
}

type _FaceConverter struct {
	session.Proxy
}

func New_FaceConverter(ses session.Session, obj uint32) (*_FaceConverter, error) {
	proxy, err := ses.Proxy("_FaceConverter", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &_FaceConverter{proxy}, nil
}
func (p *_FaceConverter) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *_FaceConverter) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *_FaceConverter) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *_FaceConverter) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *_FaceConverter) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *_FaceConverter) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *_FaceConverter) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *_FaceConverter) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *_FaceConverter) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_FaceConverter) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *_FaceConverter) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *_FaceConverter) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *_FaceConverter) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_FaceConverter) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *_FaceConverter) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *_FaceConverter) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *_FaceConverter) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *_FaceConverter) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *_FaceConverter) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *_FaceConverter) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *_FaceConverter) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *_FaceConverter) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *_FaceConverter) SetImplParam(p0 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(114, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setImplParam failed: %s", err)
	}
	return nil
}
func (p *_FaceConverter) StopConverter() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call stopConverter failed: %s", err)
	}
	return nil
}
func (p *_FaceConverter) Convert(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(117, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call convert failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse convert response: %s", err)
	}
	return ret, nil
}
func (p *_FaceConverter) ConvertEvent(p0 string, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call convertEvent failed: %s", err)
	}
	return nil
}

type _NaoMarkConverter1 struct {
	session.Proxy
}

func New_NaoMarkConverter1(ses session.Session, obj uint32) (*_NaoMarkConverter1, error) {
	proxy, err := ses.Proxy("_NaoMarkConverter1", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &_NaoMarkConverter1{proxy}, nil
}
func (p *_NaoMarkConverter1) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *_NaoMarkConverter1) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *_NaoMarkConverter1) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *_NaoMarkConverter1) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *_NaoMarkConverter1) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *_NaoMarkConverter1) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *_NaoMarkConverter1) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *_NaoMarkConverter1) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *_NaoMarkConverter1) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_NaoMarkConverter1) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *_NaoMarkConverter1) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *_NaoMarkConverter1) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *_NaoMarkConverter1) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_NaoMarkConverter1) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *_NaoMarkConverter1) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *_NaoMarkConverter1) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *_NaoMarkConverter1) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *_NaoMarkConverter1) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *_NaoMarkConverter1) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *_NaoMarkConverter1) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *_NaoMarkConverter1) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *_NaoMarkConverter1) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *_NaoMarkConverter1) SetImplParam(p0 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(114, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setImplParam failed: %s", err)
	}
	return nil
}
func (p *_NaoMarkConverter1) StopConverter() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call stopConverter failed: %s", err)
	}
	return nil
}
func (p *_NaoMarkConverter1) Convert(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(117, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call convert failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse convert response: %s", err)
	}
	return ret, nil
}
func (p *_NaoMarkConverter1) ConvertEvent(p0 string, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call convertEvent failed: %s", err)
	}
	return nil
}

type _NaoMarkConverter2 struct {
	session.Proxy
}

func New_NaoMarkConverter2(ses session.Session, obj uint32) (*_NaoMarkConverter2, error) {
	proxy, err := ses.Proxy("_NaoMarkConverter2", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &_NaoMarkConverter2{proxy}, nil
}
func (p *_NaoMarkConverter2) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *_NaoMarkConverter2) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *_NaoMarkConverter2) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *_NaoMarkConverter2) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *_NaoMarkConverter2) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *_NaoMarkConverter2) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *_NaoMarkConverter2) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *_NaoMarkConverter2) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *_NaoMarkConverter2) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_NaoMarkConverter2) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *_NaoMarkConverter2) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *_NaoMarkConverter2) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *_NaoMarkConverter2) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_NaoMarkConverter2) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *_NaoMarkConverter2) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *_NaoMarkConverter2) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *_NaoMarkConverter2) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *_NaoMarkConverter2) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *_NaoMarkConverter2) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *_NaoMarkConverter2) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *_NaoMarkConverter2) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *_NaoMarkConverter2) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *_NaoMarkConverter2) SetImplParam(p0 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(114, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setImplParam failed: %s", err)
	}
	return nil
}
func (p *_NaoMarkConverter2) StopConverter() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call stopConverter failed: %s", err)
	}
	return nil
}
func (p *_NaoMarkConverter2) Convert(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(117, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call convert failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse convert response: %s", err)
	}
	return ret, nil
}
func (p *_NaoMarkConverter2) ConvertEvent(p0 string, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call convertEvent failed: %s", err)
	}
	return nil
}

type _LogoConverter struct {
	session.Proxy
}

func New_LogoConverter(ses session.Session, obj uint32) (*_LogoConverter, error) {
	proxy, err := ses.Proxy("_LogoConverter", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &_LogoConverter{proxy}, nil
}
func (p *_LogoConverter) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *_LogoConverter) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *_LogoConverter) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *_LogoConverter) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *_LogoConverter) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *_LogoConverter) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *_LogoConverter) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *_LogoConverter) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *_LogoConverter) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_LogoConverter) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *_LogoConverter) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *_LogoConverter) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *_LogoConverter) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_LogoConverter) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *_LogoConverter) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *_LogoConverter) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *_LogoConverter) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *_LogoConverter) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *_LogoConverter) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *_LogoConverter) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *_LogoConverter) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *_LogoConverter) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *_LogoConverter) SetImplParam(p0 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(114, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setImplParam failed: %s", err)
	}
	return nil
}
func (p *_LogoConverter) StopConverter() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call stopConverter failed: %s", err)
	}
	return nil
}
func (p *_LogoConverter) Convert(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(117, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call convert failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse convert response: %s", err)
	}
	return ret, nil
}
func (p *_LogoConverter) ConvertEvent(p0 string, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call convertEvent failed: %s", err)
	}
	return nil
}

type _SoundConverter struct {
	session.Proxy
}

func New_SoundConverter(ses session.Session, obj uint32) (*_SoundConverter, error) {
	proxy, err := ses.Proxy("_SoundConverter", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &_SoundConverter{proxy}, nil
}
func (p *_SoundConverter) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *_SoundConverter) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *_SoundConverter) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *_SoundConverter) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *_SoundConverter) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *_SoundConverter) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *_SoundConverter) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *_SoundConverter) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *_SoundConverter) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_SoundConverter) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *_SoundConverter) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *_SoundConverter) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *_SoundConverter) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_SoundConverter) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *_SoundConverter) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *_SoundConverter) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *_SoundConverter) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *_SoundConverter) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *_SoundConverter) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *_SoundConverter) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *_SoundConverter) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *_SoundConverter) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *_SoundConverter) SetImplParam(p0 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(114, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setImplParam failed: %s", err)
	}
	return nil
}
func (p *_SoundConverter) StopConverter() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call stopConverter failed: %s", err)
	}
	return nil
}
func (p *_SoundConverter) Convert(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(117, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call convert failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse convert response: %s", err)
	}
	return ret, nil
}
func (p *_SoundConverter) ConvertEvent(p0 string, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call convertEvent failed: %s", err)
	}
	return nil
}

type _PeopleConverter struct {
	session.Proxy
}

func New_PeopleConverter(ses session.Session, obj uint32) (*_PeopleConverter, error) {
	proxy, err := ses.Proxy("_PeopleConverter", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &_PeopleConverter{proxy}, nil
}
func (p *_PeopleConverter) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *_PeopleConverter) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *_PeopleConverter) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *_PeopleConverter) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *_PeopleConverter) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *_PeopleConverter) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *_PeopleConverter) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *_PeopleConverter) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *_PeopleConverter) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_PeopleConverter) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *_PeopleConverter) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *_PeopleConverter) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *_PeopleConverter) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_PeopleConverter) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *_PeopleConverter) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *_PeopleConverter) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *_PeopleConverter) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *_PeopleConverter) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *_PeopleConverter) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *_PeopleConverter) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *_PeopleConverter) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *_PeopleConverter) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *_PeopleConverter) SetImplParam(p0 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(114, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setImplParam failed: %s", err)
	}
	return nil
}
func (p *_PeopleConverter) StopConverter() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call stopConverter failed: %s", err)
	}
	return nil
}
func (p *_PeopleConverter) Convert(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(117, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call convert failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse convert response: %s", err)
	}
	return ret, nil
}
func (p *_PeopleConverter) ConvertEvent(p0 string, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call convertEvent failed: %s", err)
	}
	return nil
}

type _Smoother struct {
	session.Proxy
}

func New_Smoother(ses session.Session, obj uint32) (*_Smoother, error) {
	proxy, err := ses.Proxy("_Smoother", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &_Smoother{proxy}, nil
}
func (p *_Smoother) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *_Smoother) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *_Smoother) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *_Smoother) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *_Smoother) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *_Smoother) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *_Smoother) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *_Smoother) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *_Smoother) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_Smoother) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *_Smoother) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *_Smoother) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *_Smoother) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_Smoother) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *_Smoother) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *_Smoother) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *_Smoother) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *_Smoother) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *_Smoother) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *_Smoother) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *_Smoother) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *_Smoother) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *_Smoother) StartEvent(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(114, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call startEvent failed: %s", err)
	}
	return nil
}
func (p *_Smoother) StartEvent_0(p0 string, p1 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call startEvent failed: %s", err)
	}
	return nil
}
func (p *_Smoother) Restart(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call restart failed: %s", err)
	}
	return nil
}
func (p *_Smoother) Restart_0(p0 string, p1 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(117, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call restart failed: %s", err)
	}
	return nil
}
func (p *_Smoother) SetMap(p0 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setMap failed: %s", err)
	}
	return nil
}
func (p *_Smoother) SetTarget(p0 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(119, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setTarget failed: %s", err)
	}
	return nil
}
func (p *_Smoother) GetPosition() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(121, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getPosition failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getPosition response: %s", err)
	}
	return ret, nil
}
func (p *_Smoother) StopSmoother() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(122, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call stopSmoother failed: %s", err)
	}
	return nil
}
func (p *_Smoother) _smoothEvent(p0 string, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(123, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _smoothEvent failed: %s", err)
	}
	return nil
}
func (p *_Smoother) _smoothFirstEvent(p0 string, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(124, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _smoothFirstEvent failed: %s", err)
	}
	return nil
}
func (p *_Smoother) _smoothSecondEvent(p0 string, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(125, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _smoothSecondEvent failed: %s", err)
	}
	return nil
}
func (p *_Smoother) _raiseSearchEvent() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(126, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _raiseSearchEvent failed: %s", err)
	}
	return nil
}
func (p *_Smoother) GetMaxDistance() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(129, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMaxDistance failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMaxDistance response: %s", err)
	}
	return ret, nil
}
func (p *_Smoother) SetMaxDistance(p0 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(130, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setMaxDistance failed: %s", err)
	}
	return nil
}
func (p *_Smoother) _setMoveEvent(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(131, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setMoveEvent failed: %s", err)
	}
	return nil
}
func (p *_Smoother) _smoothMoveEvent(p0 string, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(132, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _smoothMoveEvent failed: %s", err)
	}
	return nil
}
func (p *_Smoother) _disableFeaturesChanged(p0 string, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(133, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _disableFeaturesChanged failed: %s", err)
	}
	return nil
}
func (p *_Smoother) _setMoveHysteresis(p0 []float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p0)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p0 {
			err = basic.WriteFloat32(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(134, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setMoveHysteresis failed: %s", err)
	}
	return nil
}
func (p *_Smoother) _getMoveHysteresis() ([]float32, error) {
	var err error
	var ret []float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(135, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getMoveHysteresis failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []float32, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]float32, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadFloat32(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getMoveHysteresis response: %s", err)
	}
	return ret, nil
}

type _MotionMove struct {
	session.Proxy
}

func New_MotionMove(ses session.Session, obj uint32) (*_MotionMove, error) {
	proxy, err := ses.Proxy("_MotionMove", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &_MotionMove{proxy}, nil
}
func (p *_MotionMove) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *_MotionMove) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *_MotionMove) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *_MotionMove) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *_MotionMove) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *_MotionMove) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *_MotionMove) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *_MotionMove) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *_MotionMove) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_MotionMove) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *_MotionMove) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *_MotionMove) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *_MotionMove) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_MotionMove) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *_MotionMove) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *_MotionMove) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *_MotionMove) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *_MotionMove) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *_MotionMove) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *_MotionMove) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *_MotionMove) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *_MotionMove) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *_MotionMove) SetParam(p0 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(114, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setParam failed: %s", err)
	}
	return nil
}
func (p *_MotionMove) Start() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call start failed: %s", err)
	}
	return nil
}
func (p *_MotionMove) StopMove() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call stopMove failed: %s", err)
	}
	return nil
}
func (p *_MotionMove) StopWithoutStopMove() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(117, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call stopWithoutStopMove failed: %s", err)
	}
	return nil
}
func (p *_MotionMove) Move(p0 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call move failed: %s", err)
	}
	return nil
}
func (p *_MotionMove) MoveEvent(p0 string, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(119, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call moveEvent failed: %s", err)
	}
	return nil
}
func (p *_MotionMove) _stopMoveEvent() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(120, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _stopMoveEvent failed: %s", err)
	}
	return nil
}

type _NavigationMove struct {
	session.Proxy
}

func New_NavigationMove(ses session.Session, obj uint32) (*_NavigationMove, error) {
	proxy, err := ses.Proxy("_NavigationMove", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &_NavigationMove{proxy}, nil
}
func (p *_NavigationMove) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *_NavigationMove) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *_NavigationMove) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *_NavigationMove) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *_NavigationMove) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *_NavigationMove) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *_NavigationMove) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *_NavigationMove) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *_NavigationMove) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_NavigationMove) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *_NavigationMove) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *_NavigationMove) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *_NavigationMove) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_NavigationMove) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *_NavigationMove) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *_NavigationMove) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *_NavigationMove) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *_NavigationMove) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *_NavigationMove) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *_NavigationMove) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *_NavigationMove) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *_NavigationMove) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *_NavigationMove) SetParam(p0 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(114, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setParam failed: %s", err)
	}
	return nil
}
func (p *_NavigationMove) Start() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call start failed: %s", err)
	}
	return nil
}
func (p *_NavigationMove) StopMove() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call stopMove failed: %s", err)
	}
	return nil
}
func (p *_NavigationMove) StopWithoutStopMove() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(117, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call stopWithoutStopMove failed: %s", err)
	}
	return nil
}
func (p *_NavigationMove) Move(p0 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call move failed: %s", err)
	}
	return nil
}
func (p *_NavigationMove) MoveEvent(p0 string, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(119, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call moveEvent failed: %s", err)
	}
	return nil
}
func (p *_NavigationMove) _stopMoveEvent() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(120, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _stopMoveEvent failed: %s", err)
	}
	return nil
}

type _RoundSearcher struct {
	session.Proxy
}

func New_RoundSearcher(ses session.Session, obj uint32) (*_RoundSearcher, error) {
	proxy, err := ses.Proxy("_RoundSearcher", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &_RoundSearcher{proxy}, nil
}
func (p *_RoundSearcher) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *_RoundSearcher) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *_RoundSearcher) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *_RoundSearcher) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *_RoundSearcher) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *_RoundSearcher) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *_RoundSearcher) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *_RoundSearcher) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *_RoundSearcher) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_RoundSearcher) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *_RoundSearcher) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *_RoundSearcher) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *_RoundSearcher) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_RoundSearcher) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *_RoundSearcher) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *_RoundSearcher) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *_RoundSearcher) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *_RoundSearcher) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *_RoundSearcher) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *_RoundSearcher) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *_RoundSearcher) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *_RoundSearcher) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *_RoundSearcher) StartEvent() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(114, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call startEvent failed: %s", err)
	}
	return nil
}
func (p *_RoundSearcher) StopSearcher() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call stopSearcher failed: %s", err)
	}
	return nil
}
func (p *_RoundSearcher) Search(p0 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call search failed: %s", err)
	}
	return nil
}
func (p *_RoundSearcher) SearchEvent(p0 string, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(117, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call searchEvent failed: %s", err)
	}
	return nil
}
func (p *_RoundSearcher) _stopMove() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _stopMove failed: %s", err)
	}
	return nil
}
func (p *_RoundSearcher) SetUseWholeBodyLookAt(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(119, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setUseWholeBodyLookAt failed: %s", err)
	}
	return nil
}
func (p *_RoundSearcher) SetFractionMaxSpeed(p0 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(120, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setFractionMaxSpeed failed: %s", err)
	}
	return nil
}
func (p *_RoundSearcher) GetFractionMaxSpeed() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(121, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getFractionMaxSpeed failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getFractionMaxSpeed response: %s", err)
	}
	return ret, nil
}
func (p *_RoundSearcher) Initialize() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(122, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call initialize failed: %s", err)
	}
	return nil
}

type _HeadLooker struct {
	session.Proxy
}

func New_HeadLooker(ses session.Session, obj uint32) (*_HeadLooker, error) {
	proxy, err := ses.Proxy("_HeadLooker", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &_HeadLooker{proxy}, nil
}
func (p *_HeadLooker) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *_HeadLooker) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *_HeadLooker) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *_HeadLooker) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *_HeadLooker) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *_HeadLooker) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *_HeadLooker) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *_HeadLooker) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *_HeadLooker) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_HeadLooker) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *_HeadLooker) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *_HeadLooker) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *_HeadLooker) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_HeadLooker) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *_HeadLooker) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *_HeadLooker) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *_HeadLooker) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *_HeadLooker) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *_HeadLooker) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *_HeadLooker) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *_HeadLooker) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *_HeadLooker) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *_HeadLooker) SetImplParam(p0 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(114, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setImplParam failed: %s", err)
	}
	return nil
}
func (p *_HeadLooker) Start() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call start failed: %s", err)
	}
	return nil
}
func (p *_HeadLooker) StopLooker() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call stopLooker failed: %s", err)
	}
	return nil
}
func (p *_HeadLooker) Look(p0 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(117, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call look failed: %s", err)
	}
	return nil
}
func (p *_HeadLooker) LookEvent(p0 string, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call lookEvent failed: %s", err)
	}
	return nil
}
func (p *_HeadLooker) LostEvent() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(119, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call lostEvent failed: %s", err)
	}
	return nil
}

type _WholeBodyLooker struct {
	session.Proxy
}

func New_WholeBodyLooker(ses session.Session, obj uint32) (*_WholeBodyLooker, error) {
	proxy, err := ses.Proxy("_WholeBodyLooker", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &_WholeBodyLooker{proxy}, nil
}
func (p *_WholeBodyLooker) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *_WholeBodyLooker) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *_WholeBodyLooker) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *_WholeBodyLooker) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *_WholeBodyLooker) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *_WholeBodyLooker) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *_WholeBodyLooker) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *_WholeBodyLooker) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *_WholeBodyLooker) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_WholeBodyLooker) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *_WholeBodyLooker) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *_WholeBodyLooker) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *_WholeBodyLooker) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_WholeBodyLooker) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *_WholeBodyLooker) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *_WholeBodyLooker) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *_WholeBodyLooker) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *_WholeBodyLooker) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *_WholeBodyLooker) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *_WholeBodyLooker) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *_WholeBodyLooker) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *_WholeBodyLooker) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *_WholeBodyLooker) SetImplParam(p0 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(114, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setImplParam failed: %s", err)
	}
	return nil
}
func (p *_WholeBodyLooker) Start() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call start failed: %s", err)
	}
	return nil
}
func (p *_WholeBodyLooker) StopLooker() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call stopLooker failed: %s", err)
	}
	return nil
}
func (p *_WholeBodyLooker) Look(p0 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(117, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call look failed: %s", err)
	}
	return nil
}
func (p *_WholeBodyLooker) LookEvent(p0 string, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call lookEvent failed: %s", err)
	}
	return nil
}
func (p *_WholeBodyLooker) LostEvent() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(119, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call lostEvent failed: %s", err)
	}
	return nil
}

type _ArmsLooker struct {
	session.Proxy
}

func New_ArmsLooker(ses session.Session, obj uint32) (*_ArmsLooker, error) {
	proxy, err := ses.Proxy("_ArmsLooker", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &_ArmsLooker{proxy}, nil
}
func (p *_ArmsLooker) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *_ArmsLooker) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *_ArmsLooker) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *_ArmsLooker) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *_ArmsLooker) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *_ArmsLooker) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *_ArmsLooker) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *_ArmsLooker) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *_ArmsLooker) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_ArmsLooker) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *_ArmsLooker) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *_ArmsLooker) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *_ArmsLooker) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_ArmsLooker) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *_ArmsLooker) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *_ArmsLooker) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *_ArmsLooker) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *_ArmsLooker) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *_ArmsLooker) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *_ArmsLooker) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *_ArmsLooker) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *_ArmsLooker) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *_ArmsLooker) SetImplParam(p0 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(114, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setImplParam failed: %s", err)
	}
	return nil
}
func (p *_ArmsLooker) Start() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call start failed: %s", err)
	}
	return nil
}
func (p *_ArmsLooker) StopLooker() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call stopLooker failed: %s", err)
	}
	return nil
}
func (p *_ArmsLooker) Look(p0 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(117, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call look failed: %s", err)
	}
	return nil
}
func (p *_ArmsLooker) LookEvent(p0 string, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call lookEvent failed: %s", err)
	}
	return nil
}
func (p *_ArmsLooker) LostEvent() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(119, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call lostEvent failed: %s", err)
	}
	return nil
}

type _ALTargetManager struct {
	session.Proxy
}

func New_ALTargetManager(ses session.Session, obj uint32) (*_ALTargetManager, error) {
	proxy, err := ses.Proxy("_ALTargetManager", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &_ALTargetManager{proxy}, nil
}
func (p *_ALTargetManager) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *_ALTargetManager) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *_ALTargetManager) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *_ALTargetManager) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *_ALTargetManager) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *_ALTargetManager) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *_ALTargetManager) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *_ALTargetManager) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *_ALTargetManager) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_ALTargetManager) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *_ALTargetManager) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *_ALTargetManager) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *_ALTargetManager) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_ALTargetManager) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *_ALTargetManager) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *_ALTargetManager) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *_ALTargetManager) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *_ALTargetManager) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *_ALTargetManager) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *_ALTargetManager) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *_ALTargetManager) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *_ALTargetManager) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *_ALTargetManager) Start() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(114, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call start failed: %s", err)
	}
	return nil
}
func (p *_ALTargetManager) StopManager() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call stopManager failed: %s", err)
	}
	return nil
}
func (p *_ALTargetManager) AddTarget(p0 string, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call addTarget failed: %s", err)
	}
	return nil
}
func (p *_ALTargetManager) RemoveTarget(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(117, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call removeTarget failed: %s", err)
	}
	return nil
}
func (p *_ALTargetManager) RemoveTargets(p0 []string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p0)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p0 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call removeTargets failed: %s", err)
	}
	return nil
}
func (p *_ALTargetManager) RemoveAllTargets() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(119, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call removeAllTargets failed: %s", err)
	}
	return nil
}
func (p *_ALTargetManager) SetActiveTarget(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(120, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setActiveTarget failed: %s", err)
	}
	return nil
}
func (p *_ALTargetManager) SetActiveEvent(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(121, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setActiveEvent failed: %s", err)
	}
	return nil
}
func (p *_ALTargetManager) GetActiveTarget() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(122, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getActiveTarget failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getActiveTarget response: %s", err)
	}
	return ret, nil
}
func (p *_ALTargetManager) GetActiveTargetPosition() ([]float32, error) {
	var err error
	var ret []float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(123, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getActiveTargetPosition failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []float32, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]float32, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadFloat32(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getActiveTargetPosition response: %s", err)
	}
	return ret, nil
}
func (p *_ALTargetManager) GetEventName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(124, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getEventName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getEventName response: %s", err)
	}
	return ret, nil
}
func (p *_ALTargetManager) GetSecondEventName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(125, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getSecondEventName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getSecondEventName response: %s", err)
	}
	return ret, nil
}
func (p *_ALTargetManager) IsTargetManaged(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(126, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTargetManaged failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTargetManaged response: %s", err)
	}
	return ret, nil
}
func (p *_ALTargetManager) GetSupportedTargets() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(128, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getSupportedTargets failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getSupportedTargets response: %s", err)
	}
	return ret, nil
}
func (p *_ALTargetManager) GetRegisteredTargets() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(129, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getRegisteredTargets failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getRegisteredTargets response: %s", err)
	}
	return ret, nil
}
func (p *_ALTargetManager) _raiseEvent(p0 string, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(132, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _raiseEvent failed: %s", err)
	}
	return nil
}
func (p *_ALTargetManager) _genericEvent(p0 string, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(133, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _genericEvent failed: %s", err)
	}
	return nil
}

type ALTracker struct {
	session.Proxy
}

func NewALTracker(ses session.Session, obj uint32) (*ALTracker, error) {
	proxy, err := ses.Proxy("ALTracker", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALTracker{proxy}, nil
}
func (p *ALTracker) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALTracker) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALTracker) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALTracker) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALTracker) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALTracker) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALTracker) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALTracker) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALTracker) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALTracker) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALTracker) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALTracker) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALTracker) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALTracker) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALTracker) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALTracker) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALTracker) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALTracker) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALTracker) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALTracker) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALTracker) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALTracker) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALTracker) GetRobotPosition() ([]float32, error) {
	var err error
	var ret []float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(115, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getRobotPosition failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []float32, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]float32, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadFloat32(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getRobotPosition response: %s", err)
	}
	return ret, nil
}
func (p *ALTracker) IsActive() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(116, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isActive failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isActive response: %s", err)
	}
	return ret, nil
}
func (p *ALTracker) IsNewTargetDetected() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(117, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isNewTargetDetected failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isNewTargetDetected response: %s", err)
	}
	return ret, nil
}
func (p *ALTracker) SetRelativePosition(p0 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setRelativePosition failed: %s", err)
	}
	return nil
}
func (p *ALTracker) GetRelativePosition() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(119, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getRelativePosition failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getRelativePosition response: %s", err)
	}
	return ret, nil
}
func (p *ALTracker) SetTargetCoordinates(p0 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(120, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setTargetCoordinates failed: %s", err)
	}
	return nil
}
func (p *ALTracker) GetTargetCoordinates() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(121, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getTargetCoordinates failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getTargetCoordinates response: %s", err)
	}
	return ret, nil
}
func (p *ALTracker) SetMode(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(122, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setMode failed: %s", err)
	}
	return nil
}
func (p *ALTracker) GetMode() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(123, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMode failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMode response: %s", err)
	}
	return ret, nil
}
func (p *ALTracker) GetAvailableModes() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(124, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getAvailableModes failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getAvailableModes response: %s", err)
	}
	return ret, nil
}
func (p *ALTracker) ToggleSearch(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(125, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call toggleSearch failed: %s", err)
	}
	return nil
}
func (p *ALTracker) SetSearchFractionMaxSpeed(p0 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(126, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setSearchFractionMaxSpeed failed: %s", err)
	}
	return nil
}
func (p *ALTracker) GetSearchFractionMaxSpeed() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(127, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getSearchFractionMaxSpeed failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getSearchFractionMaxSpeed response: %s", err)
	}
	return ret, nil
}
func (p *ALTracker) IsSearchEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(128, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isSearchEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isSearchEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALTracker) StopTracker() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(129, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call stopTracker failed: %s", err)
	}
	return nil
}
func (p *ALTracker) IsTargetLost() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(130, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTargetLost failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTargetLost response: %s", err)
	}
	return ret, nil
}
func (p *ALTracker) Track(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(131, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call track failed: %s", err)
	}
	return nil
}
func (p *ALTracker) TrackEvent(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(132, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call trackEvent failed: %s", err)
	}
	return nil
}
func (p *ALTracker) RegisterTarget(p0 string, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(133, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call registerTarget failed: %s", err)
	}
	return nil
}
func (p *ALTracker) UnregisterTarget(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(136, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterTarget failed: %s", err)
	}
	return nil
}
func (p *ALTracker) UnregisterTargets(p0 []string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p0)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p0 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(137, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterTargets failed: %s", err)
	}
	return nil
}
func (p *ALTracker) UnregisterAllTargets() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(138, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterAllTargets failed: %s", err)
	}
	return nil
}
func (p *ALTracker) GetActiveTarget() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(139, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getActiveTarget failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getActiveTarget response: %s", err)
	}
	return ret, nil
}
func (p *ALTracker) GetSupportedTargets() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(140, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getSupportedTargets failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getSupportedTargets response: %s", err)
	}
	return ret, nil
}
func (p *ALTracker) GetRegisteredTargets() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(141, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getRegisteredTargets failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getRegisteredTargets response: %s", err)
	}
	return ret, nil
}
func (p *ALTracker) GetMoveConfig() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(144, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMoveConfig failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMoveConfig response: %s", err)
	}
	return ret, nil
}
func (p *ALTracker) SetMoveConfig(p0 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(145, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setMoveConfig failed: %s", err)
	}
	return nil
}
func (p *ALTracker) GetMaximumDistanceDetection() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(148, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMaximumDistanceDetection failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMaximumDistanceDetection response: %s", err)
	}
	return ret, nil
}
func (p *ALTracker) SetMaximumDistanceDetection(p0 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(149, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setMaximumDistanceDetection failed: %s", err)
	}
	return nil
}
func (p *ALTracker) GetEffector() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(150, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getEffector failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getEffector response: %s", err)
	}
	return ret, nil
}
func (p *ALTracker) SetEffector(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(151, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setEffector failed: %s", err)
	}
	return nil
}
func (p *ALTracker) Initialize() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(152, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call initialize failed: %s", err)
	}
	return nil
}
func (p *ALTracker) SetMaximumVelocity(p0 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(153, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setMaximumVelocity failed: %s", err)
	}
	return nil
}
func (p *ALTracker) GetMaximumVelocity() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(154, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMaximumVelocity failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMaximumVelocity response: %s", err)
	}
	return ret, nil
}
func (p *ALTracker) SetMaximumAcceleration(p0 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(155, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setMaximumAcceleration failed: %s", err)
	}
	return nil
}
func (p *ALTracker) GetMaximumAcceleration() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(156, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMaximumAcceleration failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMaximumAcceleration response: %s", err)
	}
	return ret, nil
}
func (p *ALTracker) LookAt_0(p0 []float32, p1 float32, p2 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p0)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p0 {
			err = basic.WriteFloat32(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteBool(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(157, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call lookAt failed: %s", err)
	}
	return nil
}
func (p *ALTracker) PointAt_0(p0 string, p1 []float32, p2 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p1)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p1 {
			err = basic.WriteFloat32(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteFloat32(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(158, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call pointAt failed: %s", err)
	}
	return nil
}
func (p *ALTracker) GetTargetPosition_0() ([]float32, error) {
	var err error
	var ret []float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(159, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getTargetPosition failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []float32, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]float32, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadFloat32(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getTargetPosition response: %s", err)
	}
	return ret, nil
}
func (p *ALTracker) GetTargetNames() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(160, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getTargetNames failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getTargetNames response: %s", err)
	}
	return ret, nil
}
func (p *ALTracker) GetManagedTargets() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(161, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getManagedTargets failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getManagedTargets response: %s", err)
	}
	return ret, nil
}
func (p *ALTracker) AddTarget(p0 string, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(162, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call addTarget failed: %s", err)
	}
	return nil
}
func (p *ALTracker) RemoveTarget(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(163, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call removeTarget failed: %s", err)
	}
	return nil
}
func (p *ALTracker) RemoveTargets(p0 []string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p0)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p0 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(164, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call removeTargets failed: %s", err)
	}
	return nil
}
func (p *ALTracker) RemoveAllTargets() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(165, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call removeAllTargets failed: %s", err)
	}
	return nil
}
func (p *ALTracker) AddEffector(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(166, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call addEffector failed: %s", err)
	}
	return nil
}
func (p *ALTracker) RemoveEffector(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(167, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call removeEffector failed: %s", err)
	}
	return nil
}
func (p *ALTracker) _pause() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(168, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _pause failed: %s", err)
	}
	return nil
}
func (p *ALTracker) _restart() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(169, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _restart failed: %s", err)
	}
	return nil
}
func (p *ALTracker) _setTrackerConfig(p0 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(170, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setTrackerConfig failed: %s", err)
	}
	return nil
}
func (p *ALTracker) _getTrackerConfig() (map[string]float32, error) {
	var err error
	var ret map[string]float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(171, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getTrackerConfig failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[string]float32, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[string]float32, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadString(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := basic.ReadFloat32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getTrackerConfig response: %s", err)
	}
	return ret, nil
}
func (p *ALTracker) _getTrackerConfigStr() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(172, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getTrackerConfigStr failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getTrackerConfigStr response: %s", err)
	}
	return ret, nil
}
func (p *ALTracker) _lostEvent() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(173, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _lostEvent failed: %s", err)
	}
	return nil
}
func (p *ALTracker) _detectedEvent(p0 string, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(174, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _detectedEvent failed: %s", err)
	}
	return nil
}
func (p *ALTracker) _setDebugInView3D(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(175, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setDebugInView3D failed: %s", err)
	}
	return nil
}
func (p *ALTracker) _debugCallbackEvent(p0 string, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(176, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _debugCallbackEvent failed: %s", err)
	}
	return nil
}
func (p *ALTracker) _lookAtWithMove(p0 []float32, p1 float32, p2 bool, p3 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p0)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p0 {
			err = basic.WriteFloat32(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteBool(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteBool(p3, buf); err != nil {
		return fmt.Errorf("failed to serialize p3: %s", err)
	}
	_, err = p.Call(177, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _lookAtWithMove failed: %s", err)
	}
	return nil
}
func (p *ALTracker) _stopLookAt() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(179, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _stopLookAt failed: %s", err)
	}
	return nil
}
func (p *ALTracker) _stopPointAt() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(180, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _stopPointAt failed: %s", err)
	}
	return nil
}
func (p *ALTracker) _searcherSetUseWholeBodyLookAt(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(181, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _searcherSetUseWholeBodyLookAt failed: %s", err)
	}
	return nil
}
func (p *ALTracker) _setMoveEvent(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(182, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setMoveEvent failed: %s", err)
	}
	return nil
}
func (p *ALTracker) _setMoveHysteresis(p0 []float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p0)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p0 {
			err = basic.WriteFloat32(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(183, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setMoveHysteresis failed: %s", err)
	}
	return nil
}
func (p *ALTracker) _getMoveHysteresis() ([]float32, error) {
	var err error
	var ret []float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(184, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getMoveHysteresis failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []float32, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]float32, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadFloat32(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getMoveHysteresis response: %s", err)
	}
	return ret, nil
}

type ALModularity struct {
	session.Proxy
}

func NewALModularity(ses session.Session, obj uint32) (*ALModularity, error) {
	proxy, err := ses.Proxy("ALModularity", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALModularity{proxy}, nil
}
func (p *ALModularity) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALModularity) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALModularity) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALModularity) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALModularity) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALModularity) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALModularity) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALModularity) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) LoadProgram(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(115, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call loadProgram failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse loadProgram response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) LoadProgramFromFile(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(116, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call loadProgramFromFile failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse loadProgramFromFile response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) GetData(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(117, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getData failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getData response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) GetLastData(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(118, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getLastData failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getLastData response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) GetImageRemote(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(120, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getImageRemote failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getImageRemote response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) GetFilters() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(121, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getFilters failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getFilters response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) GetFilterDescription(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(122, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getFilterDescription failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getFilterDescription response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) GetFilterInputs(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(123, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getFilterInputs failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getFilterInputs response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) GetFilterOutputs(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(124, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getFilterOutputs failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getFilterOutputs response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) DeleteFilter(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(125, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call deleteFilter failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse deleteFilter response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) GetSources() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(126, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getSources failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getSources response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) IsSourceBinded(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(127, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isSourceBinded failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isSourceBinded response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) GetSourceFrequency(p0 string) (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(128, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getSourceFrequency failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getSourceFrequency response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) GetSourceData(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(129, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getSourceData failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getSourceData response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) SetData(p0 string, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(131, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setData failed: %s", err)
	}
	return nil
}
func (p *ALModularity) DeleteSource(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(132, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call deleteSource failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse deleteSource response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) GetRobotHeightOffset() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(133, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getRobotHeightOffset failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getRobotHeightOffset response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) SetRobotHeightOffset(p0 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(134, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setRobotHeightOffset failed: %s", err)
	}
	return nil
}
func (p *ALModularity) GetProcesses() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(135, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getProcesses failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getProcesses response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) IsProcesses(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(136, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isProcesses failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isProcesses response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) GetProcessDescription(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(137, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getProcessDescription failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getProcessDescription response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) GetProcessSources(p0 string) ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(138, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getProcessSources failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getProcessSources response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) GetProcessSinks(p0 string) ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(139, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getProcessSinks failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getProcessSinks response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) GetProcessAggregatedSinks(p0 string) ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(140, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getProcessAggregatedSinks failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getProcessAggregatedSinks response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) GetProcessFrequency(p0 string) (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(142, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getProcessFrequency failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getProcessFrequency response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) SetProcessPriority(p0 string, p1 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(143, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProcessPriority failed: %s", err)
	}
	return nil
}
func (p *ALModularity) SetProcessFrequency(p0 string, p1 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(144, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProcessFrequency failed: %s", err)
	}
	return nil
}
func (p *ALModularity) ResetProcess(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(146, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call resetProcess failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse resetProcess response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) IsProcessEnable(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(147, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isProcessEnable failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isProcessEnable response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) IsProcessZombie(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(148, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isProcessZombie failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isProcessZombie response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) EnableProcess(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(149, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call enableProcess failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse enableProcess response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) DisableProcess(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(150, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call disableProcess failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse disableProcess response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) DeleteProcess(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(151, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call deleteProcess failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse deleteProcess response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) GetScheduledJobs() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(152, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getScheduledJobs failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getScheduledJobs response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) StartScheduler() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(153, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call startScheduler failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse startScheduler response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) StopScheduler() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(154, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stopScheduler failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse stopScheduler response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) GetInstrumentationResult() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(155, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getInstrumentationResult failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getInstrumentationResult response: %s", err)
	}
	return ret, nil
}
func (p *ALModularity) _startMotionWorker() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(157, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _startMotionWorker failed: %s", err)
	}
	return nil
}
func (p *ALModularity) _stopMotionWorker() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(158, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _stopMotionWorker failed: %s", err)
	}
	return nil
}
func (p *ALModularity) _setMotionSource(p0 string, p1 []float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p1)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p1 {
			err = basic.WriteFloat32(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(159, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setMotionSource failed: %s", err)
	}
	return nil
}
func (p *ALModularity) _setMotionSources(p0 []string, p1 [][]float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p0)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p0 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p1)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p1 {
			err = func() error {
				err := basic.WriteUint32(uint32(len(v)), buf)
				if err != nil {
					return fmt.Errorf("failed to write slice size: %s", err)
				}
				for _, v := range v {
					err = basic.WriteFloat32(v, buf)
					if err != nil {
						return fmt.Errorf("failed to write slice value: %s", err)
					}
				}
				return nil
			}()
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(160, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setMotionSources failed: %s", err)
	}
	return nil
}

type ALNavigation struct {
	session.Proxy
}

func NewALNavigation(ses session.Session, obj uint32) (*ALNavigation, error) {
	proxy, err := ses.Proxy("ALNavigation", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALNavigation{proxy}, nil
}
func (p *ALNavigation) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALNavigation) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALNavigation) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALNavigation) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALNavigation) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALNavigation) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALNavigation) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALNavigation) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) NavigateTo(p0 float32, p1 float32) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(114, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call navigateTo failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse navigateTo response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) NavigateTo_0(p0 float32, p1 float32, p2 value.Value) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = p2.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(115, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call navigateTo failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse navigateTo response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) NavigateTo_1(p0 float32, p1 float32, p2 float32) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteFloat32(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(116, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call navigateTo failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse navigateTo response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) NavigateTo_2(p0 float32, p1 float32, p2 float32, p3 value.Value) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteFloat32(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = p3.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(117, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call navigateTo failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse navigateTo response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) _setNavigationConfig(p0 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setNavigationConfig failed: %s", err)
	}
	return nil
}
func (p *ALNavigation) StopNavigateTo() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(119, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call stopNavigateTo failed: %s", err)
	}
	return nil
}
func (p *ALNavigation) _stopNavigateToWithoutStopMove() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(120, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _stopNavigateToWithoutStopMove failed: %s", err)
	}
	return nil
}
func (p *ALNavigation) _isNavigateToRunning() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(121, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _isNavigateToRunning failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _isNavigateToRunning response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) _getObstacleData() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(122, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getObstacleData failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getObstacleData response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) _getOccupancyGrid(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(123, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getOccupancyGrid failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getOccupancyGrid response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) _getSensorData() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(124, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getSensorData failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getSensorData response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) _getSensorData_0(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(125, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getSensorData failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getSensorData response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) _getSensorData_1(p0 []string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p0)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p0 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(126, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getSensorData failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getSensorData response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) _subscribeToAll(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(127, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _subscribeToAll failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _subscribeToAll response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) _subscribe(p0 string, p1 []string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p1)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p1 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(128, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _subscribe failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _subscribe response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) _unsubscribeFromAll(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(129, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _unsubscribeFromAll failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _unsubscribeFromAll response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) _unsubscribe(p0 string, p1 []string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p1)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p1 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(130, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _unsubscribe failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _unsubscribe response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) _addSensor(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(131, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _addSensor failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _addSensor response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) _removeSensor(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(132, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _removeSensor failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _removeSensor response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) _getTrajectory() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(133, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getTrajectory failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getTrajectory response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) _setSpeedFactor(p0 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(134, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setSpeedFactor failed: %s", err)
	}
	return nil
}
func (p *ALNavigation) _getObstacleMap(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(135, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getObstacleMap failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getObstacleMap response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) _enableSensorDebug(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(136, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _enableSensorDebug failed: %s", err)
	}
	return nil
}
func (p *ALNavigation) _useHeadChecking(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(137, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _useHeadChecking failed: %s", err)
	}
	return nil
}
func (p *ALNavigation) _usePathChecking(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(138, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _usePathChecking failed: %s", err)
	}
	return nil
}
func (p *ALNavigation) _usePathCorrection(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(139, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _usePathCorrection failed: %s", err)
	}
	return nil
}
func (p *ALNavigation) _useArmsOnBelly(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(140, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _useArmsOnBelly failed: %s", err)
	}
	return nil
}
func (p *ALNavigation) _useSpeedFactor(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(141, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _useSpeedFactor failed: %s", err)
	}
	return nil
}
func (p *ALNavigation) _clearObstacleMap() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(142, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _clearObstacleMap failed: %s", err)
	}
	return nil
}
func (p *ALNavigation) _useClearNavigationMap(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(143, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _useClearNavigationMap failed: %s", err)
	}
	return nil
}
func (p *ALNavigation) _clearNavigationMap() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(144, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _clearNavigationMap failed: %s", err)
	}
	return nil
}
func (p *ALNavigation) _getSensorSubscribers() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(145, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getSensorSubscribers failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getSensorSubscribers response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) _getSensorList() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(146, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getSensorList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getSensorList response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) _getSensorListBySubscriber(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(147, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getSensorListBySubscriber failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getSensorListBySubscriber response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) _getActiveSensorList() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(148, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getActiveSensorList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getActiveSensorList response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) _isSensorEnabled(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(149, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _isSensorEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _isSensorEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) _writeTree() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(151, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _writeTree failed: %s", err)
	}
	return nil
}
func (p *ALNavigation) MoveAlong(p0 value.Value) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(152, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call moveAlong failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse moveAlong response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) _moveAlong(p0 float32, p1 bool, p2 value.Value) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteBool(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = p2.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(153, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _moveAlong failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _moveAlong response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) _enableSafety(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(154, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _enableSafety failed: %s", err)
	}
	return nil
}
func (p *ALNavigation) _isSafetyEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(155, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _isSafetyEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _isSafetyEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) _isSafetyLoopRunning() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(156, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _isSafetyLoopRunning failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _isSafetyLoopRunning response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) _wakeUpCallBack() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(157, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _wakeUpCallBack failed: %s", err)
	}
	return nil
}
func (p *ALNavigation) _restCallBack(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(158, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _restCallBack failed: %s", err)
	}
	return nil
}
func (p *ALNavigation) GetFreeZone(p0 float32, p1 float32) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(159, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getFreeZone failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getFreeZone response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) FindFreeZone(p0 float32, p1 float32) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(160, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call findFreeZone failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse findFreeZone response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) StopExploration() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(162, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call stopExploration failed: %s", err)
	}
	return nil
}
func (p *ALNavigation) GetRobotPositionInMap() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(163, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getRobotPositionInMap failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getRobotPositionInMap response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) GetExplorationPath() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(164, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getExplorationPath failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getExplorationPath response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) _getTopoMap() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(165, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getTopoMap failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getTopoMap response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) _getExplorationParams() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(166, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getExplorationParams failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getExplorationParams response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) LoadExploration(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(168, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call loadExploration failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse loadExploration response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) _getScanHoles() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(170, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getScanHoles failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getScanHoles response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) _computeAggregatedMap() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(173, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _computeAggregatedMap failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _computeAggregatedMap response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) SaveExploration() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(174, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call saveExploration failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse saveExploration response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) GetMetricalMap() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(175, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMetricalMap failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMetricalMap response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) _getLocalizationDebug() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(176, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getLocalizationDebug failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getLocalizationDebug response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) RelocalizeInMap(p0 []float32) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p0)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p0 {
			err = basic.WriteFloat32(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(177, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call relocalizeInMap failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse relocalizeInMap response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) StartLocalization() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(178, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call startLocalization failed: %s", err)
	}
	return nil
}
func (p *ALNavigation) StopLocalization() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(179, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call stopLocalization failed: %s", err)
	}
	return nil
}
func (p *ALNavigation) _startTopoMapper() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(180, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _startTopoMapper failed: %s", err)
	}
	return nil
}
func (p *ALNavigation) _stopTopoMapper() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(181, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _stopTopoMapper failed: %s", err)
	}
	return nil
}
func (p *ALNavigation) _resetTopoMap() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(182, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _resetTopoMap failed: %s", err)
	}
	return nil
}
func (p *ALNavigation) _getFreeZoneWithConstraints(p0 float32) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(184, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getFreeZoneWithConstraints failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getFreeZoneWithConstraints response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) StartFreeZoneUpdate() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(185, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call startFreeZoneUpdate failed: %s", err)
	}
	return nil
}
func (p *ALNavigation) StopAndComputeFreeZone(p0 float32, p1 float32) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(187, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stopAndComputeFreeZone failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse stopAndComputeFreeZone response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) _moveToFreeZoneCenter() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(188, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _moveToFreeZoneCenter failed: %s", err)
	}
	return nil
}
func (p *ALNavigation) _stopFreeZoneTasks() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(189, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _stopFreeZoneTasks failed: %s", err)
	}
	return nil
}
func (p *ALNavigation) _writeFreeZone() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(190, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _writeFreeZone failed: %s", err)
	}
	return nil
}
func (p *ALNavigation) _clearFreeZone() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(191, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _clearFreeZone failed: %s", err)
	}
	return nil
}
func (p *ALNavigation) _getFreeZoneMap() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(192, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getFreeZoneMap failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getFreeZoneMap response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) _writeDilatedMaps() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(193, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _writeDilatedMaps failed: %s", err)
	}
	return nil
}
func (p *ALNavigation) _startDiagnosis(p0 []string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p0)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p0 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(194, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _startDiagnosis failed: %s", err)
	}
	return nil
}
func (p *ALNavigation) _stopDiagnosis() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(195, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _stopDiagnosis failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _stopDiagnosis response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) _passiveDiagnosisCallBack(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(196, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _passiveDiagnosisCallBack failed: %s", err)
	}
	return nil
}
func (p *ALNavigation) _activeDiagnosisCallBack(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(197, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _activeDiagnosisCallBack failed: %s", err)
	}
	return nil
}
func (p *ALNavigation) _get3DMap() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(198, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _get3DMap failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _get3DMap response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) _eventMoveFailedCallback() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(199, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _eventMoveFailedCallback failed: %s", err)
	}
	return nil
}
func (p *ALNavigation) _setObstaclesNumber(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(201, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setObstaclesNumber failed: %s", err)
	}
	return nil
}
func (p *ALNavigation) _setDiagnosisLogEnabled(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(203, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setDiagnosisLogEnabled failed: %s", err)
	}
	return nil
}
func (p *ALNavigation) _isDiagnosisLogEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(204, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _isDiagnosisLogEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _isDiagnosisLogEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALNavigation) _initLogger() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(205, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _initLogger failed: %s", err)
	}
	return nil
}
func (p *ALNavigation) _getMapperNames() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(206, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getMapperNames failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getMapperNames response: %s", err)
	}
	return ret, nil
}

type ALMovementDetection struct {
	session.Proxy
}

func NewALMovementDetection(ses session.Session, obj uint32) (*ALMovementDetection, error) {
	proxy, err := ses.Proxy("ALMovementDetection", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALMovementDetection{proxy}, nil
}
func (p *ALMovementDetection) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALMovementDetection) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALMovementDetection) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALMovementDetection) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALMovementDetection) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALMovementDetection) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALMovementDetection) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALMovementDetection) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALMovementDetection) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALMovementDetection) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALMovementDetection) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALMovementDetection) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALMovementDetection) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALMovementDetection) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALMovementDetection) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALMovementDetection) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALMovementDetection) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALMovementDetection) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALMovementDetection) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALMovementDetection) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALMovementDetection) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALMovementDetection) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALMovementDetection) Subscribe_0(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call subscribe failed: %s", err)
	}
	return nil
}
func (p *ALMovementDetection) Unsubscribe(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unsubscribe failed: %s", err)
	}
	return nil
}
func (p *ALMovementDetection) UpdatePrecision(p0 string, p1 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call updatePrecision failed: %s", err)
	}
	return nil
}
func (p *ALMovementDetection) GetCurrentPrecision() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(120, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getCurrentPrecision failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getCurrentPrecision response: %s", err)
	}
	return ret, nil
}
func (p *ALMovementDetection) GetMyPrecision(p0 string) (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(122, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMyPrecision failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMyPrecision response: %s", err)
	}
	return ret, nil
}
func (p *ALMovementDetection) GetSubscribersInfo() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(123, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getSubscribersInfo failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getSubscribersInfo response: %s", err)
	}
	return ret, nil
}
func (p *ALMovementDetection) GetOutputNames() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(124, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getOutputNames failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getOutputNames response: %s", err)
	}
	return ret, nil
}
func (p *ALMovementDetection) GetEventList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(125, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getEventList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getEventList response: %s", err)
	}
	return ret, nil
}
func (p *ALMovementDetection) GetMemoryKeyList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(126, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMemoryKeyList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMemoryKeyList response: %s", err)
	}
	return ret, nil
}
func (p *ALMovementDetection) IsPaused() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(127, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isPaused failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isPaused response: %s", err)
	}
	return ret, nil
}
func (p *ALMovementDetection) Pause(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(128, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call pause failed: %s", err)
	}
	return nil
}
func (p *ALMovementDetection) IsProcessing() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(129, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isProcessing failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isProcessing response: %s", err)
	}
	return ret, nil
}
func (p *ALMovementDetection) ResetDetection() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(136, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call resetDetection failed: %s", err)
	}
	return nil
}
func (p *ALMovementDetection) SetColorSensitivity(p0 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(137, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setColorSensitivity failed: %s", err)
	}
	return nil
}
func (p *ALMovementDetection) GetColorSensitivity() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(138, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getColorSensitivity failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getColorSensitivity response: %s", err)
	}
	return ret, nil
}
func (p *ALMovementDetection) SetDepthSensitivity(p0 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(139, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setDepthSensitivity failed: %s", err)
	}
	return nil
}
func (p *ALMovementDetection) GetDepthSensitivity() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(140, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getDepthSensitivity failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getDepthSensitivity response: %s", err)
	}
	return ret, nil
}
func (p *ALMovementDetection) _setDetectionMode(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(141, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setDetectionMode failed: %s", err)
	}
	return nil
}
func (p *ALMovementDetection) _getDetectionMode() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(142, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getDetectionMode failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getDetectionMode response: %s", err)
	}
	return ret, nil
}

type ALSegmentation3D struct {
	session.Proxy
}

func NewALSegmentation3D(ses session.Session, obj uint32) (*ALSegmentation3D, error) {
	proxy, err := ses.Proxy("ALSegmentation3D", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALSegmentation3D{proxy}, nil
}
func (p *ALSegmentation3D) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALSegmentation3D) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALSegmentation3D) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALSegmentation3D) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALSegmentation3D) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALSegmentation3D) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALSegmentation3D) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALSegmentation3D) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALSegmentation3D) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALSegmentation3D) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALSegmentation3D) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALSegmentation3D) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALSegmentation3D) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALSegmentation3D) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALSegmentation3D) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALSegmentation3D) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALSegmentation3D) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALSegmentation3D) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALSegmentation3D) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALSegmentation3D) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALSegmentation3D) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALSegmentation3D) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALSegmentation3D) Subscribe_0(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call subscribe failed: %s", err)
	}
	return nil
}
func (p *ALSegmentation3D) Unsubscribe(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unsubscribe failed: %s", err)
	}
	return nil
}
func (p *ALSegmentation3D) UpdatePrecision(p0 string, p1 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call updatePrecision failed: %s", err)
	}
	return nil
}
func (p *ALSegmentation3D) GetCurrentPrecision() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(120, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getCurrentPrecision failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getCurrentPrecision response: %s", err)
	}
	return ret, nil
}
func (p *ALSegmentation3D) GetMyPrecision(p0 string) (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(122, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMyPrecision failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMyPrecision response: %s", err)
	}
	return ret, nil
}
func (p *ALSegmentation3D) GetSubscribersInfo() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(123, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getSubscribersInfo failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getSubscribersInfo response: %s", err)
	}
	return ret, nil
}
func (p *ALSegmentation3D) GetOutputNames() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(124, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getOutputNames failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getOutputNames response: %s", err)
	}
	return ret, nil
}
func (p *ALSegmentation3D) GetEventList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(125, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getEventList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getEventList response: %s", err)
	}
	return ret, nil
}
func (p *ALSegmentation3D) GetMemoryKeyList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(126, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMemoryKeyList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMemoryKeyList response: %s", err)
	}
	return ret, nil
}
func (p *ALSegmentation3D) IsPaused() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(127, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isPaused failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isPaused response: %s", err)
	}
	return ret, nil
}
func (p *ALSegmentation3D) Pause(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(128, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call pause failed: %s", err)
	}
	return nil
}
func (p *ALSegmentation3D) IsProcessing() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(129, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isProcessing failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isProcessing response: %s", err)
	}
	return ret, nil
}
func (p *ALSegmentation3D) SetBlobTrackingEnabled(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(137, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setBlobTrackingEnabled failed: %s", err)
	}
	return nil
}
func (p *ALSegmentation3D) IsBlobTrackingEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(138, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isBlobTrackingEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isBlobTrackingEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALSegmentation3D) SetBlobTrackingDistance(p0 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(139, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setBlobTrackingDistance failed: %s", err)
	}
	return nil
}
func (p *ALSegmentation3D) GetBlobTrackingDistance() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(140, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBlobTrackingDistance failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBlobTrackingDistance response: %s", err)
	}
	return ret, nil
}
func (p *ALSegmentation3D) SetVerticalOffset(p0 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(141, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setVerticalOffset failed: %s", err)
	}
	return nil
}
func (p *ALSegmentation3D) GetVerticalOffset() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(142, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getVerticalOffset failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getVerticalOffset response: %s", err)
	}
	return ret, nil
}
func (p *ALSegmentation3D) SetDeltaDepthThreshold(p0 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(143, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setDeltaDepthThreshold failed: %s", err)
	}
	return nil
}
func (p *ALSegmentation3D) GetDeltaDepthThreshold() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(144, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getDeltaDepthThreshold failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getDeltaDepthThreshold response: %s", err)
	}
	return ret, nil
}

type _UserIdentification struct {
	session.Proxy
}

func New_UserIdentification(ses session.Session, obj uint32) (*_UserIdentification, error) {
	proxy, err := ses.Proxy("_UserIdentification", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &_UserIdentification{proxy}, nil
}
func (p *_UserIdentification) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *_UserIdentification) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *_UserIdentification) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *_UserIdentification) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *_UserIdentification) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *_UserIdentification) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *_UserIdentification) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *_UserIdentification) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *_UserIdentification) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_UserIdentification) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *_UserIdentification) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *_UserIdentification) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *_UserIdentification) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_UserIdentification) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *_UserIdentification) MakePermanent(p0 uint64) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint64(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call makePermanent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse makePermanent response: %s", err)
	}
	return ret, nil
}
func (p *_UserIdentification) MakeTemporary(p0 uint64) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint64(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call makeTemporary failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse makeTemporary response: %s", err)
	}
	return ret, nil
}
func (p *_UserIdentification) Remove(p0 uint64) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint64(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call remove failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse remove response: %s", err)
	}
	return ret, nil
}
func (p *_UserIdentification) Clear() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call clear failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse clear response: %s", err)
	}
	return ret, nil
}
func (p *_UserIdentification) IsPermanent(p0 uint64) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint64(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(108, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isPermanent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isPermanent response: %s", err)
	}
	return ret, nil
}
func (p *_UserIdentification) IsTemporary(p0 uint64) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint64(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(109, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTemporary failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTemporary response: %s", err)
	}
	return ret, nil
}
func (p *_UserIdentification) GetStoredUsers() ([]uint64, error) {
	var err error
	var ret []uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(110, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getStoredUsers failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []uint64, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]uint64, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadUint64(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getStoredUsers response: %s", err)
	}
	return ret, nil
}
func (p *_UserIdentification) _getImageMTM(p0 uint64) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint64(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getImageMTM failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getImageMTM response: %s", err)
	}
	return ret, nil
}
func (p *_UserIdentification) _printDatabase() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(113, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _printDatabase failed: %s", err)
	}
	return nil
}

type ALPeoplePerception struct {
	session.Proxy
}

func NewALPeoplePerception(ses session.Session, obj uint32) (*ALPeoplePerception, error) {
	proxy, err := ses.Proxy("ALPeoplePerception", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALPeoplePerception{proxy}, nil
}
func (p *ALPeoplePerception) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALPeoplePerception) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALPeoplePerception) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALPeoplePerception) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALPeoplePerception) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALPeoplePerception) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALPeoplePerception) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALPeoplePerception) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALPeoplePerception) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALPeoplePerception) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALPeoplePerception) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALPeoplePerception) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALPeoplePerception) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALPeoplePerception) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALPeoplePerception) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALPeoplePerception) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALPeoplePerception) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALPeoplePerception) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALPeoplePerception) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALPeoplePerception) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALPeoplePerception) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALPeoplePerception) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALPeoplePerception) Subscribe_0(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call subscribe failed: %s", err)
	}
	return nil
}
func (p *ALPeoplePerception) Unsubscribe(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unsubscribe failed: %s", err)
	}
	return nil
}
func (p *ALPeoplePerception) UpdatePrecision(p0 string, p1 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call updatePrecision failed: %s", err)
	}
	return nil
}
func (p *ALPeoplePerception) GetCurrentPrecision() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(120, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getCurrentPrecision failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getCurrentPrecision response: %s", err)
	}
	return ret, nil
}
func (p *ALPeoplePerception) GetMyPrecision(p0 string) (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(122, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMyPrecision failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMyPrecision response: %s", err)
	}
	return ret, nil
}
func (p *ALPeoplePerception) GetSubscribersInfo() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(123, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getSubscribersInfo failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getSubscribersInfo response: %s", err)
	}
	return ret, nil
}
func (p *ALPeoplePerception) GetOutputNames() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(124, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getOutputNames failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getOutputNames response: %s", err)
	}
	return ret, nil
}
func (p *ALPeoplePerception) GetEventList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(125, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getEventList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getEventList response: %s", err)
	}
	return ret, nil
}
func (p *ALPeoplePerception) GetMemoryKeyList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(126, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMemoryKeyList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMemoryKeyList response: %s", err)
	}
	return ret, nil
}
func (p *ALPeoplePerception) IsPaused() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(127, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isPaused failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isPaused response: %s", err)
	}
	return ret, nil
}
func (p *ALPeoplePerception) Pause(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(128, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call pause failed: %s", err)
	}
	return nil
}
func (p *ALPeoplePerception) IsProcessing() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(129, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isProcessing failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isProcessing response: %s", err)
	}
	return ret, nil
}
func (p *ALPeoplePerception) GetMaximumDetectionRange() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(130, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMaximumDetectionRange failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMaximumDetectionRange response: %s", err)
	}
	return ret, nil
}
func (p *ALPeoplePerception) GetMinimumBodyHeight() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(131, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMinimumBodyHeight failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMinimumBodyHeight response: %s", err)
	}
	return ret, nil
}
func (p *ALPeoplePerception) GetMaximumBodyHeight() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(132, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMaximumBodyHeight failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMaximumBodyHeight response: %s", err)
	}
	return ret, nil
}
func (p *ALPeoplePerception) GetTimeBeforePersonDisappears() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(133, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getTimeBeforePersonDisappears failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getTimeBeforePersonDisappears response: %s", err)
	}
	return ret, nil
}
func (p *ALPeoplePerception) GetTimeBeforeVisiblePersonDisappears() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(134, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getTimeBeforeVisiblePersonDisappears failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getTimeBeforeVisiblePersonDisappears response: %s", err)
	}
	return ret, nil
}
func (p *ALPeoplePerception) IsFaceDetectionEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(135, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isFaceDetectionEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isFaceDetectionEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALPeoplePerception) IsFastModeEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(136, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isFastModeEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isFastModeEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALPeoplePerception) IsGraphicalDisplayEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(137, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isGraphicalDisplayEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isGraphicalDisplayEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALPeoplePerception) IsMovementDetectionEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(138, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isMovementDetectionEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isMovementDetectionEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALPeoplePerception) ResetPopulation() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(139, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call resetPopulation failed: %s", err)
	}
	return nil
}
func (p *ALPeoplePerception) SetFastModeEnabled(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(140, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setFastModeEnabled failed: %s", err)
	}
	return nil
}
func (p *ALPeoplePerception) SetGraphicalDisplayEnabled(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(141, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setGraphicalDisplayEnabled failed: %s", err)
	}
	return nil
}
func (p *ALPeoplePerception) SetMaximumDetectionRange(p0 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(142, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setMaximumDetectionRange failed: %s", err)
	}
	return nil
}
func (p *ALPeoplePerception) SetMinimumBodyHeight(p0 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(143, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setMinimumBodyHeight failed: %s", err)
	}
	return nil
}
func (p *ALPeoplePerception) SetMaximumBodyHeight(p0 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(144, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setMaximumBodyHeight failed: %s", err)
	}
	return nil
}
func (p *ALPeoplePerception) SetMovementDetectionEnabled(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(145, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setMovementDetectionEnabled failed: %s", err)
	}
	return nil
}
func (p *ALPeoplePerception) SetTimeBeforePersonDisappears(p0 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(146, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setTimeBeforePersonDisappears failed: %s", err)
	}
	return nil
}
func (p *ALPeoplePerception) SetTimeBeforeVisiblePersonDisappears(p0 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(147, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setTimeBeforeVisiblePersonDisappears failed: %s", err)
	}
	return nil
}
func (p *ALPeoplePerception) _getDetectionMode() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(148, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getDetectionMode failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getDetectionMode response: %s", err)
	}
	return ret, nil
}
func (p *ALPeoplePerception) _setDetectionMode(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(149, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setDetectionMode failed: %s", err)
	}
	return nil
}
func (p *ALPeoplePerception) SetFaceDetectionEnabled(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(150, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setFaceDetectionEnabled failed: %s", err)
	}
	return nil
}

type ALSittingPeopleDetection struct {
	session.Proxy
}

func NewALSittingPeopleDetection(ses session.Session, obj uint32) (*ALSittingPeopleDetection, error) {
	proxy, err := ses.Proxy("ALSittingPeopleDetection", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALSittingPeopleDetection{proxy}, nil
}
func (p *ALSittingPeopleDetection) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALSittingPeopleDetection) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALSittingPeopleDetection) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALSittingPeopleDetection) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALSittingPeopleDetection) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALSittingPeopleDetection) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALSittingPeopleDetection) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALSittingPeopleDetection) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALSittingPeopleDetection) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALSittingPeopleDetection) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALSittingPeopleDetection) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALSittingPeopleDetection) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALSittingPeopleDetection) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALSittingPeopleDetection) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALSittingPeopleDetection) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALSittingPeopleDetection) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALSittingPeopleDetection) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALSittingPeopleDetection) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALSittingPeopleDetection) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALSittingPeopleDetection) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALSittingPeopleDetection) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALSittingPeopleDetection) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALSittingPeopleDetection) Subscribe_0(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call subscribe failed: %s", err)
	}
	return nil
}
func (p *ALSittingPeopleDetection) Unsubscribe(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unsubscribe failed: %s", err)
	}
	return nil
}
func (p *ALSittingPeopleDetection) UpdatePrecision(p0 string, p1 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call updatePrecision failed: %s", err)
	}
	return nil
}
func (p *ALSittingPeopleDetection) GetCurrentPrecision() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(120, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getCurrentPrecision failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getCurrentPrecision response: %s", err)
	}
	return ret, nil
}
func (p *ALSittingPeopleDetection) GetMyPrecision(p0 string) (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(122, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMyPrecision failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMyPrecision response: %s", err)
	}
	return ret, nil
}
func (p *ALSittingPeopleDetection) GetSubscribersInfo() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(123, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getSubscribersInfo failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getSubscribersInfo response: %s", err)
	}
	return ret, nil
}
func (p *ALSittingPeopleDetection) GetOutputNames() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(124, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getOutputNames failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getOutputNames response: %s", err)
	}
	return ret, nil
}
func (p *ALSittingPeopleDetection) GetEventList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(125, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getEventList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getEventList response: %s", err)
	}
	return ret, nil
}
func (p *ALSittingPeopleDetection) GetMemoryKeyList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(126, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMemoryKeyList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMemoryKeyList response: %s", err)
	}
	return ret, nil
}
func (p *ALSittingPeopleDetection) IsPaused() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(127, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isPaused failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isPaused response: %s", err)
	}
	return ret, nil
}
func (p *ALSittingPeopleDetection) Pause(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(128, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call pause failed: %s", err)
	}
	return nil
}
func (p *ALSittingPeopleDetection) IsProcessing() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(129, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isProcessing failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isProcessing response: %s", err)
	}
	return ret, nil
}
func (p *ALSittingPeopleDetection) SetSittingThreshold(p0 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(130, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setSittingThreshold failed: %s", err)
	}
	return nil
}
func (p *ALSittingPeopleDetection) GetSittingThreshold() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(131, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getSittingThreshold failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getSittingThreshold response: %s", err)
	}
	return ret, nil
}

type ALEngagementZones struct {
	session.Proxy
}

func NewALEngagementZones(ses session.Session, obj uint32) (*ALEngagementZones, error) {
	proxy, err := ses.Proxy("ALEngagementZones", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALEngagementZones{proxy}, nil
}
func (p *ALEngagementZones) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALEngagementZones) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALEngagementZones) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALEngagementZones) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALEngagementZones) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALEngagementZones) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALEngagementZones) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALEngagementZones) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALEngagementZones) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALEngagementZones) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALEngagementZones) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALEngagementZones) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALEngagementZones) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALEngagementZones) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALEngagementZones) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALEngagementZones) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALEngagementZones) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALEngagementZones) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALEngagementZones) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALEngagementZones) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALEngagementZones) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALEngagementZones) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALEngagementZones) Subscribe_0(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call subscribe failed: %s", err)
	}
	return nil
}
func (p *ALEngagementZones) Unsubscribe(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unsubscribe failed: %s", err)
	}
	return nil
}
func (p *ALEngagementZones) UpdatePrecision(p0 string, p1 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call updatePrecision failed: %s", err)
	}
	return nil
}
func (p *ALEngagementZones) GetCurrentPrecision() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(120, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getCurrentPrecision failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getCurrentPrecision response: %s", err)
	}
	return ret, nil
}
func (p *ALEngagementZones) GetMyPrecision(p0 string) (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(122, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMyPrecision failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMyPrecision response: %s", err)
	}
	return ret, nil
}
func (p *ALEngagementZones) GetSubscribersInfo() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(123, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getSubscribersInfo failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getSubscribersInfo response: %s", err)
	}
	return ret, nil
}
func (p *ALEngagementZones) GetOutputNames() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(124, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getOutputNames failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getOutputNames response: %s", err)
	}
	return ret, nil
}
func (p *ALEngagementZones) GetEventList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(125, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getEventList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getEventList response: %s", err)
	}
	return ret, nil
}
func (p *ALEngagementZones) GetMemoryKeyList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(126, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMemoryKeyList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMemoryKeyList response: %s", err)
	}
	return ret, nil
}
func (p *ALEngagementZones) IsPaused() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(127, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isPaused failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isPaused response: %s", err)
	}
	return ret, nil
}
func (p *ALEngagementZones) Pause(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(128, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call pause failed: %s", err)
	}
	return nil
}
func (p *ALEngagementZones) IsProcessing() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(129, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isProcessing failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isProcessing response: %s", err)
	}
	return ret, nil
}
func (p *ALEngagementZones) SetLimitAngle(p0 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(130, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setLimitAngle failed: %s", err)
	}
	return nil
}
func (p *ALEngagementZones) GetLimitAngle() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(131, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getLimitAngle failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getLimitAngle response: %s", err)
	}
	return ret, nil
}
func (p *ALEngagementZones) SetFirstLimitDistance(p0 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(132, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setFirstLimitDistance failed: %s", err)
	}
	return nil
}
func (p *ALEngagementZones) GetFirstLimitDistance() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(133, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getFirstLimitDistance failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getFirstLimitDistance response: %s", err)
	}
	return ret, nil
}
func (p *ALEngagementZones) SetSecondLimitDistance(p0 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(134, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setSecondLimitDistance failed: %s", err)
	}
	return nil
}
func (p *ALEngagementZones) GetSecondLimitDistance() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(135, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getSecondLimitDistance failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getSecondLimitDistance response: %s", err)
	}
	return ret, nil
}

type ALGazeAnalysis struct {
	session.Proxy
}

func NewALGazeAnalysis(ses session.Session, obj uint32) (*ALGazeAnalysis, error) {
	proxy, err := ses.Proxy("ALGazeAnalysis", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALGazeAnalysis{proxy}, nil
}
func (p *ALGazeAnalysis) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALGazeAnalysis) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALGazeAnalysis) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALGazeAnalysis) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALGazeAnalysis) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALGazeAnalysis) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALGazeAnalysis) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALGazeAnalysis) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALGazeAnalysis) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALGazeAnalysis) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALGazeAnalysis) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALGazeAnalysis) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALGazeAnalysis) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALGazeAnalysis) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALGazeAnalysis) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALGazeAnalysis) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALGazeAnalysis) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALGazeAnalysis) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALGazeAnalysis) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALGazeAnalysis) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALGazeAnalysis) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALGazeAnalysis) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALGazeAnalysis) Subscribe_0(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call subscribe failed: %s", err)
	}
	return nil
}
func (p *ALGazeAnalysis) Unsubscribe(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unsubscribe failed: %s", err)
	}
	return nil
}
func (p *ALGazeAnalysis) UpdatePrecision(p0 string, p1 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call updatePrecision failed: %s", err)
	}
	return nil
}
func (p *ALGazeAnalysis) GetCurrentPrecision() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(120, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getCurrentPrecision failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getCurrentPrecision response: %s", err)
	}
	return ret, nil
}
func (p *ALGazeAnalysis) GetMyPrecision(p0 string) (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(122, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMyPrecision failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMyPrecision response: %s", err)
	}
	return ret, nil
}
func (p *ALGazeAnalysis) GetSubscribersInfo() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(123, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getSubscribersInfo failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getSubscribersInfo response: %s", err)
	}
	return ret, nil
}
func (p *ALGazeAnalysis) GetOutputNames() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(124, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getOutputNames failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getOutputNames response: %s", err)
	}
	return ret, nil
}
func (p *ALGazeAnalysis) GetEventList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(125, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getEventList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getEventList response: %s", err)
	}
	return ret, nil
}
func (p *ALGazeAnalysis) GetMemoryKeyList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(126, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMemoryKeyList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMemoryKeyList response: %s", err)
	}
	return ret, nil
}
func (p *ALGazeAnalysis) IsPaused() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(127, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isPaused failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isPaused response: %s", err)
	}
	return ret, nil
}
func (p *ALGazeAnalysis) Pause(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(128, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call pause failed: %s", err)
	}
	return nil
}
func (p *ALGazeAnalysis) IsProcessing() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(129, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isProcessing failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isProcessing response: %s", err)
	}
	return ret, nil
}
func (p *ALGazeAnalysis) SetFaceAnalysisEnabled(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(130, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setFaceAnalysisEnabled failed: %s", err)
	}
	return nil
}
func (p *ALGazeAnalysis) IsFaceAnalysisEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(131, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isFaceAnalysisEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isFaceAnalysisEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALGazeAnalysis) SetTolerance(p0 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(132, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setTolerance failed: %s", err)
	}
	return nil
}
func (p *ALGazeAnalysis) GetTolerance() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(133, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getTolerance failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getTolerance response: %s", err)
	}
	return ret, nil
}

type ALWavingDetection struct {
	session.Proxy
}

func NewALWavingDetection(ses session.Session, obj uint32) (*ALWavingDetection, error) {
	proxy, err := ses.Proxy("ALWavingDetection", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALWavingDetection{proxy}, nil
}
func (p *ALWavingDetection) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALWavingDetection) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALWavingDetection) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALWavingDetection) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALWavingDetection) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALWavingDetection) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALWavingDetection) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALWavingDetection) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALWavingDetection) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALWavingDetection) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALWavingDetection) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALWavingDetection) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALWavingDetection) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALWavingDetection) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALWavingDetection) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALWavingDetection) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALWavingDetection) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALWavingDetection) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALWavingDetection) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALWavingDetection) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALWavingDetection) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALWavingDetection) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALWavingDetection) Subscribe_0(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call subscribe failed: %s", err)
	}
	return nil
}
func (p *ALWavingDetection) Unsubscribe(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unsubscribe failed: %s", err)
	}
	return nil
}
func (p *ALWavingDetection) UpdatePrecision(p0 string, p1 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call updatePrecision failed: %s", err)
	}
	return nil
}
func (p *ALWavingDetection) GetCurrentPrecision() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(120, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getCurrentPrecision failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getCurrentPrecision response: %s", err)
	}
	return ret, nil
}
func (p *ALWavingDetection) GetMyPrecision(p0 string) (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(122, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMyPrecision failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMyPrecision response: %s", err)
	}
	return ret, nil
}
func (p *ALWavingDetection) GetSubscribersInfo() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(123, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getSubscribersInfo failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getSubscribersInfo response: %s", err)
	}
	return ret, nil
}
func (p *ALWavingDetection) GetOutputNames() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(124, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getOutputNames failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getOutputNames response: %s", err)
	}
	return ret, nil
}
func (p *ALWavingDetection) GetEventList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(125, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getEventList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getEventList response: %s", err)
	}
	return ret, nil
}
func (p *ALWavingDetection) GetMemoryKeyList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(126, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMemoryKeyList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMemoryKeyList response: %s", err)
	}
	return ret, nil
}
func (p *ALWavingDetection) IsPaused() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(127, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isPaused failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isPaused response: %s", err)
	}
	return ret, nil
}
func (p *ALWavingDetection) Pause(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(128, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call pause failed: %s", err)
	}
	return nil
}
func (p *ALWavingDetection) IsProcessing() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(129, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isProcessing failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isProcessing response: %s", err)
	}
	return ret, nil
}
func (p *ALWavingDetection) SetMaxDistance(p0 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(130, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setMaxDistance failed: %s", err)
	}
	return nil
}
func (p *ALWavingDetection) GetMaxDistance() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(131, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMaxDistance failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMaxDistance response: %s", err)
	}
	return ret, nil
}
func (p *ALWavingDetection) SetMinSize(p0 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(132, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setMinSize failed: %s", err)
	}
	return nil
}
func (p *ALWavingDetection) GetMinSize() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(133, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMinSize failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMinSize response: %s", err)
	}
	return ret, nil
}

type ALCloseObjectDetection struct {
	session.Proxy
}

func NewALCloseObjectDetection(ses session.Session, obj uint32) (*ALCloseObjectDetection, error) {
	proxy, err := ses.Proxy("ALCloseObjectDetection", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALCloseObjectDetection{proxy}, nil
}
func (p *ALCloseObjectDetection) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALCloseObjectDetection) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALCloseObjectDetection) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALCloseObjectDetection) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALCloseObjectDetection) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALCloseObjectDetection) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALCloseObjectDetection) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALCloseObjectDetection) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALCloseObjectDetection) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALCloseObjectDetection) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALCloseObjectDetection) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALCloseObjectDetection) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALCloseObjectDetection) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALCloseObjectDetection) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALCloseObjectDetection) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALCloseObjectDetection) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALCloseObjectDetection) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALCloseObjectDetection) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALCloseObjectDetection) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALCloseObjectDetection) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALCloseObjectDetection) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALCloseObjectDetection) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALCloseObjectDetection) Subscribe_0(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call subscribe failed: %s", err)
	}
	return nil
}
func (p *ALCloseObjectDetection) Unsubscribe(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unsubscribe failed: %s", err)
	}
	return nil
}
func (p *ALCloseObjectDetection) UpdatePrecision(p0 string, p1 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call updatePrecision failed: %s", err)
	}
	return nil
}
func (p *ALCloseObjectDetection) GetCurrentPrecision() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(120, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getCurrentPrecision failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getCurrentPrecision response: %s", err)
	}
	return ret, nil
}
func (p *ALCloseObjectDetection) GetMyPrecision(p0 string) (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(122, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMyPrecision failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMyPrecision response: %s", err)
	}
	return ret, nil
}
func (p *ALCloseObjectDetection) GetSubscribersInfo() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(123, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getSubscribersInfo failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getSubscribersInfo response: %s", err)
	}
	return ret, nil
}
func (p *ALCloseObjectDetection) GetOutputNames() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(124, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getOutputNames failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getOutputNames response: %s", err)
	}
	return ret, nil
}
func (p *ALCloseObjectDetection) GetEventList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(125, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getEventList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getEventList response: %s", err)
	}
	return ret, nil
}
func (p *ALCloseObjectDetection) GetMemoryKeyList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(126, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMemoryKeyList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMemoryKeyList response: %s", err)
	}
	return ret, nil
}
func (p *ALCloseObjectDetection) IsPaused() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(127, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isPaused failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isPaused response: %s", err)
	}
	return ret, nil
}
func (p *ALCloseObjectDetection) Pause(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(128, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call pause failed: %s", err)
	}
	return nil
}
func (p *ALCloseObjectDetection) IsProcessing() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(129, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isProcessing failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isProcessing response: %s", err)
	}
	return ret, nil
}

type _ALFastPersonTracking struct {
	session.Proxy
}

func New_ALFastPersonTracking(ses session.Session, obj uint32) (*_ALFastPersonTracking, error) {
	proxy, err := ses.Proxy("_ALFastPersonTracking", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &_ALFastPersonTracking{proxy}, nil
}
func (p *_ALFastPersonTracking) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *_ALFastPersonTracking) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *_ALFastPersonTracking) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *_ALFastPersonTracking) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *_ALFastPersonTracking) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *_ALFastPersonTracking) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *_ALFastPersonTracking) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *_ALFastPersonTracking) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *_ALFastPersonTracking) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_ALFastPersonTracking) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *_ALFastPersonTracking) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *_ALFastPersonTracking) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *_ALFastPersonTracking) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_ALFastPersonTracking) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *_ALFastPersonTracking) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *_ALFastPersonTracking) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *_ALFastPersonTracking) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *_ALFastPersonTracking) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *_ALFastPersonTracking) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *_ALFastPersonTracking) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *_ALFastPersonTracking) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *_ALFastPersonTracking) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *_ALFastPersonTracking) StartTracking() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(114, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call startTracking failed: %s", err)
	}
	return nil
}
func (p *_ALFastPersonTracking) StartTracking_0(p0 []float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p0)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p0 {
			err = basic.WriteFloat32(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call startTracking failed: %s", err)
	}
	return nil
}
func (p *_ALFastPersonTracking) StopTracking() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call stopTracking failed: %s", err)
	}
	return nil
}
func (p *_ALFastPersonTracking) IsTracking() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(117, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTracking failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTracking response: %s", err)
	}
	return ret, nil
}
func (p *_ALFastPersonTracking) SetTrackingDistance(p0 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setTrackingDistance failed: %s", err)
	}
	return nil
}
func (p *_ALFastPersonTracking) GetTrackingDistance() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(119, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getTrackingDistance failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getTrackingDistance response: %s", err)
	}
	return ret, nil
}
func (p *_ALFastPersonTracking) SetTrackingPosition(p0 float32, p1 float32, p2 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteFloat32(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(120, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setTrackingPosition failed: %s", err)
	}
	return nil
}
func (p *_ALFastPersonTracking) GetTrackingPosition() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(121, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getTrackingPosition failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getTrackingPosition response: %s", err)
	}
	return ret, nil
}
func (p *_ALFastPersonTracking) _setDetectionMode(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(122, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setDetectionMode failed: %s", err)
	}
	return nil
}
func (p *_ALFastPersonTracking) _getDetectionMode() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(123, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getDetectionMode failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getDetectionMode response: %s", err)
	}
	return ret, nil
}

type _ALFindPersonHead struct {
	session.Proxy
}

func New_ALFindPersonHead(ses session.Session, obj uint32) (*_ALFindPersonHead, error) {
	proxy, err := ses.Proxy("_ALFindPersonHead", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &_ALFindPersonHead{proxy}, nil
}
func (p *_ALFindPersonHead) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *_ALFindPersonHead) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *_ALFindPersonHead) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *_ALFindPersonHead) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *_ALFindPersonHead) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *_ALFindPersonHead) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *_ALFindPersonHead) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *_ALFindPersonHead) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *_ALFindPersonHead) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_ALFindPersonHead) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *_ALFindPersonHead) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *_ALFindPersonHead) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *_ALFindPersonHead) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_ALFindPersonHead) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *_ALFindPersonHead) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *_ALFindPersonHead) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *_ALFindPersonHead) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *_ALFindPersonHead) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *_ALFindPersonHead) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *_ALFindPersonHead) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *_ALFindPersonHead) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *_ALFindPersonHead) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *_ALFindPersonHead) StartSearching() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(114, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call startSearching failed: %s", err)
	}
	return nil
}
func (p *_ALFindPersonHead) StartSearching_0(p0 []float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p0)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p0 {
			err = basic.WriteFloat32(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call startSearching failed: %s", err)
	}
	return nil
}
func (p *_ALFindPersonHead) StopSearching() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call stopSearching failed: %s", err)
	}
	return nil
}
func (p *_ALFindPersonHead) IsSearching() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(117, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isSearching failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isSearching response: %s", err)
	}
	return ret, nil
}
func (p *_ALFindPersonHead) SetTrackingDistance(p0 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setTrackingDistance failed: %s", err)
	}
	return nil
}
func (p *_ALFindPersonHead) GetTrackingDistance() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(119, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getTrackingDistance failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getTrackingDistance response: %s", err)
	}
	return ret, nil
}
func (p *_ALFindPersonHead) SetTrackingPosition(p0 float32, p1 float32, p2 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteFloat32(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(120, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setTrackingPosition failed: %s", err)
	}
	return nil
}
func (p *_ALFindPersonHead) GetTrackingPosition() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(121, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getTrackingPosition failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getTrackingPosition response: %s", err)
	}
	return ret, nil
}
func (p *_ALFindPersonHead) _setDetectionMode(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(122, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setDetectionMode failed: %s", err)
	}
	return nil
}
func (p *_ALFindPersonHead) _getDetectionMode() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(123, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getDetectionMode failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getDetectionMode response: %s", err)
	}
	return ret, nil
}

type ALVisualCompass struct {
	session.Proxy
}

func NewALVisualCompass(ses session.Session, obj uint32) (*ALVisualCompass, error) {
	proxy, err := ses.Proxy("ALVisualCompass", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALVisualCompass{proxy}, nil
}
func (p *ALVisualCompass) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualCompass) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALVisualCompass) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualCompass) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALVisualCompass) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualCompass) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALVisualCompass) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualCompass) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualCompass) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualCompass) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALVisualCompass) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualCompass) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALVisualCompass) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualCompass) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALVisualCompass) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALVisualCompass) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualCompass) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualCompass) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualCompass) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualCompass) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualCompass) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualCompass) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualCompass) Subscribe_0(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call subscribe failed: %s", err)
	}
	return nil
}
func (p *ALVisualCompass) Unsubscribe(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unsubscribe failed: %s", err)
	}
	return nil
}
func (p *ALVisualCompass) UpdatePrecision(p0 string, p1 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call updatePrecision failed: %s", err)
	}
	return nil
}
func (p *ALVisualCompass) GetCurrentPrecision() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(120, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getCurrentPrecision failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getCurrentPrecision response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualCompass) GetMyPrecision(p0 string) (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(122, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMyPrecision failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMyPrecision response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualCompass) GetSubscribersInfo() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(123, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getSubscribersInfo failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getSubscribersInfo response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualCompass) GetOutputNames() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(124, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getOutputNames failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getOutputNames response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualCompass) GetEventList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(125, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getEventList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getEventList response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualCompass) GetMemoryKeyList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(126, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMemoryKeyList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMemoryKeyList response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualCompass) SetParameter(p0 string, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(131, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setParameter failed: %s", err)
	}
	return nil
}
func (p *ALVisualCompass) IsPaused() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(135, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isPaused failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isPaused response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualCompass) IsProcessing() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(136, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isProcessing failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isProcessing response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualCompass) Pause(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(137, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call pause failed: %s", err)
	}
	return nil
}
func (p *ALVisualCompass) _run() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(138, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _run failed: %s", err)
	}
	return nil
}
func (p *ALVisualCompass) GetReferenceImage() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(139, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getReferenceImage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getReferenceImage response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualCompass) EnableReferenceRefresh(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(140, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableReferenceRefresh failed: %s", err)
	}
	return nil
}
func (p *ALVisualCompass) GetMatchingQuality() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(141, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMatchingQuality failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMatchingQuality response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualCompass) SetCurrentImageAsReference() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(142, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call setCurrentImageAsReference failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse setCurrentImageAsReference response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualCompass) MoveTo(p0 float32, p1 float32, p2 float32) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteFloat32(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(143, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call moveTo failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse moveTo response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualCompass) MoveStraightTo(p0 float32) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(144, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call moveStraightTo failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse moveStraightTo response: %s", err)
	}
	return ret, nil
}
func (p *ALVisualCompass) _xOnMoveFailed() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(145, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _xOnMoveFailed failed: %s", err)
	}
	return nil
}
func (p *ALVisualCompass) _xOnFootContactChanged(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(146, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _xOnFootContactChanged failed: %s", err)
	}
	return nil
}
func (p *ALVisualCompass) _stopControllers() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(147, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _stopControllers failed: %s", err)
	}
	return nil
}
func (p *ALVisualCompass) _resumeControllers(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(148, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _resumeControllers failed: %s", err)
	}
	return nil
}
func (p *ALVisualCompass) _resume() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(149, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _resume failed: %s", err)
	}
	return nil
}
func (p *ALVisualCompass) _setTranslationParameters(p0 float32, p1 float32, p2 float32, p3 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteFloat32(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteFloat32(p3, buf); err != nil {
		return fmt.Errorf("failed to serialize p3: %s", err)
	}
	_, err = p.Call(150, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setTranslationParameters failed: %s", err)
	}
	return nil
}
func (p *ALVisualCompass) WaitUntilTargetReached() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(152, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call waitUntilTargetReached failed: %s", err)
	}
	return nil
}
func (p *ALVisualCompass) _setOdometryMode(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(153, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setOdometryMode failed: %s", err)
	}
	return nil
}

type ALLocalization struct {
	session.Proxy
}

func NewALLocalization(ses session.Session, obj uint32) (*ALLocalization, error) {
	proxy, err := ses.Proxy("ALLocalization", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALLocalization{proxy}, nil
}
func (p *ALLocalization) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALLocalization) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALLocalization) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALLocalization) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALLocalization) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALLocalization) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALLocalization) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALLocalization) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALLocalization) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALLocalization) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALLocalization) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALLocalization) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALLocalization) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALLocalization) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALLocalization) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALLocalization) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALLocalization) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALLocalization) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALLocalization) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALLocalization) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALLocalization) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALLocalization) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALLocalization) StopAll() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call stopAll failed: %s", err)
	}
	return nil
}
func (p *ALLocalization) _safetyStop() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _safetyStop failed: %s", err)
	}
	return nil
}
func (p *ALLocalization) IsInCurrentHome() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(118, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isInCurrentHome failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isInCurrentHome response: %s", err)
	}
	return ret, nil
}
func (p *ALLocalization) GetCurrentPanoramaDescriptor() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(119, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getCurrentPanoramaDescriptor failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getCurrentPanoramaDescriptor response: %s", err)
	}
	return ret, nil
}
func (p *ALLocalization) IsRelocalizationRequired() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(124, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isRelocalizationRequired failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isRelocalizationRequired response: %s", err)
	}
	return ret, nil
}
func (p *ALLocalization) GetDriftPercentages() ([]float32, error) {
	var err error
	var ret []float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(125, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getDriftPercentages failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []float32, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]float32, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadFloat32(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getDriftPercentages response: %s", err)
	}
	return ret, nil
}
func (p *ALLocalization) IsDataAvailable() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(126, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isDataAvailable failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isDataAvailable response: %s", err)
	}
	return ret, nil
}
func (p *ALLocalization) GetRobotPosition() ([]float32, error) {
	var err error
	var ret []float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(127, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getRobotPosition failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []float32, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]float32, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadFloat32(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getRobotPosition response: %s", err)
	}
	return ret, nil
}
func (p *ALLocalization) GetRobotPosition_0(p0 bool) ([]float32, error) {
	var err error
	var ret []float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(128, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getRobotPosition failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []float32, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]float32, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadFloat32(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getRobotPosition response: %s", err)
	}
	return ret, nil
}
func (p *ALLocalization) GetRobotOrientation(p0 bool) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(129, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getRobotOrientation failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getRobotOrientation response: %s", err)
	}
	return ret, nil
}
func (p *ALLocalization) GetRobotOrientation_0() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(130, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getRobotOrientation failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getRobotOrientation response: %s", err)
	}
	return ret, nil
}
func (p *ALLocalization) IsInGivenZone(p0 float32, p1 float32, p2 float32, p3 float32) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteFloat32(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteFloat32(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(131, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isInGivenZone failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isInGivenZone response: %s", err)
	}
	return ret, nil
}
func (p *ALLocalization) _launchLocalization() ([]float32, error) {
	var err error
	var ret []float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(132, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _launchLocalization failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []float32, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]float32, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadFloat32(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse _launchLocalization response: %s", err)
	}
	return ret, nil
}
func (p *ALLocalization) _getSavingDirectories() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(135, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getSavingDirectories failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getSavingDirectories response: %s", err)
	}
	return ret, nil
}
func (p *ALLocalization) _getLoadedDirectory() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(136, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getLoadedDirectory failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getLoadedDirectory response: %s", err)
	}
	return ret, nil
}
func (p *ALLocalization) _handlePush() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(137, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _handlePush failed: %s", err)
	}
	return nil
}

type ALPanoramaCompass struct {
	session.Proxy
}

func NewALPanoramaCompass(ses session.Session, obj uint32) (*ALPanoramaCompass, error) {
	proxy, err := ses.Proxy("ALPanoramaCompass", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALPanoramaCompass{proxy}, nil
}
func (p *ALPanoramaCompass) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALPanoramaCompass) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALPanoramaCompass) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALPanoramaCompass) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALPanoramaCompass) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALPanoramaCompass) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALPanoramaCompass) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALPanoramaCompass) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALPanoramaCompass) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALPanoramaCompass) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALPanoramaCompass) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALPanoramaCompass) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALPanoramaCompass) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALPanoramaCompass) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALPanoramaCompass) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALPanoramaCompass) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALPanoramaCompass) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALPanoramaCompass) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALPanoramaCompass) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALPanoramaCompass) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALPanoramaCompass) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALPanoramaCompass) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALPanoramaCompass) IsDataAvailable() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(115, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isDataAvailable failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isDataAvailable response: %s", err)
	}
	return ret, nil
}
func (p *ALPanoramaCompass) GetCurrentPosition() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(116, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getCurrentPosition failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getCurrentPosition response: %s", err)
	}
	return ret, nil
}
func (p *ALPanoramaCompass) LocalizeNoHint() ([]float32, error) {
	var err error
	var ret []float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(117, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call localizeNoHint failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []float32, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]float32, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadFloat32(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse localizeNoHint response: %s", err)
	}
	return ret, nil
}
func (p *ALPanoramaCompass) Localize() ([]float32, error) {
	var err error
	var ret []float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(118, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call localize failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []float32, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]float32, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadFloat32(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse localize response: %s", err)
	}
	return ret, nil
}
func (p *ALPanoramaCompass) Localize_0(p0 bool) ([]float32, error) {
	var err error
	var ret []float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(119, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call localize failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []float32, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]float32, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadFloat32(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse localize response: %s", err)
	}
	return ret, nil
}
func (p *ALPanoramaCompass) IsRelocalizationRequired() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(123, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isRelocalizationRequired failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isRelocalizationRequired response: %s", err)
	}
	return ret, nil
}
func (p *ALPanoramaCompass) GetCurrentPanoramaDescriptor() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(125, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getCurrentPanoramaDescriptor failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getCurrentPanoramaDescriptor response: %s", err)
	}
	return ret, nil
}
func (p *ALPanoramaCompass) _launchLocalization() ([]float32, error) {
	var err error
	var ret []float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(131, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _launchLocalization failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []float32, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]float32, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadFloat32(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse _launchLocalization response: %s", err)
	}
	return ret, nil
}

type ALUserInfo struct {
	session.Proxy
}

func NewALUserInfo(ses session.Session, obj uint32) (*ALUserInfo, error) {
	proxy, err := ses.Proxy("ALUserInfo", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALUserInfo{proxy}, nil
}
func (p *ALUserInfo) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALUserInfo) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALUserInfo) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALUserInfo) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALUserInfo) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALUserInfo) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALUserInfo) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALUserInfo) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALUserInfo) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALUserInfo) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALUserInfo) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALUserInfo) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALUserInfo) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALUserInfo) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALUserInfo) Get(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(100, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call get failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse get response: %s", err)
	}
	return ret, nil
}
func (p *ALUserInfo) Get_1(p0 string, p1 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(102, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call get failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse get response: %s", err)
	}
	return ret, nil
}
func (p *ALUserInfo) _set(p0 string, p1 value.Value) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _set failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _set response: %s", err)
	}
	return ret, nil
}
func (p *ALUserInfo) Set(p0 string, p1 string, p2 value.Value) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = p2.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call set failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse set response: %s", err)
	}
	return ret, nil
}
func (p *ALUserInfo) Has(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(108, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call has failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse has response: %s", err)
	}
	return ret, nil
}
func (p *ALUserInfo) Has_1(p0 string, p1 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(110, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call has failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse has response: %s", err)
	}
	return ret, nil
}
func (p *ALUserInfo) _remove(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _remove failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _remove response: %s", err)
	}
	return ret, nil
}
func (p *ALUserInfo) Remove(p0 string, p1 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(114, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call remove failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse remove response: %s", err)
	}
	return ret, nil
}
func (p *ALUserInfo) RemoveUser(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(116, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call removeUser failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse removeUser response: %s", err)
	}
	return ret, nil
}
func (p *ALUserInfo) _removeUser() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(118, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _removeUser failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _removeUser response: %s", err)
	}
	return ret, nil
}
func (p *ALUserInfo) GetType(p0 string, p1 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(120, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getType failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getType response: %s", err)
	}
	return ret, nil
}

type ALUserSession struct {
	session.Proxy
}

func NewALUserSession(ses session.Session, obj uint32) (*ALUserSession, error) {
	proxy, err := ses.Proxy("ALUserSession", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALUserSession{proxy}, nil
}
func (p *ALUserSession) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALUserSession) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALUserSession) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALUserSession) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALUserSession) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALUserSession) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALUserSession) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALUserSession) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALUserSession) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALUserSession) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALUserSession) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALUserSession) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALUserSession) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALUserSession) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALUserSession) GetBindingList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(123, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBindingList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBindingList response: %s", err)
	}
	return ret, nil
}
func (p *ALUserSession) DoesBindingExist(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(124, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call doesBindingExist failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse doesBindingExist response: %s", err)
	}
	return ret, nil
}
func (p *ALUserSession) _deleteAllUsers() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(142, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _deleteAllUsers failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _deleteAllUsers response: %s", err)
	}
	return ret, nil
}
func (p *ALUserSession) GetBindingSources() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(143, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBindingSources failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBindingSources response: %s", err)
	}
	return ret, nil
}
func (p *ALUserSession) DoesBindingSourceExist(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(144, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call doesBindingSourceExist failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse doesBindingSourceExist response: %s", err)
	}
	return ret, nil
}
func (p *ALUserSession) GetUserDataSources() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(145, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUserDataSources failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUserDataSources response: %s", err)
	}
	return ret, nil
}
func (p *ALUserSession) DoesUserDataSourceExist(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(146, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call doesUserDataSourceExist failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse doesUserDataSourceExist response: %s", err)
	}
	return ret, nil
}
func (p *ALUserSession) _registerUserDataSource(p0 string, p1 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(147, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _registerUserDataSource failed: %s", err)
	}
	return nil
}
func (p *ALUserSession) _unregisterUserDataSource(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(148, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _unregisterUserDataSource failed: %s", err)
	}
	return nil
}

type _ALUserSessionCompat struct {
	session.Proxy
}

func New_ALUserSessionCompat(ses session.Session, obj uint32) (*_ALUserSessionCompat, error) {
	proxy, err := ses.Proxy("_ALUserSessionCompat", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &_ALUserSessionCompat{proxy}, nil
}
func (p *_ALUserSessionCompat) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *_ALUserSessionCompat) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *_ALUserSessionCompat) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *_ALUserSessionCompat) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *_ALUserSessionCompat) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *_ALUserSessionCompat) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *_ALUserSessionCompat) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *_ALUserSessionCompat) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *_ALUserSessionCompat) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_ALUserSessionCompat) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *_ALUserSessionCompat) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *_ALUserSessionCompat) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *_ALUserSessionCompat) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_ALUserSessionCompat) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *_ALUserSessionCompat) OnNoOpenSession(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(105, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call onNoOpenSession failed: %s", err)
	}
	return nil
}

type ALThinkingExpression struct {
	session.Proxy
}

func NewALThinkingExpression(ses session.Session, obj uint32) (*ALThinkingExpression, error) {
	proxy, err := ses.Proxy("ALThinkingExpression", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALThinkingExpression{proxy}, nil
}
func (p *ALThinkingExpression) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALThinkingExpression) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALThinkingExpression) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALThinkingExpression) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALThinkingExpression) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALThinkingExpression) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALThinkingExpression) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALThinkingExpression) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALThinkingExpression) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALThinkingExpression) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALThinkingExpression) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALThinkingExpression) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALThinkingExpression) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALThinkingExpression) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALThinkingExpression) _startActivity(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _startActivity failed: %s", err)
	}
	return nil
}
func (p *ALThinkingExpression) Start() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(101, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call start failed: %s", err)
	}
	return nil
}
func (p *ALThinkingExpression) Stop() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(102, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call stop failed: %s", err)
	}
	return nil
}
func (p *ALThinkingExpression) IsRunning() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isRunning failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isRunning response: %s", err)
	}
	return ret, nil
}
func (p *ALThinkingExpression) _getLoadingResponseToSay(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getLoadingResponseToSay failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getLoadingResponseToSay response: %s", err)
	}
	return ret, nil
}
func (p *ALThinkingExpression) _onPreferenceUpdated(p0 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(105, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _onPreferenceUpdated failed: %s", err)
	}
	return nil
}
func (p *ALThinkingExpression) _onPreferenceSynchronized(p0 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(106, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _onPreferenceSynchronized failed: %s", err)
	}
	return nil
}

type ALBasicAwareness struct {
	session.Proxy
}

func NewALBasicAwareness(ses session.Session, obj uint32) (*ALBasicAwareness, error) {
	proxy, err := ses.Proxy("ALBasicAwareness", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALBasicAwareness{proxy}, nil
}
func (p *ALBasicAwareness) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALBasicAwareness) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALBasicAwareness) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALBasicAwareness) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALBasicAwareness) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALBasicAwareness) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALBasicAwareness) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALBasicAwareness) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALBasicAwareness) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALBasicAwareness) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALBasicAwareness) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALBasicAwareness) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALBasicAwareness) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALBasicAwareness) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALBasicAwareness) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALBasicAwareness) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALBasicAwareness) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALBasicAwareness) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALBasicAwareness) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALBasicAwareness) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALBasicAwareness) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALBasicAwareness) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALBasicAwareness) _onPeopleDetected(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(114, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _onPeopleDetected failed: %s", err)
	}
	return nil
}
func (p *ALBasicAwareness) _onMovementDetected(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _onMovementDetected failed: %s", err)
	}
	return nil
}
func (p *ALBasicAwareness) _onNavigationMotionDetected(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _onNavigationMotionDetected failed: %s", err)
	}
	return nil
}
func (p *ALBasicAwareness) _onCloseMovementDetected(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(117, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _onCloseMovementDetected failed: %s", err)
	}
	return nil
}
func (p *ALBasicAwareness) _onSoundDetected(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _onSoundDetected failed: %s", err)
	}
	return nil
}
func (p *ALBasicAwareness) _onTouchDetected(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(119, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _onTouchDetected failed: %s", err)
	}
	return nil
}
func (p *ALBasicAwareness) _onFastPersonTracking(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(120, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _onFastPersonTracking failed: %s", err)
	}
	return nil
}
func (p *ALBasicAwareness) _onNoFastPersonFound(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(121, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _onNoFastPersonFound failed: %s", err)
	}
	return nil
}
func (p *ALBasicAwareness) _onHeadTracking(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(122, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _onHeadTracking failed: %s", err)
	}
	return nil
}
func (p *ALBasicAwareness) _onHeadNotFound(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(123, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _onHeadNotFound failed: %s", err)
	}
	return nil
}
func (p *ALBasicAwareness) _onHeadReached(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(124, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _onHeadReached failed: %s", err)
	}
	return nil
}
func (p *ALBasicAwareness) _onHeadTrackingStopped(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(125, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _onHeadTrackingStopped failed: %s", err)
	}
	return nil
}
func (p *ALBasicAwareness) SetEnabled(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(126, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setEnabled failed: %s", err)
	}
	return nil
}
func (p *ALBasicAwareness) IsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(127, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALBasicAwareness) IsRunning_0() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(128, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isRunning failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isRunning response: %s", err)
	}
	return ret, nil
}
func (p *ALBasicAwareness) StartAwareness() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(129, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call startAwareness failed: %s", err)
	}
	return nil
}
func (p *ALBasicAwareness) StopAwareness() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(130, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call stopAwareness failed: %s", err)
	}
	return nil
}
func (p *ALBasicAwareness) IsAwarenessRunning() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(131, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isAwarenessRunning failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isAwarenessRunning response: %s", err)
	}
	return ret, nil
}
func (p *ALBasicAwareness) PauseAwareness() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(132, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call pauseAwareness failed: %s", err)
	}
	return nil
}
func (p *ALBasicAwareness) ResumeAwareness() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(133, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call resumeAwareness failed: %s", err)
	}
	return nil
}
func (p *ALBasicAwareness) IsAwarenessPaused() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(134, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isAwarenessPaused failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isAwarenessPaused response: %s", err)
	}
	return ret, nil
}
func (p *ALBasicAwareness) SetStimulusDetectionEnabled(p0 string, p1 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteBool(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(135, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setStimulusDetectionEnabled failed: %s", err)
	}
	return nil
}
func (p *ALBasicAwareness) IsStimulusDetectionEnabled(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(136, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStimulusDetectionEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStimulusDetectionEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALBasicAwareness) SetParameter(p0 string, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(137, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setParameter failed: %s", err)
	}
	return nil
}
func (p *ALBasicAwareness) ResetAllParameters() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(138, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call resetAllParameters failed: %s", err)
	}
	return nil
}
func (p *ALBasicAwareness) GetParameter(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(139, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getParameter failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getParameter response: %s", err)
	}
	return ret, nil
}
func (p *ALBasicAwareness) SetEngagementMode(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(140, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setEngagementMode failed: %s", err)
	}
	return nil
}
func (p *ALBasicAwareness) GetEngagementMode() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(141, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getEngagementMode failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getEngagementMode response: %s", err)
	}
	return ret, nil
}
func (p *ALBasicAwareness) _setCustomEngagementMode(p0 bool, p1 []string, p2 []string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p1)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p1 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p2)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p2 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(142, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setCustomEngagementMode failed: %s", err)
	}
	return nil
}
func (p *ALBasicAwareness) SetTrackingMode(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(143, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setTrackingMode failed: %s", err)
	}
	return nil
}
func (p *ALBasicAwareness) GetTrackingMode() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(144, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getTrackingMode failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getTrackingMode response: %s", err)
	}
	return ret, nil
}
func (p *ALBasicAwareness) _setContextualMoveType(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(146, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setContextualMoveType failed: %s", err)
	}
	return nil
}
func (p *ALBasicAwareness) _pauseAwareness() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(148, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _pauseAwareness failed: %s", err)
	}
	return nil
}
func (p *ALBasicAwareness) _resumeAwareness() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(149, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _resumeAwareness failed: %s", err)
	}
	return nil
}
func (p *ALBasicAwareness) _isAwarenessPaused() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(150, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _isAwarenessPaused failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _isAwarenessPaused response: %s", err)
	}
	return ret, nil
}
func (p *ALBasicAwareness) _useLedDebug(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(151, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _useLedDebug failed: %s", err)
	}
	return nil
}
func (p *ALBasicAwareness) _setLedGroup(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(152, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setLedGroup failed: %s", err)
	}
	return nil
}
func (p *ALBasicAwareness) _displayRobotViewDebug(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(153, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _displayRobotViewDebug failed: %s", err)
	}
	return nil
}
func (p *ALBasicAwareness) _getParametersInfo() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(154, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getParametersInfo failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getParametersInfo response: %s", err)
	}
	return ret, nil
}
func (p *ALBasicAwareness) _setEnableStimuliFromBehind(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(155, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setEnableStimuliFromBehind failed: %s", err)
	}
	return nil
}
func (p *ALBasicAwareness) _getEnableStimuliFromBehind() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(156, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getEnableStimuliFromBehind failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getEnableStimuliFromBehind response: %s", err)
	}
	return ret, nil
}
func (p *ALBasicAwareness) _setEnableCheckLowStimuli(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(157, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setEnableCheckLowStimuli failed: %s", err)
	}
	return nil
}
func (p *ALBasicAwareness) _getEnableCheckLowStimuli() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(158, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getEnableCheckLowStimuli failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getEnableCheckLowStimuli response: %s", err)
	}
	return ret, nil
}
func (p *ALBasicAwareness) _getHomeReferencePosition() ([]float32, error) {
	var err error
	var ret []float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(159, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getHomeReferencePosition failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []float32, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]float32, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadFloat32(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getHomeReferencePosition response: %s", err)
	}
	return ret, nil
}
func (p *ALBasicAwareness) _onPreferenceUpdated(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(160, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _onPreferenceUpdated failed: %s", err)
	}
	return nil
}
func (p *ALBasicAwareness) _onPreferenceSynchronized(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(161, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _onPreferenceSynchronized failed: %s", err)
	}
	return nil
}

type ALBackgroundMovement struct {
	session.Proxy
}

func NewALBackgroundMovement(ses session.Session, obj uint32) (*ALBackgroundMovement, error) {
	proxy, err := ses.Proxy("ALBackgroundMovement", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALBackgroundMovement{proxy}, nil
}
func (p *ALBackgroundMovement) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALBackgroundMovement) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALBackgroundMovement) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALBackgroundMovement) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALBackgroundMovement) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALBackgroundMovement) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALBackgroundMovement) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALBackgroundMovement) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALBackgroundMovement) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALBackgroundMovement) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALBackgroundMovement) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALBackgroundMovement) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALBackgroundMovement) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALBackgroundMovement) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALBackgroundMovement) SetEnabled(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setEnabled failed: %s", err)
	}
	return nil
}
func (p *ALBackgroundMovement) IsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(101, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALBackgroundMovement) IsRunning() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(102, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isRunning failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isRunning response: %s", err)
	}
	return ret, nil
}
func (p *ALBackgroundMovement) _setMode(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(103, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setMode failed: %s", err)
	}
	return nil
}
func (p *ALBackgroundMovement) _getMode() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getMode failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getMode response: %s", err)
	}
	return ret, nil
}
func (p *ALBackgroundMovement) _setDefaultIdle(p0 []string, p1 []string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p0)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p0 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p1)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p1 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(107, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setDefaultIdle failed: %s", err)
	}
	return nil
}
func (p *ALBackgroundMovement) _resetDefaultIdle() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(108, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _resetDefaultIdle failed: %s", err)
	}
	return nil
}
func (p *ALBackgroundMovement) _getDefaultIdle() (IdleDefinition, error) {
	var err error
	var ret IdleDefinition
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(109, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getDefaultIdle failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = ReadIdleDefinition(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getDefaultIdle response: %s", err)
	}
	return ret, nil
}
func (p *ALBackgroundMovement) _setExpressiveIdle(p0 string, p1 []string, p2 []string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p1)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p1 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p2)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p2 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(110, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setExpressiveIdle failed: %s", err)
	}
	return nil
}
func (p *ALBackgroundMovement) _getExpressiveIdle(p0 string) (IdleDefinition, error) {
	var err error
	var ret IdleDefinition
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(111, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getExpressiveIdle failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = ReadIdleDefinition(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getExpressiveIdle response: %s", err)
	}
	return ret, nil
}

type ALListeningMovement struct {
	session.Proxy
}

func NewALListeningMovement(ses session.Session, obj uint32) (*ALListeningMovement, error) {
	proxy, err := ses.Proxy("ALListeningMovement", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALListeningMovement{proxy}, nil
}
func (p *ALListeningMovement) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALListeningMovement) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALListeningMovement) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALListeningMovement) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALListeningMovement) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALListeningMovement) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALListeningMovement) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALListeningMovement) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALListeningMovement) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALListeningMovement) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALListeningMovement) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALListeningMovement) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALListeningMovement) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALListeningMovement) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALListeningMovement) SetEnabled(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setEnabled failed: %s", err)
	}
	return nil
}
func (p *ALListeningMovement) IsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(101, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALListeningMovement) IsRunning() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(102, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isRunning failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isRunning response: %s", err)
	}
	return ret, nil
}
func (p *ALListeningMovement) _setEnabled(p0 bool, p1 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(103, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setEnabled failed: %s", err)
	}
	return nil
}
func (p *ALListeningMovement) _isEnabled(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _isEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _isEnabled response: %s", err)
	}
	return ret, nil
}

type _ConditionChecker_maxime_30937_0 struct {
	session.Proxy
}

func New_ConditionChecker_maxime_30937_0(ses session.Session, obj uint32) (*_ConditionChecker_maxime_30937_0, error) {
	proxy, err := ses.Proxy("_ConditionChecker_maxime_30937_0", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &_ConditionChecker_maxime_30937_0{proxy}, nil
}
func (p *_ConditionChecker_maxime_30937_0) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_0) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *_ConditionChecker_maxime_30937_0) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_0) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *_ConditionChecker_maxime_30937_0) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_0) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *_ConditionChecker_maxime_30937_0) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_0) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_0) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_0) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *_ConditionChecker_maxime_30937_0) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_0) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *_ConditionChecker_maxime_30937_0) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_0) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *_ConditionChecker_maxime_30937_0) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *_ConditionChecker_maxime_30937_0) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_0) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_0) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_0) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_0) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_0) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_0) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_0) OnEvent(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(114, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call onEvent failed: %s", err)
	}
	return nil
}
func (p *_ConditionChecker_maxime_30937_0) OnPreferenceUpdated(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call onPreferenceUpdated failed: %s", err)
	}
	return nil
}
func (p *_ConditionChecker_maxime_30937_0) OnPreferenceSynchronized(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call onPreferenceSynchronized failed: %s", err)
	}
	return nil
}

type ALExpressionWatcher struct {
	session.Proxy
}

func NewALExpressionWatcher(ses session.Session, obj uint32) (*ALExpressionWatcher, error) {
	proxy, err := ses.Proxy("ALExpressionWatcher", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALExpressionWatcher{proxy}, nil
}
func (p *ALExpressionWatcher) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALExpressionWatcher) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALExpressionWatcher) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALExpressionWatcher) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALExpressionWatcher) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALExpressionWatcher) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALExpressionWatcher) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALExpressionWatcher) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALExpressionWatcher) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALExpressionWatcher) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALExpressionWatcher) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALExpressionWatcher) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALExpressionWatcher) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALExpressionWatcher) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALExpressionWatcher) _start() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _start failed: %s", err)
	}
	return nil
}
func (p *ALExpressionWatcher) _stop() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(101, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _stop failed: %s", err)
	}
	return nil
}
func (p *ALExpressionWatcher) _isStarted() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(102, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _isStarted failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _isStarted response: %s", err)
	}
	return ret, nil
}
func (p *ALExpressionWatcher) _listReactor() (map[uint32]string, error) {
	var err error
	var ret map[uint32]string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _listReactor failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]string, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := basic.ReadString(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse _listReactor response: %s", err)
	}
	return ret, nil
}
func (p *ALExpressionWatcher) _purgeAll() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(106, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _purgeAll failed: %s", err)
	}
	return nil
}

type _LifeReporter struct {
	session.Proxy
}

func New_LifeReporter(ses session.Session, obj uint32) (*_LifeReporter, error) {
	proxy, err := ses.Proxy("_LifeReporter", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &_LifeReporter{proxy}, nil
}
func (p *_LifeReporter) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *_LifeReporter) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *_LifeReporter) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *_LifeReporter) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *_LifeReporter) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *_LifeReporter) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *_LifeReporter) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *_LifeReporter) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *_LifeReporter) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_LifeReporter) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *_LifeReporter) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *_LifeReporter) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *_LifeReporter) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_LifeReporter) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *_LifeReporter) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *_LifeReporter) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *_LifeReporter) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *_LifeReporter) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *_LifeReporter) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *_LifeReporter) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *_LifeReporter) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *_LifeReporter) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *_LifeReporter) _onFocusedActivity(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(114, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _onFocusedActivity failed: %s", err)
	}
	return nil
}
func (p *_LifeReporter) _onAutonomousLifeStateChange(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _onAutonomousLifeStateChange failed: %s", err)
	}
	return nil
}

type _ConditionChecker_maxime_30937_1 struct {
	session.Proxy
}

func New_ConditionChecker_maxime_30937_1(ses session.Session, obj uint32) (*_ConditionChecker_maxime_30937_1, error) {
	proxy, err := ses.Proxy("_ConditionChecker_maxime_30937_1", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &_ConditionChecker_maxime_30937_1{proxy}, nil
}
func (p *_ConditionChecker_maxime_30937_1) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_1) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *_ConditionChecker_maxime_30937_1) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_1) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *_ConditionChecker_maxime_30937_1) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_1) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *_ConditionChecker_maxime_30937_1) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_1) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_1) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_1) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *_ConditionChecker_maxime_30937_1) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_1) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *_ConditionChecker_maxime_30937_1) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_1) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *_ConditionChecker_maxime_30937_1) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *_ConditionChecker_maxime_30937_1) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_1) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_1) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_1) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_1) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_1) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_1) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_1) OnEvent(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(114, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call onEvent failed: %s", err)
	}
	return nil
}
func (p *_ConditionChecker_maxime_30937_1) OnPreferenceUpdated(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call onPreferenceUpdated failed: %s", err)
	}
	return nil
}
func (p *_ConditionChecker_maxime_30937_1) OnPreferenceSynchronized(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call onPreferenceSynchronized failed: %s", err)
	}
	return nil
}

type _LaunchpadPluginActivities struct {
	session.Proxy
}

func New_LaunchpadPluginActivities(ses session.Session, obj uint32) (*_LaunchpadPluginActivities, error) {
	proxy, err := ses.Proxy("_LaunchpadPluginActivities", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &_LaunchpadPluginActivities{proxy}, nil
}
func (p *_LaunchpadPluginActivities) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginActivities) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginActivities) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginActivities) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginActivities) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginActivities) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginActivities) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginActivities) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginActivities) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginActivities) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginActivities) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginActivities) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginActivities) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginActivities) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginActivities) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginActivities) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginActivities) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginActivities) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginActivities) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginActivities) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginActivities) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginActivities) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginActivities) _onActivityStatusChange(p0 string, p1 string, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(114, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _onActivityStatusChange failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginActivities) _onReady(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _onReady failed: %s", err)
	}
	return nil
}

type _LaunchpadPluginTiming struct {
	session.Proxy
}

func New_LaunchpadPluginTiming(ses session.Session, obj uint32) (*_LaunchpadPluginTiming, error) {
	proxy, err := ses.Proxy("_LaunchpadPluginTiming", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &_LaunchpadPluginTiming{proxy}, nil
}
func (p *_LaunchpadPluginTiming) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginTiming) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginTiming) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginTiming) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginTiming) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginTiming) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginTiming) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginTiming) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginTiming) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginTiming) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginTiming) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginTiming) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginTiming) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginTiming) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginTiming) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginTiming) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginTiming) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginTiming) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginTiming) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginTiming) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginTiming) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginTiming) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}

type _LaunchpadPluginTemperature struct {
	session.Proxy
}

func New_LaunchpadPluginTemperature(ses session.Session, obj uint32) (*_LaunchpadPluginTemperature, error) {
	proxy, err := ses.Proxy("_LaunchpadPluginTemperature", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &_LaunchpadPluginTemperature{proxy}, nil
}
func (p *_LaunchpadPluginTemperature) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginTemperature) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginTemperature) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginTemperature) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginTemperature) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginTemperature) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginTemperature) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginTemperature) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginTemperature) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginTemperature) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginTemperature) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginTemperature) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginTemperature) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginTemperature) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginTemperature) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginTemperature) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginTemperature) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginTemperature) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginTemperature) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginTemperature) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginTemperature) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginTemperature) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}

type _LaunchpadPluginHardwareInfo struct {
	session.Proxy
}

func New_LaunchpadPluginHardwareInfo(ses session.Session, obj uint32) (*_LaunchpadPluginHardwareInfo, error) {
	proxy, err := ses.Proxy("_LaunchpadPluginHardwareInfo", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &_LaunchpadPluginHardwareInfo{proxy}, nil
}
func (p *_LaunchpadPluginHardwareInfo) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginHardwareInfo) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginHardwareInfo) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginHardwareInfo) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginHardwareInfo) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginHardwareInfo) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginHardwareInfo) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginHardwareInfo) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginHardwareInfo) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginHardwareInfo) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginHardwareInfo) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginHardwareInfo) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginHardwareInfo) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginHardwareInfo) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginHardwareInfo) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginHardwareInfo) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginHardwareInfo) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginHardwareInfo) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginHardwareInfo) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginHardwareInfo) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginHardwareInfo) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginHardwareInfo) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}

type _LaunchpadPluginBattery struct {
	session.Proxy
}

func New_LaunchpadPluginBattery(ses session.Session, obj uint32) (*_LaunchpadPluginBattery, error) {
	proxy, err := ses.Proxy("_LaunchpadPluginBattery", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &_LaunchpadPluginBattery{proxy}, nil
}
func (p *_LaunchpadPluginBattery) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginBattery) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginBattery) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginBattery) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginBattery) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginBattery) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginBattery) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginBattery) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginBattery) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginBattery) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginBattery) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginBattery) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginBattery) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginBattery) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginBattery) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginBattery) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginBattery) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginBattery) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginBattery) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginBattery) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginBattery) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginBattery) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}

type _LaunchpadPluginPosture struct {
	session.Proxy
}

func New_LaunchpadPluginPosture(ses session.Session, obj uint32) (*_LaunchpadPluginPosture, error) {
	proxy, err := ses.Proxy("_LaunchpadPluginPosture", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &_LaunchpadPluginPosture{proxy}, nil
}
func (p *_LaunchpadPluginPosture) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginPosture) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginPosture) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginPosture) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginPosture) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginPosture) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginPosture) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginPosture) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginPosture) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginPosture) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginPosture) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginPosture) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginPosture) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginPosture) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginPosture) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginPosture) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginPosture) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginPosture) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginPosture) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginPosture) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginPosture) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginPosture) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *_LaunchpadPluginPosture) _onPostureFamilyChanged(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(114, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _onPostureFamilyChanged failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginPosture) _onPostureChanged(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _onPostureChanged failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginPosture) _onFall(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _onFall failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginPosture) _onPush(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(117, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _onPush failed: %s", err)
	}
	return nil
}
func (p *_LaunchpadPluginPosture) _onNaoqiReady(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _onNaoqiReady failed: %s", err)
	}
	return nil
}

type _ConditionChecker_maxime_30937_2 struct {
	session.Proxy
}

func New_ConditionChecker_maxime_30937_2(ses session.Session, obj uint32) (*_ConditionChecker_maxime_30937_2, error) {
	proxy, err := ses.Proxy("_ConditionChecker_maxime_30937_2", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &_ConditionChecker_maxime_30937_2{proxy}, nil
}
func (p *_ConditionChecker_maxime_30937_2) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_2) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *_ConditionChecker_maxime_30937_2) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_2) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *_ConditionChecker_maxime_30937_2) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_2) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *_ConditionChecker_maxime_30937_2) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_2) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_2) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_2) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *_ConditionChecker_maxime_30937_2) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_2) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *_ConditionChecker_maxime_30937_2) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_2) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *_ConditionChecker_maxime_30937_2) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *_ConditionChecker_maxime_30937_2) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_2) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_2) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_2) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_2) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_2) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_2) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *_ConditionChecker_maxime_30937_2) OnEvent(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(114, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call onEvent failed: %s", err)
	}
	return nil
}
func (p *_ConditionChecker_maxime_30937_2) OnPreferenceUpdated(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call onPreferenceUpdated failed: %s", err)
	}
	return nil
}
func (p *_ConditionChecker_maxime_30937_2) OnPreferenceSynchronized(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call onPreferenceSynchronized failed: %s", err)
	}
	return nil
}

type _ExitInteractive struct {
	session.Proxy
}

func New_ExitInteractive(ses session.Session, obj uint32) (*_ExitInteractive, error) {
	proxy, err := ses.Proxy("_ExitInteractive", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &_ExitInteractive{proxy}, nil
}
func (p *_ExitInteractive) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *_ExitInteractive) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *_ExitInteractive) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *_ExitInteractive) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *_ExitInteractive) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *_ExitInteractive) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *_ExitInteractive) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *_ExitInteractive) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *_ExitInteractive) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_ExitInteractive) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *_ExitInteractive) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *_ExitInteractive) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *_ExitInteractive) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_ExitInteractive) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *_ExitInteractive) Start() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call start failed: %s", err)
	}
	return nil
}
func (p *_ExitInteractive) Stop() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(101, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call stop failed: %s", err)
	}
	return nil
}
func (p *_ExitInteractive) IsRunning() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(102, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isRunning failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isRunning response: %s", err)
	}
	return ret, nil
}

type _UserSessionManager struct {
	session.Proxy
}

func New_UserSessionManager(ses session.Session, obj uint32) (*_UserSessionManager, error) {
	proxy, err := ses.Proxy("_UserSessionManager", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &_UserSessionManager{proxy}, nil
}
func (p *_UserSessionManager) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *_UserSessionManager) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *_UserSessionManager) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *_UserSessionManager) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *_UserSessionManager) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *_UserSessionManager) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *_UserSessionManager) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *_UserSessionManager) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *_UserSessionManager) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_UserSessionManager) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *_UserSessionManager) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *_UserSessionManager) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *_UserSessionManager) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *_UserSessionManager) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *_UserSessionManager) StartMonitoringUsers() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call startMonitoringUsers failed: %s", err)
	}
	return nil
}
func (p *_UserSessionManager) StopMonitoringUsers() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(101, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call stopMonitoringUsers failed: %s", err)
	}
	return nil
}
func (p *_UserSessionManager) IsMonitoringUsers() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(102, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isMonitoringUsers failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isMonitoringUsers response: %s", err)
	}
	return ret, nil
}

type ALAutonomousLife struct {
	session.Proxy
}

func NewALAutonomousLife(ses session.Session, obj uint32) (*ALAutonomousLife, error) {
	proxy, err := ses.Proxy("ALAutonomousLife", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALAutonomousLife{proxy}, nil
}
func (p *ALAutonomousLife) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALAutonomousLife) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALAutonomousLife) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALAutonomousLife) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALAutonomousLife) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALAutonomousLife) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALAutonomousLife) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALAutonomousLife) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALAutonomousLife) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALAutonomousLife) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALAutonomousLife) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALAutonomousLife) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALAutonomousLife) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALAutonomousLife) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALAutonomousLife) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALAutonomousLife) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALAutonomousLife) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALAutonomousLife) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALAutonomousLife) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALAutonomousLife) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALAutonomousLife) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALAutonomousLife) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALAutonomousLife) _onPreferenceChanged(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(114, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _onPreferenceChanged failed: %s", err)
	}
	return nil
}
func (p *ALAutonomousLife) OnReady(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call onReady failed: %s", err)
	}
	return nil
}
func (p *ALAutonomousLife) _onRobotHealthChanged(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _onRobotHealthChanged failed: %s", err)
	}
	return nil
}
func (p *ALAutonomousLife) _onPushRecovery(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(117, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _onPushRecovery failed: %s", err)
	}
	return nil
}
func (p *ALAutonomousLife) _onFallRecovery(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _onFallRecovery failed: %s", err)
	}
	return nil
}
func (p *ALAutonomousLife) _onRobotMoved(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(119, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _onRobotMoved failed: %s", err)
	}
	return nil
}
func (p *ALAutonomousLife) _setStateChangeEnabled(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(120, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setStateChangeEnabled failed: %s", err)
	}
	return nil
}
func (p *ALAutonomousLife) _loadConfigFile(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(121, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _loadConfigFile failed: %s", err)
	}
	return nil
}
func (p *ALAutonomousLife) SetState(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(122, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setState failed: %s", err)
	}
	return nil
}
func (p *ALAutonomousLife) GetState() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(123, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getState failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getState response: %s", err)
	}
	return ret, nil
}
func (p *ALAutonomousLife) FocusedActivity() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(124, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call focusedActivity failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse focusedActivity response: %s", err)
	}
	return ret, nil
}
func (p *ALAutonomousLife) SwitchFocus(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(125, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call switchFocus failed: %s", err)
	}
	return nil
}
func (p *ALAutonomousLife) _switchFocus(p0 string, p1 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(128, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _switchFocus failed: %s", err)
	}
	return nil
}
func (p *ALAutonomousLife) StopFocus() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(131, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call stopFocus failed: %s", err)
	}
	return nil
}
func (p *ALAutonomousLife) _stopFocus(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(132, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _stopFocus failed: %s", err)
	}
	return nil
}
func (p *ALAutonomousLife) StopAll() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(133, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call stopAll failed: %s", err)
	}
	return nil
}
func (p *ALAutonomousLife) _stopAll(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(134, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _stopAll failed: %s", err)
	}
	return nil
}
func (p *ALAutonomousLife) GetFocusContext(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(135, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getFocusContext failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getFocusContext response: %s", err)
	}
	return ret, nil
}
func (p *ALAutonomousLife) GetActivityContextPermissionViolations(p0 string) ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(136, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getActivityContextPermissionViolations failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getActivityContextPermissionViolations response: %s", err)
	}
	return ret, nil
}
func (p *ALAutonomousLife) GetActivityNature(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(137, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getActivityNature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getActivityNature response: %s", err)
	}
	return ret, nil
}
func (p *ALAutonomousLife) SetAutonomousAbilityEnabled(p0 string, p1 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteBool(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(145, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setAutonomousAbilityEnabled failed: %s", err)
	}
	return nil
}
func (p *ALAutonomousLife) GetAutonomousAbilityEnabled(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(146, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getAutonomousAbilityEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getAutonomousAbilityEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALAutonomousLife) GetAutonomousAbilitiesStatus() ([]AutonomousAbilityStatus, error) {
	var err error
	var ret []AutonomousAbilityStatus
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(147, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getAutonomousAbilitiesStatus failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []AutonomousAbilityStatus, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]AutonomousAbilityStatus, size)
		for i := 0; i < int(size); i++ {
			b[i], err = ReadAutonomousAbilityStatus(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getAutonomousAbilitiesStatus response: %s", err)
	}
	return ret, nil
}
func (p *ALAutonomousLife) StartMonitoringLaunchpadConditions() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(148, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call startMonitoringLaunchpadConditions failed: %s", err)
	}
	return nil
}
func (p *ALAutonomousLife) StopMonitoringLaunchpadConditions() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(149, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call stopMonitoringLaunchpadConditions failed: %s", err)
	}
	return nil
}
func (p *ALAutonomousLife) IsMonitoringLaunchpadConditions() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(150, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isMonitoringLaunchpadConditions failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isMonitoringLaunchpadConditions response: %s", err)
	}
	return ret, nil
}
func (p *ALAutonomousLife) SetLaunchpadPluginEnabled(p0 string, p1 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteBool(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(151, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setLaunchpadPluginEnabled failed: %s", err)
	}
	return nil
}
func (p *ALAutonomousLife) GetEnabledLaunchpadPlugins() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(152, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getEnabledLaunchpadPlugins failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getEnabledLaunchpadPlugins response: %s", err)
	}
	return ret, nil
}
func (p *ALAutonomousLife) GetLaunchpadPluginsForGroup(p0 string) ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(153, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getLaunchpadPluginsForGroup failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getLaunchpadPluginsForGroup response: %s", err)
	}
	return ret, nil
}
func (p *ALAutonomousLife) SetRobotOffsetFromFloor(p0 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(154, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setRobotOffsetFromFloor failed: %s", err)
	}
	return nil
}
func (p *ALAutonomousLife) GetRobotOffsetFromFloor() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(155, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getRobotOffsetFromFloor failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getRobotOffsetFromFloor response: %s", err)
	}
	return ret, nil
}
func (p *ALAutonomousLife) _forbidAutonomousInteractiveStateChange(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(156, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _forbidAutonomousInteractiveStateChange failed: %s", err)
	}
	return nil
}
func (p *ALAutonomousLife) _forbidAutonomousActivityFocusSwitch(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(157, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _forbidAutonomousActivityFocusSwitch failed: %s", err)
	}
	return nil
}
func (p *ALAutonomousLife) SetSafeguardEnabled(p0 string, p1 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteBool(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(158, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setSafeguardEnabled failed: %s", err)
	}
	return nil
}
func (p *ALAutonomousLife) IsSafeguardEnabled(p0 string) (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(159, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isSafeguardEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isSafeguardEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALAutonomousLife) _isMovedSafeguardInstantaneous() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(160, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _isMovedSafeguardInstantaneous failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _isMovedSafeguardInstantaneous response: %s", err)
	}
	return ret, nil
}
func (p *ALAutonomousLife) _sleep() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(163, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _sleep failed: %s", err)
	}
	return nil
}
func (p *ALAutonomousLife) _wakeUp() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(164, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _wakeUp failed: %s", err)
	}
	return nil
}
func (p *ALAutonomousLife) _forbidStopCommands(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(165, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _forbidStopCommands failed: %s", err)
	}
	return nil
}
func (p *ALAutonomousLife) _loadModule(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(166, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _loadModule failed: %s", err)
	}
	return nil
}

type ALDialog struct {
	session.Proxy
}

func NewALDialog(ses session.Session, obj uint32) (*ALDialog, error) {
	proxy, err := ses.Proxy("ALDialog", obj)
	if err != nil {
		return nil, fmt.Errorf("failed to contact service: %s", err)
	}
	return &ALDialog{proxy}, nil
}
func (p *ALDialog) RegisterEvent(p0 uint32, p1 uint32, p2 uint64) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(0, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEvent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEvent response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) UnregisterEvent(p0 uint32, p1 uint32, p2 uint64) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(1, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unregisterEvent failed: %s", err)
	}
	return nil
}
func (p *ALDialog) MetaObject(p0 uint32) (object.MetaObject, error) {
	var err error
	var ret object.MetaObject
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(2, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call metaObject failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = object.ReadMetaObject(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse metaObject response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) Terminate(p0 uint32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(3, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call terminate failed: %s", err)
	}
	return nil
}
func (p *ALDialog) Property(p0 value.Value) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(5, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call property failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse property response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) SetProperty(p0 value.Value, p1 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(6, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setProperty failed: %s", err)
	}
	return nil
}
func (p *ALDialog) Properties() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(7, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call properties failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse properties response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) RegisterEventWithSignature(p0 uint32, p1 uint32, p2 uint64, p3 string) (uint64, error) {
	var err error
	var ret uint64
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteUint32(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteUint32(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteUint64(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	response, err := p.Call(8, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call registerEventWithSignature failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadUint64(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse registerEventWithSignature response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) IsStatsEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(80, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isStatsEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isStatsEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) EnableStats(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(81, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableStats failed: %s", err)
	}
	return nil
}
func (p *ALDialog) Stats() (map[uint32]MethodStatistics, error) {
	var err error
	var ret map[uint32]MethodStatistics
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(82, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call stats failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[uint32]MethodStatistics, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[uint32]MethodStatistics, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadUint32(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := ReadMethodStatistics(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse stats response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) ClearStats() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(83, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearStats failed: %s", err)
	}
	return nil
}
func (p *ALDialog) IsTraceEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(84, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isTraceEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isTraceEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) EnableTrace(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(85, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTrace failed: %s", err)
	}
	return nil
}
func (p *ALDialog) Exit() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(100, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call exit failed: %s", err)
	}
	return nil
}
func (p *ALDialog) Version() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(103, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call version failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse version response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) Ping() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(104, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call ping failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse ping response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) GetMethodList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(105, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodList response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) GetMethodHelp(p0 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(106, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMethodHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMethodHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) GetModuleHelp() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(107, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getModuleHelp failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getModuleHelp response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) GetBrokerName() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(112, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getBrokerName failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getBrokerName response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) GetUsage(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(113, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getUsage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getUsage response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) Subscribe_0(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(115, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call subscribe failed: %s", err)
	}
	return nil
}
func (p *ALDialog) Unsubscribe(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(116, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unsubscribe failed: %s", err)
	}
	return nil
}
func (p *ALDialog) UpdatePrecision(p0 string, p1 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(118, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call updatePrecision failed: %s", err)
	}
	return nil
}
func (p *ALDialog) GetCurrentPrecision() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(120, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getCurrentPrecision failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getCurrentPrecision response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) GetMyPrecision(p0 string) (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(122, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMyPrecision failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMyPrecision response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) GetSubscribersInfo() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(123, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getSubscribersInfo failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getSubscribersInfo response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) GetOutputNames() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(124, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getOutputNames failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getOutputNames response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) GetEventList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(125, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getEventList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getEventList response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) GetMemoryKeyList() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(126, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getMemoryKeyList failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getMemoryKeyList response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) _wordRecognized(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(127, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _wordRecognized failed: %s", err)
	}
	return nil
}
func (p *ALDialog) GetStoppable() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(128, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getStoppable failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getStoppable response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) SetStoppable(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(129, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setStoppable failed: %s", err)
	}
	return nil
}
func (p *ALDialog) RunTopics(p0 []string) ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p0)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p0 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(130, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call runTopics failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse runTopics response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) StopTopics(p0 []string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p0)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p0 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(131, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call stopTopics failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _setPhonetic(p0 string, p1 string, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(132, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setPhonetic failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _pauseEngine(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(133, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _pauseEngine failed: %s", err)
	}
	return nil
}
func (p *ALDialog) Say(p0 string, p1 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(134, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call say failed: %s", err)
	}
	return nil
}
func (p *ALDialog) ResetLanguage() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(135, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call resetLanguage failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _getTriggerFromID(p0 string, p1 string) ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(136, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getTriggerFromID failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getTriggerFromID response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) AddBlockingEvent(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(137, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call addBlockingEvent failed: %s", err)
	}
	return nil
}
func (p *ALDialog) RemoveBlockingEvent(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(138, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call removeBlockingEvent failed: %s", err)
	}
	return nil
}
func (p *ALDialog) EndOfUtteranceCallback() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(140, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call endOfUtteranceCallback failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse endOfUtteranceCallback response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) _releaseEngine() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(141, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _releaseEngine failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _controlEngine(p0 string, p1 string) ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(142, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _controlEngine failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse _controlEngine response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) _hasPreference() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(143, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _hasPreference failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _hasPreference response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) _eventReceived(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(144, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _eventReceived failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _statusChanged(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(145, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _statusChanged failed: %s", err)
	}
	return nil
}
func (p *ALDialog) GotoTag(p0 string, p1 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(146, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call gotoTag failed: %s", err)
	}
	return nil
}
func (p *ALDialog) NoPick(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(147, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call noPick failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _connectionChanged(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(148, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _connectionChanged failed: %s", err)
	}
	return nil
}
func (p *ALDialog) CompileAll() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(149, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call compileAll failed: %s", err)
	}
	return nil
}
func (p *ALDialog) CompileBundle(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(150, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call compileBundle failed: %s", err)
	}
	return nil
}
func (p *ALDialog) CreateContext(p0 string, p1 string, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(151, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call createContext failed: %s", err)
	}
	return nil
}
func (p *ALDialog) LoadTopic(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(152, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call loadTopic failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse loadTopic response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) LoadTopicContent(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(153, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call loadTopicContent failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse loadTopicContent response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) DeactivateTopic(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(154, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call deactivateTopic failed: %s", err)
	}
	return nil
}
func (p *ALDialog) ActivateTopic(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(155, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call activateTopic failed: %s", err)
	}
	return nil
}
func (p *ALDialog) UnloadTopic(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(156, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call unloadTopic failed: %s", err)
	}
	return nil
}
func (p *ALDialog) ForceOutput() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(157, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call forceOutput failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _isRunDialogInstalled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(158, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _isRunDialogInstalled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _isRunDialogInstalled response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) ForceInput(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(159, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call forceInput failed: %s", err)
	}
	return nil
}
func (p *ALDialog) Tell(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(160, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call tell failed: %s", err)
	}
	return nil
}
func (p *ALDialog) SetASRConfidenceThreshold(p0 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(161, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setASRConfidenceThreshold failed: %s", err)
	}
	return nil
}
func (p *ALDialog) GetASRConfidenceThreshold() (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(162, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getASRConfidenceThreshold failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getASRConfidenceThreshold response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) SetConfidenceThreshold(p0 string, p1 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(163, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setConfidenceThreshold failed: %s", err)
	}
	return nil
}
func (p *ALDialog) SetConfidenceThreshold_0(p0 string, p1 float32, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(164, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setConfidenceThreshold failed: %s", err)
	}
	return nil
}
func (p *ALDialog) GetAllConfidenceThresholds() (map[string]map[string]float32, error) {
	var err error
	var ret map[string]map[string]float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(165, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getAllConfidenceThresholds failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[string]map[string]float32, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[string]map[string]float32, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadString(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := func() (m map[string]float32, err error) {
				size, err := basic.ReadUint32(buf)
				if err != nil {
					return m, fmt.Errorf("failed to read map size: %s", err)
				}
				m = make(map[string]float32, size)
				for i := 0; i < int(size); i++ {
					k, err := basic.ReadString(buf)
					if err != nil {
						return m, fmt.Errorf("failed to read map key: %s", err)
					}
					v, err := basic.ReadFloat32(buf)
					if err != nil {
						return m, fmt.Errorf("failed to read map value: %s", err)
					}
					m[k] = v
				}
				return m, nil
			}()
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getAllConfidenceThresholds response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) GetConfidenceThreshold(p0 string, p1 string) (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(166, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getConfidenceThreshold failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getConfidenceThreshold response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) RemoveAllLanguageThresholds() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(167, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call removeAllLanguageThresholds failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _setConfidence(p0 string, p1 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteFloat32(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(168, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setConfidence failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _getConfidence(p0 string) (float32, error) {
	var err error
	var ret float32
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(169, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getConfidence failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadFloat32(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getConfidence response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) _getBackend() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(171, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getBackend failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getBackend response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) _openTestSession(p0 string, p1 string, p2 bool, p3 bool, p4 string, p5 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteBool(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteBool(p3, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p3: %s", err)
	}
	if err = basic.WriteString(p4, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p4: %s", err)
	}
	if err = basic.WriteString(p5, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p5: %s", err)
	}
	response, err := p.Call(172, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _openTestSession failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _openTestSession response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) _closeTestSession() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(173, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _closeTestSession failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _runTotTest(p0 string) ([]map[string]string, error) {
	var err error
	var ret []map[string]string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(174, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _runTotTest failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []map[string]string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]map[string]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = func() (m map[string]string, err error) {
				size, err := basic.ReadUint32(buf)
				if err != nil {
					return m, fmt.Errorf("failed to read map size: %s", err)
				}
				m = make(map[string]string, size)
				for i := 0; i < int(size); i++ {
					k, err := basic.ReadString(buf)
					if err != nil {
						return m, fmt.Errorf("failed to read map key: %s", err)
					}
					v, err := basic.ReadString(buf)
					if err != nil {
						return m, fmt.Errorf("failed to read map value: %s", err)
					}
					m[k] = v
				}
				return m, nil
			}()
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse _runTotTest response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) _runTotTest_0(p0 string, p1 string) ([]map[string]string, error) {
	var err error
	var ret []map[string]string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(175, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _runTotTest failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []map[string]string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]map[string]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = func() (m map[string]string, err error) {
				size, err := basic.ReadUint32(buf)
				if err != nil {
					return m, fmt.Errorf("failed to read map size: %s", err)
				}
				m = make(map[string]string, size)
				for i := 0; i < int(size); i++ {
					k, err := basic.ReadString(buf)
					if err != nil {
						return m, fmt.Errorf("failed to read map key: %s", err)
					}
					v, err := basic.ReadString(buf)
					if err != nil {
						return m, fmt.Errorf("failed to read map value: %s", err)
					}
					m[k] = v
				}
				return m, nil
			}()
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse _runTotTest response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) _runTotTest_1(p0 string, p1 string, p2 string) ([]map[string]string, error) {
	var err error
	var ret []map[string]string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(176, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _runTotTest failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []map[string]string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]map[string]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = func() (m map[string]string, err error) {
				size, err := basic.ReadUint32(buf)
				if err != nil {
					return m, fmt.Errorf("failed to read map size: %s", err)
				}
				m = make(map[string]string, size)
				for i := 0; i < int(size); i++ {
					k, err := basic.ReadString(buf)
					if err != nil {
						return m, fmt.Errorf("failed to read map key: %s", err)
					}
					v, err := basic.ReadString(buf)
					if err != nil {
						return m, fmt.Errorf("failed to read map value: %s", err)
					}
					m[k] = v
				}
				return m, nil
			}()
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse _runTotTest response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) CloseSession() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(177, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call closeSession failed: %s", err)
	}
	return nil
}
func (p *ALDialog) CloseTestSession() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(178, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call closeTestSession failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _generateBNF(p0 string, p1 string, p2 string, p3 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return fmt.Errorf("failed to serialize p3: %s", err)
	}
	_, err = p.Call(179, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _generateBNF failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _generatePOT(p0 string, p1 []string, p2 string, p3 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p1)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p1 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteString(p3, buf); err != nil {
		return fmt.Errorf("failed to serialize p3: %s", err)
	}
	_, err = p.Call(180, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _generatePOT failed: %s", err)
	}
	return nil
}
func (p *ALDialog) SetConcept(p0 string, p1 string, p2 []string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p2)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p2 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(183, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setConcept failed: %s", err)
	}
	return nil
}
func (p *ALDialog) SetConcept_0(p0 string, p1 string, p2 []string, p3 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p2)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p2 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = basic.WriteBool(p3, buf); err != nil {
		return fmt.Errorf("failed to serialize p3: %s", err)
	}
	_, err = p.Call(184, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setConcept failed: %s", err)
	}
	return nil
}
func (p *ALDialog) SetConceptKeepInCache(p0 string, p1 string, p2 []string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p2)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p2 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(185, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setConceptKeepInCache failed: %s", err)
	}
	return nil
}
func (p *ALDialog) AddToConcept(p0 string, p1 string, p2 []string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p2)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p2 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(186, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call addToConcept failed: %s", err)
	}
	return nil
}
func (p *ALDialog) GetConcept(p0 string, p1 string) ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(187, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getConcept failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getConcept response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) EnableTriggerSentences(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(189, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableTriggerSentences failed: %s", err)
	}
	return nil
}
func (p *ALDialog) EnableCategory(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(190, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableCategory failed: %s", err)
	}
	return nil
}
func (p *ALDialog) StartPush() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(191, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call startPush failed: %s", err)
	}
	return nil
}
func (p *ALDialog) StopPush() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(192, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call stopPush failed: %s", err)
	}
	return nil
}
func (p *ALDialog) SetAnimatedSpeechConfiguration(p0 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = p0.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(193, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setAnimatedSpeechConfiguration failed: %s", err)
	}
	return nil
}
func (p *ALDialog) GetAnimatedSpeechConfiguration() (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(194, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getAnimatedSpeechConfiguration failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getAnimatedSpeechConfiguration response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) ApplicationBlackList(p0 []string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p0)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p0 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(195, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call applicationBlackList failed: %s", err)
	}
	return nil
}
func (p *ALDialog) IsContentNeedsUpdate() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(196, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isContentNeedsUpdate failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isContentNeedsUpdate response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) _addDialogFromTopicBox(p0 string, p1 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(197, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _addDialogFromTopicBox failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _addDialogFromTopicBox response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) _cleanEventStack() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(198, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _cleanEventStack failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _updateAIClient(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(199, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _updateAIClient failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _addTopicsInGroup(p0 string, p1 []string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p1)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p1 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(200, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _addTopicsInGroup failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _activateGroup(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(201, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _activateGroup failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _deactivateGroup(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(202, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _deactivateGroup failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _preloadMain() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(205, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _preloadMain failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _mainLanguage(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(206, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _mainLanguage failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _runMainNoActivation() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(207, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _runMainNoActivation failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _runMain() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(208, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _runMain failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _startDialog(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(209, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _startDialog failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _setEngagementMode(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(210, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setEngagementMode failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _pause(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(211, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _pause failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _endPause() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(212, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _endPause failed: %s", err)
	}
	return nil
}
func (p *ALDialog) RunDialog() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(213, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call runDialog failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _resetPreload() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(214, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _resetPreload failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _stopMain() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(215, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _stopMain failed: %s", err)
	}
	return nil
}
func (p *ALDialog) StopDialog() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(216, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call stopDialog failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _loadStrategyConfiguration(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(217, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _loadStrategyConfiguration failed: %s", err)
	}
	return nil
}
func (p *ALDialog) SetVariablePath(p0 string, p1 string, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(218, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setVariablePath failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _registerIO(p0 string, p1 string, p2 []string, p3 []string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p2)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p2 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = func() error {
		err := basic.WriteUint32(uint32(len(p3)), buf)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range p3 {
			err = basic.WriteString(v, buf)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to serialize p3: %s", err)
	}
	_, err = p.Call(219, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _registerIO failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _unregisterIO(p0 string, p1 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(220, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _unregisterIO failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _messageIn(p0 string, p1 string, p2 string, p3 value.Value) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	if err = p3.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p3: %s", err)
	}
	_, err = p.Call(221, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _messageIn failed: %s", err)
	}
	return nil
}
func (p *ALDialog) SetLanguage(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(222, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setLanguage failed: %s", err)
	}
	return nil
}
func (p *ALDialog) GetLanguage() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(223, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getLanguage failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getLanguage response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) _startUpdate(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(224, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _startUpdate failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _startApp(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(225, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _startApp failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _packageInstalled(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(226, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _packageInstalled failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _packageRemoved(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(227, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _packageRemoved failed: %s", err)
	}
	return nil
}
func (p *ALDialog) DialogAnswered(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(228, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call dialogAnswered failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _compilationFinished(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(229, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _compilationFinished failed: %s", err)
	}
	return nil
}
func (p *ALDialog) SetFocus(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(230, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call setFocus failed: %s", err)
	}
	return nil
}
func (p *ALDialog) GetFocus() (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(231, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getFocus failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse getFocus response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) GotoTopic(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(232, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call gotoTopic failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _enableOneBNFActivated(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(233, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _enableOneBNFActivated failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _enableAISystem(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(234, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _enableAISystem failed: %s", err)
	}
	return nil
}
func (p *ALDialog) AddFallback(p0 string, p1 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(235, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call addFallback failed: %s", err)
	}
	return nil
}
func (p *ALDialog) RemoveFallback(p0 string, p1 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(236, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call removeFallback failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _loadPrecompiledFile(p0 string, p1 string, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(237, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _loadPrecompiledFile failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _loadSLM(p0 string, p1 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(238, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _loadSLM failed: %s", err)
	}
	return nil
}
func (p *ALDialog) GetLoadedTopics(p0 string) ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(239, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getLoadedTopics failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getLoadedTopics response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) GetAllLoadedTopics() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(240, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getAllLoadedTopics failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getAllLoadedTopics response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) GetActivatedTopics() ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(241, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getActivatedTopics failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getActivatedTopics response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) _setBehaviorEvent(p0 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(242, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setBehaviorEvent failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _fastModelActivation(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(243, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _fastModelActivation failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _byPassFastApproximateMatching(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(244, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _byPassFastApproximateMatching failed: %s", err)
	}
	return nil
}
func (p *ALDialog) ActivateTag(p0 string, p1 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(245, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call activateTag failed: %s", err)
	}
	return nil
}
func (p *ALDialog) DeactivateTag(p0 string, p1 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(246, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call deactivateTag failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _fallback(p0 string, p1 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	response, err := p.Call(247, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _fallback failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _fallback response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) ResetAll() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(248, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call resetAll failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _setSynchronicity(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(249, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setSynchronicity failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _getSynchronicity() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(250, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _getSynchronicity failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _getSynchronicity response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) _magicGet(p0 string) ([]string, error) {
	var err error
	var ret []string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(252, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _magicGet failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(buf)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse _magicGet response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) ClearConcepts() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(257, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call clearConcepts failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _speechDetected() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(258, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _speechDetected failed: %s", err)
	}
	return nil
}
func (p *ALDialog) EnableSendingLogToCloud(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(259, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableSendingLogToCloud failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _encryptLog(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(260, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _encryptLog failed: %s", err)
	}
	return nil
}
func (p *ALDialog) IsSendingLogToCloud() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(261, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call isSendingLogToCloud failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse isSendingLogToCloud response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) _isEncryptingLog() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(262, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _isEncryptingLog failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _isEncryptingLog response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) EnableLogAudio(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(263, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableLogAudio failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _setDeletionCost(p0 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(264, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setDeletionCost failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _setInsertionCost(p0 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(265, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setInsertionCost failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _setSubstitutionCost(p0 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(266, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setSubstitutionCost failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _setStarCost(p0 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(267, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setStarCost failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _setApproximateMatchingThreshold(p0 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(268, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setApproximateMatchingThreshold failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _useAcrobaticMatching(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(269, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _useAcrobaticMatching failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _enableStatisticalMatching(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(270, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _enableStatisticalMatching failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _enablePhoneticMatching(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(271, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _enablePhoneticMatching failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _setSemanticModel(p0 string, p1 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	_, err = p.Call(272, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setSemanticModel failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _isOnePassEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(273, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _isOnePassEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _isOnePassEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) _setSLMUpperThreshold(p0 float32) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteFloat32(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(274, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setSLMUpperThreshold failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _enableSerialization(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(275, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _enableSerialization failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _deleteSerializationFiles() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(276, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _deleteSerializationFiles failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _cleanPhonetic() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(277, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _cleanPhonetic failed: %s", err)
	}
	return nil
}
func (p *ALDialog) Mute(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(278, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call mute failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _copyInputConcepts(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(279, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _copyInputConcepts failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _copyOutputConcepts(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(280, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _copyOutputConcepts failed: %s", err)
	}
	return nil
}
func (p *ALDialog) GenerateSentences(p0 string, p1 string, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(281, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call generateSentences failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _onUserSessionFocused(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(284, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _onUserSessionFocused failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _onUserDeleted(p0 string, p1 value.Value, p2 string) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = p1.Write(buf); err != nil {
		return fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return fmt.Errorf("failed to serialize p2: %s", err)
	}
	_, err = p.Call(285, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _onUserDeleted failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _us_getUserData(p0 string, p1 string, p2 string) (value.Value, error) {
	var err error
	var ret value.Value
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	if err = basic.WriteString(p1, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p1: %s", err)
	}
	if err = basic.WriteString(p2, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p2: %s", err)
	}
	response, err := p.Call(286, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _us_getUserData failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = value.NewValue(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _us_getUserData response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) _setUserSessionObeyed(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(287, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setUserSessionObeyed failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _isUserSessionObeyed() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(288, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _isUserSessionObeyed failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _isUserSessionObeyed response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) GetLanguageListISOToNU() (map[string]string, error) {
	var err error
	var ret map[string]string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(289, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getLanguageListISOToNU failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[string]string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[string]string, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadString(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := basic.ReadString(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getLanguageListISOToNU response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) GetLanguageListNUToISO() (map[string]string, error) {
	var err error
	var ret map[string]string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(290, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getLanguageListNUToISO failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[string]string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[string]string, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadString(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := basic.ReadString(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getLanguageListNUToISO response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) GetLanguageListLongToNU() (map[string]string, error) {
	var err error
	var ret map[string]string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(291, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getLanguageListLongToNU failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[string]string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[string]string, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadString(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := basic.ReadString(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getLanguageListLongToNU response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) GetLanguageListNUToLong() (map[string]string, error) {
	var err error
	var ret map[string]string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(292, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call getLanguageListNUToLong failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = func() (m map[string]string, err error) {
		size, err := basic.ReadUint32(buf)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[string]string, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadString(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := basic.ReadString(buf)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}()
	if err != nil {
		return ret, fmt.Errorf("failed to parse getLanguageListNUToLong response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) ConvertNUToLong(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(293, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call convertNUToLong failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse convertNUToLong response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) ConvertLongToNU(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(294, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call convertLongToNU failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse convertLongToNU response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) ConvertISOToNU(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(295, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call convertISOToNU failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse convertISOToNU response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) ConvertNUToISO(p0 string) (string, error) {
	var err error
	var ret string
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteString(p0, buf); err != nil {
		return ret, fmt.Errorf("failed to serialize p0: %s", err)
	}
	response, err := p.Call(296, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call convertNUToISO failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadString(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse convertNUToISO response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) EnableSimulatedApps(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(297, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call enableSimulatedApps failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _setMachineLearningEnable(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(298, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setMachineLearningEnable failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _isMachineLearningEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(299, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _isMachineLearningEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _isMachineLearningEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) _clearLastMisunderstood() error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	_, err = p.Call(300, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _clearLastMisunderstood failed: %s", err)
	}
	return nil
}
func (p *ALDialog) _isLastMisunderstoodEnabled() (bool, error) {
	var err error
	var ret bool
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	response, err := p.Call(301, buf.Bytes())
	if err != nil {
		return ret, fmt.Errorf("call _isLastMisunderstoodEnabled failed: %s", err)
	}
	buf = bytes.NewBuffer(response)
	ret, err = basic.ReadBool(buf)
	if err != nil {
		return ret, fmt.Errorf("failed to parse _isLastMisunderstoodEnabled response: %s", err)
	}
	return ret, nil
}
func (p *ALDialog) _setLastMisunderstoodEnable(p0 bool) error {
	var err error
	var buf *bytes.Buffer
	buf = bytes.NewBuffer(make([]byte, 0))
	if err = basic.WriteBool(p0, buf); err != nil {
		return fmt.Errorf("failed to serialize p0: %s", err)
	}
	_, err = p.Call(302, buf.Bytes())
	if err != nil {
		return fmt.Errorf("call _setLastMisunderstoodEnable failed: %s", err)
	}
	return nil
}

type MinMaxSum struct {
	MinValue       float32
	MaxValue       float32
	CumulatedValue float32
}

func ReadMinMaxSum(r io.Reader) (s MinMaxSum, err error) {
	if s.MinValue, err = basic.ReadFloat32(r); err != nil {
		return s, fmt.Errorf("failed to read MinValue field: %s", err)
	}
	if s.MaxValue, err = basic.ReadFloat32(r); err != nil {
		return s, fmt.Errorf("failed to read MaxValue field: %s", err)
	}
	if s.CumulatedValue, err = basic.ReadFloat32(r); err != nil {
		return s, fmt.Errorf("failed to read CumulatedValue field: %s", err)
	}
	return s, nil
}
func WriteMinMaxSum(s MinMaxSum, w io.Writer) (err error) {
	if err := basic.WriteFloat32(s.MinValue, w); err != nil {
		return fmt.Errorf("failed to write MinValue field: %s", err)
	}
	if err := basic.WriteFloat32(s.MaxValue, w); err != nil {
		return fmt.Errorf("failed to write MaxValue field: %s", err)
	}
	if err := basic.WriteFloat32(s.CumulatedValue, w); err != nil {
		return fmt.Errorf("failed to write CumulatedValue field: %s", err)
	}
	return nil
}

type MethodStatistics struct {
	Count  uint32
	Wall   MinMaxSum
	User   MinMaxSum
	System MinMaxSum
}

func ReadMethodStatistics(r io.Reader) (s MethodStatistics, err error) {
	if s.Count, err = basic.ReadUint32(r); err != nil {
		return s, fmt.Errorf("failed to read Count field: %s", err)
	}
	if s.Wall, err = ReadMinMaxSum(r); err != nil {
		return s, fmt.Errorf("failed to read Wall field: %s", err)
	}
	if s.User, err = ReadMinMaxSum(r); err != nil {
		return s, fmt.Errorf("failed to read User field: %s", err)
	}
	if s.System, err = ReadMinMaxSum(r); err != nil {
		return s, fmt.Errorf("failed to read System field: %s", err)
	}
	return s, nil
}
func WriteMethodStatistics(s MethodStatistics, w io.Writer) (err error) {
	if err := basic.WriteUint32(s.Count, w); err != nil {
		return fmt.Errorf("failed to write Count field: %s", err)
	}
	if err := WriteMinMaxSum(s.Wall, w); err != nil {
		return fmt.Errorf("failed to write Wall field: %s", err)
	}
	if err := WriteMinMaxSum(s.User, w); err != nil {
		return fmt.Errorf("failed to write User field: %s", err)
	}
	if err := WriteMinMaxSum(s.System, w); err != nil {
		return fmt.Errorf("failed to write System field: %s", err)
	}
	return nil
}

type ServiceInfo struct {
	Name      string
	ServiceId uint32
	MachineId string
	ProcessId uint32
	Endpoints []string
	SessionId string
}

func ReadServiceInfo(r io.Reader) (s ServiceInfo, err error) {
	if s.Name, err = basic.ReadString(r); err != nil {
		return s, fmt.Errorf("failed to read Name field: %s", err)
	}
	if s.ServiceId, err = basic.ReadUint32(r); err != nil {
		return s, fmt.Errorf("failed to read ServiceId field: %s", err)
	}
	if s.MachineId, err = basic.ReadString(r); err != nil {
		return s, fmt.Errorf("failed to read MachineId field: %s", err)
	}
	if s.ProcessId, err = basic.ReadUint32(r); err != nil {
		return s, fmt.Errorf("failed to read ProcessId field: %s", err)
	}
	if s.Endpoints, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(r)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(r)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}(); err != nil {
		return s, fmt.Errorf("failed to read Endpoints field: %s", err)
	}
	if s.SessionId, err = basic.ReadString(r); err != nil {
		return s, fmt.Errorf("failed to read SessionId field: %s", err)
	}
	return s, nil
}
func WriteServiceInfo(s ServiceInfo, w io.Writer) (err error) {
	if err := basic.WriteString(s.Name, w); err != nil {
		return fmt.Errorf("failed to write Name field: %s", err)
	}
	if err := basic.WriteUint32(s.ServiceId, w); err != nil {
		return fmt.Errorf("failed to write ServiceId field: %s", err)
	}
	if err := basic.WriteString(s.MachineId, w); err != nil {
		return fmt.Errorf("failed to write MachineId field: %s", err)
	}
	if err := basic.WriteUint32(s.ProcessId, w); err != nil {
		return fmt.Errorf("failed to write ProcessId field: %s", err)
	}
	if err := func() error {
		err := basic.WriteUint32(uint32(len(s.Endpoints)), w)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range s.Endpoints {
			err = basic.WriteString(v, w)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to write Endpoints field: %s", err)
	}
	if err := basic.WriteString(s.SessionId, w); err != nil {
		return fmt.Errorf("failed to write SessionId field: %s", err)
	}
	return nil
}

type PackageInfo2 struct {
	Uuid         string
	Version      string
	Author       string
	Channel      string
	Organization string
	Date         string
	TypeVersion  string
	Installer    string
	Path         string
	Elems        map[string]value.Value
}

func ReadPackageInfo2(r io.Reader) (s PackageInfo2, err error) {
	if s.Uuid, err = basic.ReadString(r); err != nil {
		return s, fmt.Errorf("failed to read Uuid field: %s", err)
	}
	if s.Version, err = basic.ReadString(r); err != nil {
		return s, fmt.Errorf("failed to read Version field: %s", err)
	}
	if s.Author, err = basic.ReadString(r); err != nil {
		return s, fmt.Errorf("failed to read Author field: %s", err)
	}
	if s.Channel, err = basic.ReadString(r); err != nil {
		return s, fmt.Errorf("failed to read Channel field: %s", err)
	}
	if s.Organization, err = basic.ReadString(r); err != nil {
		return s, fmt.Errorf("failed to read Organization field: %s", err)
	}
	if s.Date, err = basic.ReadString(r); err != nil {
		return s, fmt.Errorf("failed to read Date field: %s", err)
	}
	if s.TypeVersion, err = basic.ReadString(r); err != nil {
		return s, fmt.Errorf("failed to read TypeVersion field: %s", err)
	}
	if s.Installer, err = basic.ReadString(r); err != nil {
		return s, fmt.Errorf("failed to read Installer field: %s", err)
	}
	if s.Path, err = basic.ReadString(r); err != nil {
		return s, fmt.Errorf("failed to read Path field: %s", err)
	}
	if s.Elems, err = func() (m map[string]value.Value, err error) {
		size, err := basic.ReadUint32(r)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[string]value.Value, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadString(r)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := value.NewValue(r)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}(); err != nil {
		return s, fmt.Errorf("failed to read Elems field: %s", err)
	}
	return s, nil
}
func WritePackageInfo2(s PackageInfo2, w io.Writer) (err error) {
	if err := basic.WriteString(s.Uuid, w); err != nil {
		return fmt.Errorf("failed to write Uuid field: %s", err)
	}
	if err := basic.WriteString(s.Version, w); err != nil {
		return fmt.Errorf("failed to write Version field: %s", err)
	}
	if err := basic.WriteString(s.Author, w); err != nil {
		return fmt.Errorf("failed to write Author field: %s", err)
	}
	if err := basic.WriteString(s.Channel, w); err != nil {
		return fmt.Errorf("failed to write Channel field: %s", err)
	}
	if err := basic.WriteString(s.Organization, w); err != nil {
		return fmt.Errorf("failed to write Organization field: %s", err)
	}
	if err := basic.WriteString(s.Date, w); err != nil {
		return fmt.Errorf("failed to write Date field: %s", err)
	}
	if err := basic.WriteString(s.TypeVersion, w); err != nil {
		return fmt.Errorf("failed to write TypeVersion field: %s", err)
	}
	if err := basic.WriteString(s.Installer, w); err != nil {
		return fmt.Errorf("failed to write Installer field: %s", err)
	}
	if err := basic.WriteString(s.Path, w); err != nil {
		return fmt.Errorf("failed to write Path field: %s", err)
	}
	if err := func() error {
		err := basic.WriteUint32(uint32(len(s.Elems)), w)
		if err != nil {
			return fmt.Errorf("failed to write map size: %s", err)
		}
		for k, v := range s.Elems {
			err = basic.WriteString(k, w)
			if err != nil {
				return fmt.Errorf("failed to write map key: %s", err)
			}
			err = v.Write(w)
			if err != nil {
				return fmt.Errorf("failed to write map value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to write Elems field: %s", err)
	}
	return nil
}

type BehaviorInfo struct {
	Path                   string
	Nature                 string
	LangToName             map[string]string
	LangToDesc             map[string]string
	Categories             string
	LangToTags             map[string][]string
	LangToTriggerSentences map[string][]string
	LangToLoadingResponses map[string][]string
	PurposeToCondition     map[string][]string
	Permissions            []string
	UserRequestable        bool
}

func ReadBehaviorInfo(r io.Reader) (s BehaviorInfo, err error) {
	if s.Path, err = basic.ReadString(r); err != nil {
		return s, fmt.Errorf("failed to read Path field: %s", err)
	}
	if s.Nature, err = basic.ReadString(r); err != nil {
		return s, fmt.Errorf("failed to read Nature field: %s", err)
	}
	if s.LangToName, err = func() (m map[string]string, err error) {
		size, err := basic.ReadUint32(r)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[string]string, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadString(r)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := basic.ReadString(r)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}(); err != nil {
		return s, fmt.Errorf("failed to read LangToName field: %s", err)
	}
	if s.LangToDesc, err = func() (m map[string]string, err error) {
		size, err := basic.ReadUint32(r)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[string]string, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadString(r)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := basic.ReadString(r)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}(); err != nil {
		return s, fmt.Errorf("failed to read LangToDesc field: %s", err)
	}
	if s.Categories, err = basic.ReadString(r); err != nil {
		return s, fmt.Errorf("failed to read Categories field: %s", err)
	}
	if s.LangToTags, err = func() (m map[string][]string, err error) {
		size, err := basic.ReadUint32(r)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[string][]string, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadString(r)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := func() (b []string, err error) {
				size, err := basic.ReadUint32(r)
				if err != nil {
					return b, fmt.Errorf("failed to read slice size: %s", err)
				}
				b = make([]string, size)
				for i := 0; i < int(size); i++ {
					b[i], err = basic.ReadString(r)
					if err != nil {
						return b, fmt.Errorf("failed to read slice value: %s", err)
					}
				}
				return b, nil
			}()
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}(); err != nil {
		return s, fmt.Errorf("failed to read LangToTags field: %s", err)
	}
	if s.LangToTriggerSentences, err = func() (m map[string][]string, err error) {
		size, err := basic.ReadUint32(r)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[string][]string, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadString(r)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := func() (b []string, err error) {
				size, err := basic.ReadUint32(r)
				if err != nil {
					return b, fmt.Errorf("failed to read slice size: %s", err)
				}
				b = make([]string, size)
				for i := 0; i < int(size); i++ {
					b[i], err = basic.ReadString(r)
					if err != nil {
						return b, fmt.Errorf("failed to read slice value: %s", err)
					}
				}
				return b, nil
			}()
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}(); err != nil {
		return s, fmt.Errorf("failed to read LangToTriggerSentences field: %s", err)
	}
	if s.LangToLoadingResponses, err = func() (m map[string][]string, err error) {
		size, err := basic.ReadUint32(r)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[string][]string, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadString(r)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := func() (b []string, err error) {
				size, err := basic.ReadUint32(r)
				if err != nil {
					return b, fmt.Errorf("failed to read slice size: %s", err)
				}
				b = make([]string, size)
				for i := 0; i < int(size); i++ {
					b[i], err = basic.ReadString(r)
					if err != nil {
						return b, fmt.Errorf("failed to read slice value: %s", err)
					}
				}
				return b, nil
			}()
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}(); err != nil {
		return s, fmt.Errorf("failed to read LangToLoadingResponses field: %s", err)
	}
	if s.PurposeToCondition, err = func() (m map[string][]string, err error) {
		size, err := basic.ReadUint32(r)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[string][]string, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadString(r)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := func() (b []string, err error) {
				size, err := basic.ReadUint32(r)
				if err != nil {
					return b, fmt.Errorf("failed to read slice size: %s", err)
				}
				b = make([]string, size)
				for i := 0; i < int(size); i++ {
					b[i], err = basic.ReadString(r)
					if err != nil {
						return b, fmt.Errorf("failed to read slice value: %s", err)
					}
				}
				return b, nil
			}()
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}(); err != nil {
		return s, fmt.Errorf("failed to read PurposeToCondition field: %s", err)
	}
	if s.Permissions, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(r)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(r)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}(); err != nil {
		return s, fmt.Errorf("failed to read Permissions field: %s", err)
	}
	if s.UserRequestable, err = basic.ReadBool(r); err != nil {
		return s, fmt.Errorf("failed to read UserRequestable field: %s", err)
	}
	return s, nil
}
func WriteBehaviorInfo(s BehaviorInfo, w io.Writer) (err error) {
	if err := basic.WriteString(s.Path, w); err != nil {
		return fmt.Errorf("failed to write Path field: %s", err)
	}
	if err := basic.WriteString(s.Nature, w); err != nil {
		return fmt.Errorf("failed to write Nature field: %s", err)
	}
	if err := func() error {
		err := basic.WriteUint32(uint32(len(s.LangToName)), w)
		if err != nil {
			return fmt.Errorf("failed to write map size: %s", err)
		}
		for k, v := range s.LangToName {
			err = basic.WriteString(k, w)
			if err != nil {
				return fmt.Errorf("failed to write map key: %s", err)
			}
			err = basic.WriteString(v, w)
			if err != nil {
				return fmt.Errorf("failed to write map value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to write LangToName field: %s", err)
	}
	if err := func() error {
		err := basic.WriteUint32(uint32(len(s.LangToDesc)), w)
		if err != nil {
			return fmt.Errorf("failed to write map size: %s", err)
		}
		for k, v := range s.LangToDesc {
			err = basic.WriteString(k, w)
			if err != nil {
				return fmt.Errorf("failed to write map key: %s", err)
			}
			err = basic.WriteString(v, w)
			if err != nil {
				return fmt.Errorf("failed to write map value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to write LangToDesc field: %s", err)
	}
	if err := basic.WriteString(s.Categories, w); err != nil {
		return fmt.Errorf("failed to write Categories field: %s", err)
	}
	if err := func() error {
		err := basic.WriteUint32(uint32(len(s.LangToTags)), w)
		if err != nil {
			return fmt.Errorf("failed to write map size: %s", err)
		}
		for k, v := range s.LangToTags {
			err = basic.WriteString(k, w)
			if err != nil {
				return fmt.Errorf("failed to write map key: %s", err)
			}
			err = func() error {
				err := basic.WriteUint32(uint32(len(v)), w)
				if err != nil {
					return fmt.Errorf("failed to write slice size: %s", err)
				}
				for _, v := range v {
					err = basic.WriteString(v, w)
					if err != nil {
						return fmt.Errorf("failed to write slice value: %s", err)
					}
				}
				return nil
			}()
			if err != nil {
				return fmt.Errorf("failed to write map value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to write LangToTags field: %s", err)
	}
	if err := func() error {
		err := basic.WriteUint32(uint32(len(s.LangToTriggerSentences)), w)
		if err != nil {
			return fmt.Errorf("failed to write map size: %s", err)
		}
		for k, v := range s.LangToTriggerSentences {
			err = basic.WriteString(k, w)
			if err != nil {
				return fmt.Errorf("failed to write map key: %s", err)
			}
			err = func() error {
				err := basic.WriteUint32(uint32(len(v)), w)
				if err != nil {
					return fmt.Errorf("failed to write slice size: %s", err)
				}
				for _, v := range v {
					err = basic.WriteString(v, w)
					if err != nil {
						return fmt.Errorf("failed to write slice value: %s", err)
					}
				}
				return nil
			}()
			if err != nil {
				return fmt.Errorf("failed to write map value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to write LangToTriggerSentences field: %s", err)
	}
	if err := func() error {
		err := basic.WriteUint32(uint32(len(s.LangToLoadingResponses)), w)
		if err != nil {
			return fmt.Errorf("failed to write map size: %s", err)
		}
		for k, v := range s.LangToLoadingResponses {
			err = basic.WriteString(k, w)
			if err != nil {
				return fmt.Errorf("failed to write map key: %s", err)
			}
			err = func() error {
				err := basic.WriteUint32(uint32(len(v)), w)
				if err != nil {
					return fmt.Errorf("failed to write slice size: %s", err)
				}
				for _, v := range v {
					err = basic.WriteString(v, w)
					if err != nil {
						return fmt.Errorf("failed to write slice value: %s", err)
					}
				}
				return nil
			}()
			if err != nil {
				return fmt.Errorf("failed to write map value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to write LangToLoadingResponses field: %s", err)
	}
	if err := func() error {
		err := basic.WriteUint32(uint32(len(s.PurposeToCondition)), w)
		if err != nil {
			return fmt.Errorf("failed to write map size: %s", err)
		}
		for k, v := range s.PurposeToCondition {
			err = basic.WriteString(k, w)
			if err != nil {
				return fmt.Errorf("failed to write map key: %s", err)
			}
			err = func() error {
				err := basic.WriteUint32(uint32(len(v)), w)
				if err != nil {
					return fmt.Errorf("failed to write slice size: %s", err)
				}
				for _, v := range v {
					err = basic.WriteString(v, w)
					if err != nil {
						return fmt.Errorf("failed to write slice value: %s", err)
					}
				}
				return nil
			}()
			if err != nil {
				return fmt.Errorf("failed to write map value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to write PurposeToCondition field: %s", err)
	}
	if err := func() error {
		err := basic.WriteUint32(uint32(len(s.Permissions)), w)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range s.Permissions {
			err = basic.WriteString(v, w)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to write Permissions field: %s", err)
	}
	if err := basic.WriteBool(s.UserRequestable, w); err != nil {
		return fmt.Errorf("failed to write UserRequestable field: %s", err)
	}
	return nil
}

type LanguageInfo struct {
	Path          string
	EngineName    string
	EngineVersion string
	Locale        string
	LangToName    map[string]string
}

func ReadLanguageInfo(r io.Reader) (s LanguageInfo, err error) {
	if s.Path, err = basic.ReadString(r); err != nil {
		return s, fmt.Errorf("failed to read Path field: %s", err)
	}
	if s.EngineName, err = basic.ReadString(r); err != nil {
		return s, fmt.Errorf("failed to read EngineName field: %s", err)
	}
	if s.EngineVersion, err = basic.ReadString(r); err != nil {
		return s, fmt.Errorf("failed to read EngineVersion field: %s", err)
	}
	if s.Locale, err = basic.ReadString(r); err != nil {
		return s, fmt.Errorf("failed to read Locale field: %s", err)
	}
	if s.LangToName, err = func() (m map[string]string, err error) {
		size, err := basic.ReadUint32(r)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[string]string, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadString(r)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := basic.ReadString(r)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}(); err != nil {
		return s, fmt.Errorf("failed to read LangToName field: %s", err)
	}
	return s, nil
}
func WriteLanguageInfo(s LanguageInfo, w io.Writer) (err error) {
	if err := basic.WriteString(s.Path, w); err != nil {
		return fmt.Errorf("failed to write Path field: %s", err)
	}
	if err := basic.WriteString(s.EngineName, w); err != nil {
		return fmt.Errorf("failed to write EngineName field: %s", err)
	}
	if err := basic.WriteString(s.EngineVersion, w); err != nil {
		return fmt.Errorf("failed to write EngineVersion field: %s", err)
	}
	if err := basic.WriteString(s.Locale, w); err != nil {
		return fmt.Errorf("failed to write Locale field: %s", err)
	}
	if err := func() error {
		err := basic.WriteUint32(uint32(len(s.LangToName)), w)
		if err != nil {
			return fmt.Errorf("failed to write map size: %s", err)
		}
		for k, v := range s.LangToName {
			err = basic.WriteString(k, w)
			if err != nil {
				return fmt.Errorf("failed to write map key: %s", err)
			}
			err = basic.WriteString(v, w)
			if err != nil {
				return fmt.Errorf("failed to write map value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to write LangToName field: %s", err)
	}
	return nil
}

type RobotRequirement struct {
	Model          string
	MinHeadVersion string
	MaxHeadVersion string
	MinBodyVersion string
	MaxBodyVersion string
}

func ReadRobotRequirement(r io.Reader) (s RobotRequirement, err error) {
	if s.Model, err = basic.ReadString(r); err != nil {
		return s, fmt.Errorf("failed to read Model field: %s", err)
	}
	if s.MinHeadVersion, err = basic.ReadString(r); err != nil {
		return s, fmt.Errorf("failed to read MinHeadVersion field: %s", err)
	}
	if s.MaxHeadVersion, err = basic.ReadString(r); err != nil {
		return s, fmt.Errorf("failed to read MaxHeadVersion field: %s", err)
	}
	if s.MinBodyVersion, err = basic.ReadString(r); err != nil {
		return s, fmt.Errorf("failed to read MinBodyVersion field: %s", err)
	}
	if s.MaxBodyVersion, err = basic.ReadString(r); err != nil {
		return s, fmt.Errorf("failed to read MaxBodyVersion field: %s", err)
	}
	return s, nil
}
func WriteRobotRequirement(s RobotRequirement, w io.Writer) (err error) {
	if err := basic.WriteString(s.Model, w); err != nil {
		return fmt.Errorf("failed to write Model field: %s", err)
	}
	if err := basic.WriteString(s.MinHeadVersion, w); err != nil {
		return fmt.Errorf("failed to write MinHeadVersion field: %s", err)
	}
	if err := basic.WriteString(s.MaxHeadVersion, w); err != nil {
		return fmt.Errorf("failed to write MaxHeadVersion field: %s", err)
	}
	if err := basic.WriteString(s.MinBodyVersion, w); err != nil {
		return fmt.Errorf("failed to write MinBodyVersion field: %s", err)
	}
	if err := basic.WriteString(s.MaxBodyVersion, w); err != nil {
		return fmt.Errorf("failed to write MaxBodyVersion field: %s", err)
	}
	return nil
}

type NaoqiRequirement struct {
	MinVersion string
	MaxVersion string
}

func ReadNaoqiRequirement(r io.Reader) (s NaoqiRequirement, err error) {
	if s.MinVersion, err = basic.ReadString(r); err != nil {
		return s, fmt.Errorf("failed to read MinVersion field: %s", err)
	}
	if s.MaxVersion, err = basic.ReadString(r); err != nil {
		return s, fmt.Errorf("failed to read MaxVersion field: %s", err)
	}
	return s, nil
}
func WriteNaoqiRequirement(s NaoqiRequirement, w io.Writer) (err error) {
	if err := basic.WriteString(s.MinVersion, w); err != nil {
		return fmt.Errorf("failed to write MinVersion field: %s", err)
	}
	if err := basic.WriteString(s.MaxVersion, w); err != nil {
		return fmt.Errorf("failed to write MaxVersion field: %s", err)
	}
	return nil
}

type PackageService struct {
	ExecStart string
	Name      string
	AutoRun   bool
}

func ReadPackageService(r io.Reader) (s PackageService, err error) {
	if s.ExecStart, err = basic.ReadString(r); err != nil {
		return s, fmt.Errorf("failed to read ExecStart field: %s", err)
	}
	if s.Name, err = basic.ReadString(r); err != nil {
		return s, fmt.Errorf("failed to read Name field: %s", err)
	}
	if s.AutoRun, err = basic.ReadBool(r); err != nil {
		return s, fmt.Errorf("failed to read AutoRun field: %s", err)
	}
	return s, nil
}
func WritePackageService(s PackageService, w io.Writer) (err error) {
	if err := basic.WriteString(s.ExecStart, w); err != nil {
		return fmt.Errorf("failed to write ExecStart field: %s", err)
	}
	if err := basic.WriteString(s.Name, w); err != nil {
		return fmt.Errorf("failed to write Name field: %s", err)
	}
	if err := basic.WriteBool(s.AutoRun, w); err != nil {
		return fmt.Errorf("failed to write AutoRun field: %s", err)
	}
	return nil
}

type DialogInfo struct {
	TopicName   string
	TypeVersion string
	Topics      map[string]string
}

func ReadDialogInfo(r io.Reader) (s DialogInfo, err error) {
	if s.TopicName, err = basic.ReadString(r); err != nil {
		return s, fmt.Errorf("failed to read TopicName field: %s", err)
	}
	if s.TypeVersion, err = basic.ReadString(r); err != nil {
		return s, fmt.Errorf("failed to read TypeVersion field: %s", err)
	}
	if s.Topics, err = func() (m map[string]string, err error) {
		size, err := basic.ReadUint32(r)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[string]string, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadString(r)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := basic.ReadString(r)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}(); err != nil {
		return s, fmt.Errorf("failed to read Topics field: %s", err)
	}
	return s, nil
}
func WriteDialogInfo(s DialogInfo, w io.Writer) (err error) {
	if err := basic.WriteString(s.TopicName, w); err != nil {
		return fmt.Errorf("failed to write TopicName field: %s", err)
	}
	if err := basic.WriteString(s.TypeVersion, w); err != nil {
		return fmt.Errorf("failed to write TypeVersion field: %s", err)
	}
	if err := func() error {
		err := basic.WriteUint32(uint32(len(s.Topics)), w)
		if err != nil {
			return fmt.Errorf("failed to write map size: %s", err)
		}
		for k, v := range s.Topics {
			err = basic.WriteString(k, w)
			if err != nil {
				return fmt.Errorf("failed to write map key: %s", err)
			}
			err = basic.WriteString(v, w)
			if err != nil {
				return fmt.Errorf("failed to write map value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to write Topics field: %s", err)
	}
	return nil
}

type PackageInfo struct {
	Uuid                 string
	Path                 string
	Version              string
	Channel              string
	Author               string
	Organization         string
	Date                 string
	TypeVersion          string
	LangToName           map[string]string
	LangToDesc           map[string]string
	SupportedLanguages   []string
	Behaviors            []BehaviorInfo
	Languages            []LanguageInfo
	Installer            string
	RobotRequirements    []RobotRequirement
	NaoqiRequirements    []NaoqiRequirement
	Services             []PackageService
	ExecutableFiles      []string
	Dialogs              []DialogInfo
	DescriptionLanguages []string
}

func ReadPackageInfo(r io.Reader) (s PackageInfo, err error) {
	if s.Uuid, err = basic.ReadString(r); err != nil {
		return s, fmt.Errorf("failed to read Uuid field: %s", err)
	}
	if s.Path, err = basic.ReadString(r); err != nil {
		return s, fmt.Errorf("failed to read Path field: %s", err)
	}
	if s.Version, err = basic.ReadString(r); err != nil {
		return s, fmt.Errorf("failed to read Version field: %s", err)
	}
	if s.Channel, err = basic.ReadString(r); err != nil {
		return s, fmt.Errorf("failed to read Channel field: %s", err)
	}
	if s.Author, err = basic.ReadString(r); err != nil {
		return s, fmt.Errorf("failed to read Author field: %s", err)
	}
	if s.Organization, err = basic.ReadString(r); err != nil {
		return s, fmt.Errorf("failed to read Organization field: %s", err)
	}
	if s.Date, err = basic.ReadString(r); err != nil {
		return s, fmt.Errorf("failed to read Date field: %s", err)
	}
	if s.TypeVersion, err = basic.ReadString(r); err != nil {
		return s, fmt.Errorf("failed to read TypeVersion field: %s", err)
	}
	if s.LangToName, err = func() (m map[string]string, err error) {
		size, err := basic.ReadUint32(r)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[string]string, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadString(r)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := basic.ReadString(r)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}(); err != nil {
		return s, fmt.Errorf("failed to read LangToName field: %s", err)
	}
	if s.LangToDesc, err = func() (m map[string]string, err error) {
		size, err := basic.ReadUint32(r)
		if err != nil {
			return m, fmt.Errorf("failed to read map size: %s", err)
		}
		m = make(map[string]string, size)
		for i := 0; i < int(size); i++ {
			k, err := basic.ReadString(r)
			if err != nil {
				return m, fmt.Errorf("failed to read map key: %s", err)
			}
			v, err := basic.ReadString(r)
			if err != nil {
				return m, fmt.Errorf("failed to read map value: %s", err)
			}
			m[k] = v
		}
		return m, nil
	}(); err != nil {
		return s, fmt.Errorf("failed to read LangToDesc field: %s", err)
	}
	if s.SupportedLanguages, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(r)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(r)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}(); err != nil {
		return s, fmt.Errorf("failed to read SupportedLanguages field: %s", err)
	}
	if s.Behaviors, err = func() (b []BehaviorInfo, err error) {
		size, err := basic.ReadUint32(r)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]BehaviorInfo, size)
		for i := 0; i < int(size); i++ {
			b[i], err = ReadBehaviorInfo(r)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}(); err != nil {
		return s, fmt.Errorf("failed to read Behaviors field: %s", err)
	}
	if s.Languages, err = func() (b []LanguageInfo, err error) {
		size, err := basic.ReadUint32(r)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]LanguageInfo, size)
		for i := 0; i < int(size); i++ {
			b[i], err = ReadLanguageInfo(r)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}(); err != nil {
		return s, fmt.Errorf("failed to read Languages field: %s", err)
	}
	if s.Installer, err = basic.ReadString(r); err != nil {
		return s, fmt.Errorf("failed to read Installer field: %s", err)
	}
	if s.RobotRequirements, err = func() (b []RobotRequirement, err error) {
		size, err := basic.ReadUint32(r)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]RobotRequirement, size)
		for i := 0; i < int(size); i++ {
			b[i], err = ReadRobotRequirement(r)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}(); err != nil {
		return s, fmt.Errorf("failed to read RobotRequirements field: %s", err)
	}
	if s.NaoqiRequirements, err = func() (b []NaoqiRequirement, err error) {
		size, err := basic.ReadUint32(r)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]NaoqiRequirement, size)
		for i := 0; i < int(size); i++ {
			b[i], err = ReadNaoqiRequirement(r)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}(); err != nil {
		return s, fmt.Errorf("failed to read NaoqiRequirements field: %s", err)
	}
	if s.Services, err = func() (b []PackageService, err error) {
		size, err := basic.ReadUint32(r)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]PackageService, size)
		for i := 0; i < int(size); i++ {
			b[i], err = ReadPackageService(r)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}(); err != nil {
		return s, fmt.Errorf("failed to read Services field: %s", err)
	}
	if s.ExecutableFiles, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(r)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(r)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}(); err != nil {
		return s, fmt.Errorf("failed to read ExecutableFiles field: %s", err)
	}
	if s.Dialogs, err = func() (b []DialogInfo, err error) {
		size, err := basic.ReadUint32(r)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]DialogInfo, size)
		for i := 0; i < int(size); i++ {
			b[i], err = ReadDialogInfo(r)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}(); err != nil {
		return s, fmt.Errorf("failed to read Dialogs field: %s", err)
	}
	if s.DescriptionLanguages, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(r)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(r)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}(); err != nil {
		return s, fmt.Errorf("failed to read DescriptionLanguages field: %s", err)
	}
	return s, nil
}
func WritePackageInfo(s PackageInfo, w io.Writer) (err error) {
	if err := basic.WriteString(s.Uuid, w); err != nil {
		return fmt.Errorf("failed to write Uuid field: %s", err)
	}
	if err := basic.WriteString(s.Path, w); err != nil {
		return fmt.Errorf("failed to write Path field: %s", err)
	}
	if err := basic.WriteString(s.Version, w); err != nil {
		return fmt.Errorf("failed to write Version field: %s", err)
	}
	if err := basic.WriteString(s.Channel, w); err != nil {
		return fmt.Errorf("failed to write Channel field: %s", err)
	}
	if err := basic.WriteString(s.Author, w); err != nil {
		return fmt.Errorf("failed to write Author field: %s", err)
	}
	if err := basic.WriteString(s.Organization, w); err != nil {
		return fmt.Errorf("failed to write Organization field: %s", err)
	}
	if err := basic.WriteString(s.Date, w); err != nil {
		return fmt.Errorf("failed to write Date field: %s", err)
	}
	if err := basic.WriteString(s.TypeVersion, w); err != nil {
		return fmt.Errorf("failed to write TypeVersion field: %s", err)
	}
	if err := func() error {
		err := basic.WriteUint32(uint32(len(s.LangToName)), w)
		if err != nil {
			return fmt.Errorf("failed to write map size: %s", err)
		}
		for k, v := range s.LangToName {
			err = basic.WriteString(k, w)
			if err != nil {
				return fmt.Errorf("failed to write map key: %s", err)
			}
			err = basic.WriteString(v, w)
			if err != nil {
				return fmt.Errorf("failed to write map value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to write LangToName field: %s", err)
	}
	if err := func() error {
		err := basic.WriteUint32(uint32(len(s.LangToDesc)), w)
		if err != nil {
			return fmt.Errorf("failed to write map size: %s", err)
		}
		for k, v := range s.LangToDesc {
			err = basic.WriteString(k, w)
			if err != nil {
				return fmt.Errorf("failed to write map key: %s", err)
			}
			err = basic.WriteString(v, w)
			if err != nil {
				return fmt.Errorf("failed to write map value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to write LangToDesc field: %s", err)
	}
	if err := func() error {
		err := basic.WriteUint32(uint32(len(s.SupportedLanguages)), w)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range s.SupportedLanguages {
			err = basic.WriteString(v, w)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to write SupportedLanguages field: %s", err)
	}
	if err := func() error {
		err := basic.WriteUint32(uint32(len(s.Behaviors)), w)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range s.Behaviors {
			err = WriteBehaviorInfo(v, w)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to write Behaviors field: %s", err)
	}
	if err := func() error {
		err := basic.WriteUint32(uint32(len(s.Languages)), w)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range s.Languages {
			err = WriteLanguageInfo(v, w)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to write Languages field: %s", err)
	}
	if err := basic.WriteString(s.Installer, w); err != nil {
		return fmt.Errorf("failed to write Installer field: %s", err)
	}
	if err := func() error {
		err := basic.WriteUint32(uint32(len(s.RobotRequirements)), w)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range s.RobotRequirements {
			err = WriteRobotRequirement(v, w)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to write RobotRequirements field: %s", err)
	}
	if err := func() error {
		err := basic.WriteUint32(uint32(len(s.NaoqiRequirements)), w)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range s.NaoqiRequirements {
			err = WriteNaoqiRequirement(v, w)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to write NaoqiRequirements field: %s", err)
	}
	if err := func() error {
		err := basic.WriteUint32(uint32(len(s.Services)), w)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range s.Services {
			err = WritePackageService(v, w)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to write Services field: %s", err)
	}
	if err := func() error {
		err := basic.WriteUint32(uint32(len(s.ExecutableFiles)), w)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range s.ExecutableFiles {
			err = basic.WriteString(v, w)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to write ExecutableFiles field: %s", err)
	}
	if err := func() error {
		err := basic.WriteUint32(uint32(len(s.Dialogs)), w)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range s.Dialogs {
			err = WriteDialogInfo(v, w)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to write Dialogs field: %s", err)
	}
	if err := func() error {
		err := basic.WriteUint32(uint32(len(s.DescriptionLanguages)), w)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range s.DescriptionLanguages {
			err = basic.WriteString(v, w)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to write DescriptionLanguages field: %s", err)
	}
	return nil
}

type ServiceProcessInfo struct {
	Running   bool
	Name      string
	ExecStart string
	Autorun   bool
}

func ReadServiceProcessInfo(r io.Reader) (s ServiceProcessInfo, err error) {
	if s.Running, err = basic.ReadBool(r); err != nil {
		return s, fmt.Errorf("failed to read Running field: %s", err)
	}
	if s.Name, err = basic.ReadString(r); err != nil {
		return s, fmt.Errorf("failed to read Name field: %s", err)
	}
	if s.ExecStart, err = basic.ReadString(r); err != nil {
		return s, fmt.Errorf("failed to read ExecStart field: %s", err)
	}
	if s.Autorun, err = basic.ReadBool(r); err != nil {
		return s, fmt.Errorf("failed to read Autorun field: %s", err)
	}
	return s, nil
}
func WriteServiceProcessInfo(s ServiceProcessInfo, w io.Writer) (err error) {
	if err := basic.WriteBool(s.Running, w); err != nil {
		return fmt.Errorf("failed to write Running field: %s", err)
	}
	if err := basic.WriteString(s.Name, w); err != nil {
		return fmt.Errorf("failed to write Name field: %s", err)
	}
	if err := basic.WriteString(s.ExecStart, w); err != nil {
		return fmt.Errorf("failed to write ExecStart field: %s", err)
	}
	if err := basic.WriteBool(s.Autorun, w); err != nil {
		return fmt.Errorf("failed to write Autorun field: %s", err)
	}
	return nil
}

type IdleDefinition struct {
	IdleBases  []string
	IdleBreaks []string
}

func ReadIdleDefinition(r io.Reader) (s IdleDefinition, err error) {
	if s.IdleBases, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(r)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(r)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}(); err != nil {
		return s, fmt.Errorf("failed to read IdleBases field: %s", err)
	}
	if s.IdleBreaks, err = func() (b []string, err error) {
		size, err := basic.ReadUint32(r)
		if err != nil {
			return b, fmt.Errorf("failed to read slice size: %s", err)
		}
		b = make([]string, size)
		for i := 0; i < int(size); i++ {
			b[i], err = basic.ReadString(r)
			if err != nil {
				return b, fmt.Errorf("failed to read slice value: %s", err)
			}
		}
		return b, nil
	}(); err != nil {
		return s, fmt.Errorf("failed to read IdleBreaks field: %s", err)
	}
	return s, nil
}
func WriteIdleDefinition(s IdleDefinition, w io.Writer) (err error) {
	if err := func() error {
		err := basic.WriteUint32(uint32(len(s.IdleBases)), w)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range s.IdleBases {
			err = basic.WriteString(v, w)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to write IdleBases field: %s", err)
	}
	if err := func() error {
		err := basic.WriteUint32(uint32(len(s.IdleBreaks)), w)
		if err != nil {
			return fmt.Errorf("failed to write slice size: %s", err)
		}
		for _, v := range s.IdleBreaks {
			err = basic.WriteString(v, w)
			if err != nil {
				return fmt.Errorf("failed to write slice value: %s", err)
			}
		}
		return nil
	}(); err != nil {
		return fmt.Errorf("failed to write IdleBreaks field: %s", err)
	}
	return nil
}

type AutonomousAbilityStatus struct {
	Name    string
	Enabled bool
	Running bool
}

func ReadAutonomousAbilityStatus(r io.Reader) (s AutonomousAbilityStatus, err error) {
	if s.Name, err = basic.ReadString(r); err != nil {
		return s, fmt.Errorf("failed to read Name field: %s", err)
	}
	if s.Enabled, err = basic.ReadBool(r); err != nil {
		return s, fmt.Errorf("failed to read Enabled field: %s", err)
	}
	if s.Running, err = basic.ReadBool(r); err != nil {
		return s, fmt.Errorf("failed to read Running field: %s", err)
	}
	return s, nil
}
func WriteAutonomousAbilityStatus(s AutonomousAbilityStatus, w io.Writer) (err error) {
	if err := basic.WriteString(s.Name, w); err != nil {
		return fmt.Errorf("failed to write Name field: %s", err)
	}
	if err := basic.WriteBool(s.Enabled, w); err != nil {
		return fmt.Errorf("failed to write Enabled field: %s", err)
	}
	if err := basic.WriteBool(s.Running, w); err != nil {
		return fmt.Errorf("failed to write Running field: %s", err)
	}
	return nil
}

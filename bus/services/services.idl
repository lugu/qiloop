package services

interface ServiceDirectory
	fn service(name: str) -> ServiceInfo //uid:100
	fn services() -> Vec<ServiceInfo> //uid:101
	fn registerService(info: ServiceInfo) -> uint32 //uid:102
	fn unregisterService(serviceID: uint32) //uid:103
	fn serviceReady(serviceID: uint32) //uid:104
	fn updateServiceInfo(info: ServiceInfo) //uid:105
	fn machineId() -> str //uid:108
	fn _socketOfService(serviceID: uint32) -> obj //uid:109
	sig serviceAdded(serviceID: uint32, name: str) //uid:106
	sig serviceRemoved(serviceID: uint32, name: str) //uid:107
end

struct ServiceInfo
	name: str
	serviceId: uint32
	machineId: str
	processId: uint32
	endpoints: Vec<str>
	sessionId: str
end

struct LogLevel
        level: int32
end

struct TimePoint
        ns: uint64
end

struct LogMessage
	source: str
	level: LogLevel
	category: str
	location: str // format: "<machine id>:<process id>"
	message: str
	id: uint32
	date: TimePoint
	systemDate: TimePoint
end

interface LogProvider
        fn setVerbosity(level: LogLevel) //uid:100
        fn setCategory(category: str, level: LogLevel) //uid:101
        fn clearAndSet(filters: Map<str,int32>) //uid:102
end

interface LogListener
        fn setCategory(category: str, level: LogLevel) //uid:101
        fn clearFilters() //uid:102
        sig onLogMessage(msg: LogMessage) //uid:103
        prop verbosity(level: LogLevel) //uid:104
        prop filters(filters: Map<str,int32>) //uid:105
end

interface LogManager
	fn log(messages: Vec<LogMessage>) //uid:100
	fn createListener() -> LogListener //uid:101
	fn getListener() -> LogListener //uid:102
	fn addProvider(source: LogProvider) -> int32 //uid:103
	fn removeProvider(providerID: int32) //uid:104
end

interface ALTextToSpeech
	fn say(stringToSay: str)
end

package services

interface ServiceDirectory
	fn service(P0: str) -> ServiceInfo //uid:100
	fn services() -> Vec<ServiceInfo> //uid:101
	fn registerService(P0: ServiceInfo) -> uint32 //uid:102
	fn unregisterService(P0: uint32) //uid:103
	fn serviceReady(P0: uint32) //uid:104
	fn updateServiceInfo(P0: ServiceInfo) //uid:105
	fn machineId() -> str //uid:108
	fn _socketOfService(P0: uint32) -> obj //uid:109
	sig serviceAdded(P0: uint32, P1: str) //uid:106
	sig serviceRemoved(P0: uint32, P1: str) //uid:107
end
struct ServiceInfo
	name: str
	serviceId: uint32
	machineId: str
	processId: uint32
	endpoints: Vec<str>
	sessionId: str
end
interface LogManager
	fn log(P0: Vec<LogMessage>) //uid:100
	fn createListener() -> obj //uid:101
	fn getListener() -> obj //uid:102
	fn addProvider(P0: obj) -> int32 //uid:103
	fn removeProvider(P0: int32) //uid:104
end
struct LogMessage
	source: str
	level: int32
	category: str
	location: str
	message: str
	id: uint32
	date: uint64
	systemDate: uint64
end
